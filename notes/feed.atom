<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AK#Notes</title>
  <subtitle>This my personal website where I post my notes about thing that I have learn.</subtitle>
  <link href="https://anzenkodo.github.io/notes/" />
  <link href="https://anzenkodo.github.io/notes/" rel="self" />
	<id>https://anzenkodo.github.io/notes/</id>
  <updated>2022-12-26T21:04:39.182Z</updated>
  <author>
    <name>Axel</name>
    <email>AnzenKodo@altmails.com</email>
  </author>
    <entry>
    <title>Home</title>
    <link href="https://anzenkodo.github.io/notes/" />
    <updated>2022-12-26T21:04:39.182Z</updated>
    <id>/notes/</id>
    <content type="html"><![CDATA[<p>This my personal website where I post my notes about thing that I have learn.</p>
<h2>Features</h2>
<ul>
<li>Easy to:
<ul>
<li>Setup</li>
<li>Configure</li>
<li>Write</li>
</ul>
</li>
<li>Supports:
<ul>
<li>Tags</li>
<li>Search (Power by <a href="https://duckduckgo.com/">DuckDuckGo</a>)</li>
<li>Canonical</li>
<li><a href="https://ogp.me/">Open Graph</a></li>
<li>Analytics</li>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
</ul>
</li>
<li>Auto generate:
<ul>
<li>GitHub Pages Actions file</li>
<li>Favicon</li>
<li>Sitemap</li>
<li>404 page</li>
<li>CSS</li>
<li><code>mainfest.json</code> file</li>
<li>Feeds
<ul>
<li>RSS</li>
<li>JSON</li>
<li>Atom</li>
</ul>
</li>
</ul>
</li>
<li>No Client side JavaScript</li>
<li>Minified HTML &amp; Inline CSS</li>
<li>Lightweight</li>
</ul>
<h2>Getting Started</h2>
<h3>Installing</h3>
<ul>
<li>Download deno from <a href="https://deno.land/">https://deno.land/</a> and install it.</li>
<li>After installing deno run following commands.</li>
</ul>
<pre><code class="language-sh"># Install the dblog
deno run https://deno.land/x/dblog/install.js # Add deno to path, if you didn't already.

# See all the options that are available
dblog --help

# Setup the your blog (Skip this if already your blog setup)
dblog --setup

# Make your blog and Run on localhost
dblog --serve
</code></pre>
<h3>Update</h3>
<p>To update dblog, rerun the installation command.</p>
<pre><code class="language-sh">deno run https://deno.land/x/dblog/install.js
</code></pre>
<h3>Run dblog without installing dblog</h3>
<pre><code class="language-sh">deno run -A https://deno.land/x/dblog/mod.js --help
</code></pre>
<h2>Live Demo &amp; Folder</h2>
<ul>
<li><a href="https://anzenkodo.github.io/dblog">Live Demo</a></li>
<li><a href="https://github.com/AnzenKodo/dblog/tree/gh-pages">Generated Files</a></li>
</ul>
<h2>Configuration</h2>
<p>Place <code>config.json</code> in root folder to edit default configuration. The
<code>config.json</code> is optional.</p>
<p><strong>The <code>config.json</code> with default configuration:</strong></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;dblog&quot;,
  &quot;start_url&quot;: &quot;https://AnzenKodo.github.io/dblog/&quot;,
  &quot;description&quot;: &quot;dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.&quot;,
  &quot;email&quot;: &quot;&quot;,
  &quot;author&quot;: &quot;AnzenKodo&quot;,
  &quot;posts&quot;: &quot;./posts&quot;,
  &quot;output&quot;: &quot;./site&quot;,
  &quot;favicon&quot;: &quot;favicon.svg&quot;,
  &quot;lang&quot;: &quot;en-US&quot;,
  &quot;port&quot;: 8000,
  &quot;background&quot;: &quot;#ffffff&quot;,
  &quot;foreground&quot;: &quot;#000000&quot;,
  &quot;theme&quot;: &quot;#01a252&quot;,
  &quot;footer&quot;: &quot;&lt;p&gt;Made by &lt;a href=\&quot;https://AnzenKodo.github.io/AnzenKodo\&quot;&gt;AnzenKodo&lt;/a&gt; under &lt;a href=\&quot;https://anzenkodo.github.io/dblog/LICENSE\&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;\n&quot;,
  &quot;page404&quot;: &quot;404 Page Not Found, Sorry :(&quot;,
  &quot;backup&quot;: false,
  &quot;exclude&quot;: [
    &quot;config.json&quot;,
    &quot;backup.json&quot;
  ],
  &quot;nav&quot;: {},
  &quot;head&quot;: &quot;&quot;
}
</code></pre>
<p><strong>Note:</strong> Every option is optional.</p>
<ul>
<li><strong>name</strong> - Name of your blog.</li>
<li><strong>start_url</strong> - Start URL of your site. <em>Example:</em> ‘<a href="https://example.com/">https://example.com/</a>’,
‘<a href="https://blog.example.com/">https://blog.example.com/</a>’, ‘<a href="https://example.com/blog/">https://example.com/blog/</a>’</li>
<li><strong>email</strong> - Your email address. This will enable ‘Reply with Email’ button in
posts.</li>
<li><strong>author</strong> - Your name or username.</li>
<li><strong>posts</strong> - Path of posts.</li>
<li><strong>output</strong> - Folder where your blog build will be placed. <em>Example:</em> ‘./blog’,
‘…/site/blog’, ‘site/blog’.</li>
<li><strong>favicon</strong> - <em><strong>Recommended 500x500px</strong></em>. Favicon location. <em>If empty,
generated favicon will be used</em>. <em>Example:</em> ‘./favicon.png’,
‘./static/favicon.icon’, ‘…/favicon.jpg’.</li>
<li><strong>lang</strong> - Blog language in ‘RFC 5646’ format. Example: ‘ja’ for Japanese,
‘sv’ for Swedish, ‘it’ for Italian. See
<a href="https://wikipedia.org/wiki/IETF_language_tag#List_of_common_primary_language_subtags">List of common primary language subtags in Wikipedia</a></li>
<li><strong>footer</strong> - Footer of your website. <em>Supports CommonMark Markdown format</em>.
<em>Example:</em>
<code>Made by [AnzenKodo](https://AnzenKodo.github.io/AnzenKodo) uder [MIT License](https://anzenkodo.github.io/dblog/LICENSE.html)</code>.</li>
<li><strong>port</strong> - Port of your blog on localhost. <em>Example</em>: ‘8080’, ‘8300’, ‘8400’.</li>
<li><strong>background</strong> - Background color in light mode. Becomes foreground color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>foreground</strong> - Foreground color in light mode. Becomes background color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>theme</strong> - Blog theme color. <em>Example:</em> ‘#0583f2’, ‘#f20544’, ‘#f2b705’.</li>
<li><strong>page404</strong> - 404 page message. <em>Example:</em> ‘Sorry, page not found :(’.</li>
<li><strong>backup</strong> - Backup file location. <em>Example:</em> <code>false</code> to don’t generate
<code>backup.json</code> file, ‘./backup.json’, ‘./site/backup.json’, ‘…/backup.json’.</li>
<li><strong>exclude</strong> - Exclude files or folder. <em>Example:</em><pre><code class="language-json">&quot;exclude&quot;: [ &quot;.env&quot;, &quot;todo.md&quot;, &quot;drafts&quot; ],
</code></pre>
</li>
<li><strong>nav</strong> - Nav bar item list. Example:<pre><code class="language-json">&quot;nav&quot;: {
  &quot;about&quot;: &quot;./about.md&quot;,
  &quot;stie&quot;: &quot;https://anzenkodo.github.io/AnzenKodo&quot;
}
</code></pre>
</li>
<li><strong>head</strong> - If you analytics or any other tags you want to put on head tag.
<em>Example:</em>
<code>&lt;link rel=&quot;preconnect&quot; href=&quot;//www.google-analytics.com&quot; crossorigin=&quot;&quot;&gt;</code>.</li>
</ul>
<h2>CLI Options</h2>
<pre><code class="language-sh">dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.

Website: https://anzenkodo.github.io/dblog
Package: https://deno.land/x/dblog
Repo: https://github.com/AnzenKodo/dblog
Docs: https://anzenkodo.github.io/dblog/posts/dblog-Docs.html

USAGE:
  dblog [OPTIONS]

OPTIONS:
  --serve   Build blog and Start localhost.
    --noopen  Don't open browser, when starting localhost.
  --build   Build blog without starting localhost.
  --setup   Setup new blog.
  --backup  Restore blog if 'backup.json' file available.
  --readme  Generate 'README.md' file.
  --help    Print help information.
</code></pre>
<h2>File Options</h2>
<pre><code>---
title: If empty the file name will be used
description: If empty the first paragraph will be used.
tags: [ &quot;tag1&quot;, &quot;tag2&quot; ]
date: 20/08/2020
canonical:
---
</code></pre>
<ul>
<li><strong>date</strong> - If empty, the file date will be used. <em>Note:</em> The file <code>date</code> might
not always right. So always give you own date.</li>
<li><strong>canonical</strong> - Share content between multiple sites without impacting SEO.
Just put canonical URL. Know more about
<a href="https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls">canonical url</a>.</li>
</ul>
<h3>If file name start with underscore “_” it will be consider as draft.</h3>
<p><strong>Example:</strong> <code>posts/_This is draft.md</code></p>
<h2>Markdown Guide</h2>
<h3><a href="https://commonmark.org/help/">CommonMark</a> Syntex</h3>
<h4>Heading</h4>
<pre><code class="language-md"># H1

## H2

### H3

#### H4

##### H5

###### H6
</code></pre>
<h1>H1</h1>
<h2>H2</h2>
<h3>H3</h3>
<h4>H4</h4>
<h5>H5</h5>
<h6>H6</h6>
<h4>Inline style</h4>
<pre><code class="language-md">**Bold** _Italic_ ~~Strikethrough~~
</code></pre>
<p><strong>Bold</strong> <em>Italic</em> <s>Strikethrough</s></p>
<h4>Link and Image</h4>
<pre><code class="language-md">[website](https://anzenkodo.github.io/dblog)
![Jurassic Deno by Samip Poudel](https://deno.land/images/artwork/jurassicDeno.jpg)
</code></pre>
<p><a href="https://anzenkodo.github.io/dblog">website</a>
<img src="https://deno.land/images/artwork/jurassicDeno.jpg" alt="Jurassic Deno by Samip Poudel"></p>
<h4>Blockquote</h4>
<pre><code class="language-md">&gt; 'The road to hell is paved with good intentions' by Abbot Bernard
</code></pre>
<blockquote>
<p>‘The road to hell is paved with good intentions’ by Abbot Bernard</p>
</blockquote>
<h4>List</h4>
<pre><code class="language-md">- List
  - List
- List

1. One
2. Two
3. Three
</code></pre>
<ul>
<li>List
<ul>
<li>List</li>
</ul>
</li>
<li>List</li>
</ul>
<ol>
<li>One</li>
<li>Two</li>
<li>Three</li>
</ol>
<h4>Horizontal rule</h4>
<pre><code class="language-md">---
</code></pre>
<hr>
<h4>Code block</h4>
<div class="highlight highlight-source-lisp notranslate position-relative overflow-auto">
<pre>
`Inline code` with backticks
```js
  console.log("Code Blog in JavaScript");
```
</pre>
</div>
<p><code>Inline code</code> with backticks</p>
<pre><code class="language-js">console.log(&quot;Code Blog in JavaScript&quot;);
</code></pre>
<h3>Additional Markdown syntax</h3>
<h4>Checkbox</h4>
<pre><code class="language-md">- [ ] Checkbox
- [x] Checkbox with tick
</code></pre>
<ul class="task-list">
<li class="task-list-item"><input type="checkbox" id="cbx_0" disabled="true"><label for="cbx_0"> Checkbox</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> Checkbox with tick</label></li>
</ul>
<h4>Image with caption</h4>
<pre><code class="language-md">![Deno](https://deno.land/images/artwork/deno_matrix.png &quot;Matrix by bramaudi&quot;)
</code></pre>
<figure data-type="image"><img src="https://deno.land/images/artwork/deno_matrix.png" alt="Deno" loading="lazy" decoding="async"><figcaption>Matrix by bramaudi</figcaption></figure>
<h4>Footer</h4>
<pre><code class="language-md">Here is a footnote reference[^1]. [^1]: Here is the footnote.
</code></pre>
<p>Here is a footnote reference[^1]. [^1]: Here is the footnote.</p>
<h4>Additional inline syntax</h4>
<pre><code class="language-md">~sub~ ^sup^ ==mark== [[kbd]] _underline_ ++insert++ ~~delete~~
</code></pre>
<p><sub>sub</sub>
<sup>sup</sup>
<mark>mark</mark>
<kbd>kbd</kbd>
<u>underline</u>
<ins>insert</ins>
<del>delete</del></p>
<h4>Description list</h4>
<pre><code class="language-md">: Definition 1 Term 2 with _inline markup_ : Definition 2 Third paragraph of
definition 2.
</code></pre>
<dl>
  <dt>Definition 1</dt>
  <dd>Term 2 with inline.</dd>
  <dt>Definition 2</dt>
  <dd>Third paragraph of definition 2.</dd>
</dl>
<h4>Abbreviation</h4>
<pre><code class="language-md">*[abbr]: Abbreviation
</code></pre>
<p><abbr title="Abbreviation">abbr</abbr></p>
<h4>Table</h4>
<h5>Normal</h5>
<pre><code class="language-md">| Syntax    | Description |
| --------- | ----------- |
| Header    | Title       |
| Paragraph | Text        |
</code></pre>
<table>
<thead>
<tr>
<th>Syntax</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Header</td>
<td>Title</td>
</tr>
<tr>
<td>Paragraph</td>
<td>Text</td>
</tr>
</tbody>
</table>
<h5>Multiline</h5>
<pre><code class="language-md">| Markdown  | Rendered HTML |
| --------- | ------------- |
| _Italic_  | _Italic_      |
|           |               |
| - Item 1  | - Item 1      |
| - Item 2  | - Item 2      |
| ```python | ```python \   |
| .1 + .2   | .1 + .2       |
</code></pre>
<table><thead><tr><th>Markdown</th><th>Rendered HTML</th></tr></thead> <tbody>
  <tr> <td> <pre><code>*Italic* </code></pre> </td> <td> <p><em>Italic</em></p>
  </td> </tr> <tr> <td> <pre><code>- Item 1 - Item 2</code></pre> </td> <td>
  <ul> <li>Item 1</li> <li>Item 2</li> </ul> </td> </tr> <tr> <td>
<pre><code>
```python
.1 + .2
```
</code></pre> </td> <td> <pre><code class="language-python">.1 + .2
  </code></pre> </td> </tr> </tbody> </table>
<h5>Rowspan</h5>
<pre><code class="language-md">|                       Stage | Direct Products | ATP Yields |
| --------------------------: | --------------: | ---------: |
|                  Glycolysis |           2 ATP |            |
|                          ^^ |          2 NADH |   3--5 ATP |
|          Pyruvaye oxidation |          2 NADH |      5 ATP |
|           Citric acid cycle |           2 ATP |            |
|                          ^^ |          6 NADH |     15 ATP |
|                          ^^ |         2 FADH2 |      3 ATP |
|              **30--32** ATP |                 |            |
| [Net ATP yields per hexose] |                 |            |
</code></pre>
<table> <caption id="netatpyieldsperhexose">Net ATP yields per hexose</caption>
  <thead> <tr> <th align="right">Stage</th> <th align="right">Direct
Products</th> <th align="right">ATP Yields</th> </tr> </thead> <tbody> <tr> <td
align="right" rowspan="2">Glycolysis</td> <td align="right" colspan="2">2
ATP</td> </tr> <tr> <td align="right">2 NADH</td> <td align="right">3–5
ATP</td> </tr> <tr> <td align="right">Pyruvaye oxidation</td> <td
align="right">2 NADH</td> <td align="right">5 ATP</td> </tr> <tr> <td
align="right" rowspan="3">Citric acid cycle</td> <td align="right"
colspan="2">2 ATP</td> </tr> <tr> <td align="right">6 NADH</td> <td
align="right">15 ATP</td> </tr> <tr> <td align="right">2 FADH2</td> <td
align="right">3 ATP</td> </tr> <tr> <td align="right"
colspan="3"><strong>30–32</strong> ATP</td> </tr> </tbody> </table>
<h4>Headerless</h4>
<pre><code class="language-md">|--|--|--|--|--|--|--|--| |♜| |♝|♛|♚|♝|♞|♜| | |♟|♟|♟| |♟|♟|♟| |♟| |♞| | | | | |
| |♗| | |♟| | | | | | | | |♙| | | | | | | | | |♘| | | |♙|♙|♙|♙| |♙|♙|♙|
|♖|♘|♗|♕|♔| | |♖|
</code></pre>
<table> <tbody> <tr> <td>♜</td> <td></td> <td>♝</td> <td>♛</td> <td>♚</td>
  <td>♝</td> <td>♞</td> <td>♜</td> </tr> <tr> <td></td> <td>♟</td> <td>♟</td>
  <td>♟</td> <td></td> <td>♟</td> <td>♟</td> <td>♟</td> </tr> <tr> <td>♟</td>
  <td></td> <td>♞</td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr>
  <tr> <td></td> <td>♗</td> <td></td> <td></td> <td>♟</td> <td></td> <td></td>
  <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td>♙</td>
  <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td>
  <td></td> <td></td> <td>♘</td> <td></td> <td></td> </tr> <tr> <td>♙</td>
  <td>♙</td> <td>♙</td> <td>♙</td> <td></td> <td>♙</td> <td>♙</td> <td>♙</td>
  </tr> <tr> <td>♖</td> <td>♘</td> <td>♗</td> <td>♕</td> <td>♔</td> <td></td>
  <td></td> <td>♖</td> </tr> </tbody> </table>]]></content>
  </entry>
  <entry>
    <title>Question Bank</title>
    <link href="https://anzenkodo.github.io/notes/programming/database/er-diagram/question-bank.html" />
    <updated>2022-12-26T21:04:39.182Z</updated>
    <id>/notes/programming/database/er-diagram/question-bank.html</id>
    <content type="html"><![CDATA[<h2>Question bank for 2 Marks.</h2>
<h3>1. Define Entity Set?</h3>
<ul>
<li>An entity set is a collection of similar entites.</li>
<li>An entity is an object or concept in the real world that can be identified and
tracked, such as a person, a place or a thing.</li>
<li>An entity set is a set of entities of the same type that share common
properties.</li>
<li>Example:
<ul>
<li>A “customer” entity set might include all of the customer records in a
customer database, with each record repesenting a single customer. The
entity set would include attributes such as the customer’s name, address,
and phone number, as well as any other relevant information.</li>
</ul>
</li>
<li>Entity sets represent as tables in a database, with each row representing a
single entity and each column representing an attribute of that entity.</li>
</ul>
<h3>2. Define Generalization?</h3>
<h3>3. Define Specialization?</h3>
<h3>4. Explain referential integrity constraints with example?</h3>
<h3>5. Explain Primary key constraint with example?</h3>
<h2>Question bank for 3 Marks.</h2>
<h3>1. Write notes on types of attributes?</h3>
<h3>2. Explain different types of Keys in DBMS?</h3>
<h3>3. List out and explain mapping Cardinalities in ER Diagram?</h3>
<h3>4. Write notes on the following constraints: i) Not NULL ii) Unique</h3>
<h3>5. Write notes on the following</h3>
<h4>1. Left Outer Join</h4>
<h4>2. Right Outer Join</h4>
<h2>Question bank for 5 Marks.</h2>
<h3>1. Construct an ER diagram for a car insurance company that has a set of customers each of whom owns one or more cars, Each car has associated with it zero to any number of recorded accidents?</h3>
<h3>2. Explain Unary operations in relational algebra?</h3>
<h3>3. Explain Set Theory operation in relational algebra?</h3>
<h3>4. Define generalization and specialization hierarchy for a motor vehicle sales company. The Company sells motorcycles, passenger cars, vans and buses. Justify your placement of attributes at each level of hierarchy. Explain why they should not be placed at higher or lower level.</h3>]]></content>
  </entry>
  <entry>
    <title>ER Diagram</title>
    <link href="https://anzenkodo.github.io/notes/programming/database/er-diagram/" />
    <updated>2022-12-26T21:04:39.182Z</updated>
    <id>/notes/programming/database/er-diagram/</id>
    <content type="html"><![CDATA[<p>An Entity Relationship Diagram (ERD) is a visual representation of different
data using conventions that describe how these data are related to each other.</p>
<p>Example of ER Diagram:</p>
<figure data-type="image"><img src="./ER.svg" alt="ER Diagram" loading="lazy" decoding="async"></figure>
<p>In the diagram, the elements inside rectangles are called entities while the
items inside diamonds denote the relationships between entities.</p>
<p>In the diagram, the elements inside rectangles are called entities while the
items inside diamonds denote the relationships between entities.</p>
<h2>Features</h2>
<h3>Entity</h3>
<ul>
<li>An entity can be a person, place, event, or object that is relevant to given
system.</li>
<li>For Example, a school system may include student, teacher, major courses,
subject, fees, and other items.</li>
<li>Entites are represented in ER diagrams by a rectangles and named using
singular nouns.</li>
</ul>
<h3>Weak Entity</h3>
<ul>
<li>A weak entity is an entity that depends on teh existence of another entity.</li>
<li>A weak entity is represented in a database by a separated table, but it does
not have a primary key of its own.</li>
<li>It relies on the primary key of the entity on which it depends.</li>
<li>Example:
<ul>
<li>Consider a databse of orders placed by customers at a retail store.
“customer” entity might be the identifying entity, while the “order” entity
is the weak entity. Each order is associated with specific customer, and the
customer’s primary key (e.g. a customer ID) is used as the primary key for
the order as well. This means that the order cannot be uniquely identified
without also specifying the customer to which it belongs.</li>
</ul>
</li>
<li>The single identifying entity can have multiple weak entities associated with
it.</li>
<li>Diagram:<pre><code>+---------+      +--------------+
|         |      |+------------+|
| Orders  |------||Orders Items||
|         |      |+------------+|
+---------+      +--------------+
</code></pre>
</li>
</ul>
<h3>Attribute</h3>
<ul>
<li>An attributes is a characterstic or property of an entity.</li>
<li>Attributes are represented as columns in a database table, with each row
representing a single entity and each column representing an attribute of that
entity.</li>
<li>Example: A “customer” table might include attributes such as “name”,
“address,” and “phone number,” with each attribute storing information about a
perticular customer.</li>
<li>There are two types of attributes:
<ul>
<li>Multivalued Attribute</li>
<li>Derived Attribute</li>
</ul>
</li>
</ul>
<h4>Multivalued Attribute</h4>
<ul>
<li>If an attribute can have more than one value it is called an multivalued
attribute.</li>
<li>It is important to note that this is different to an attribute having it own
attributes.</li>
<li>Example: A “customer” entity can have multiple “phone_numbers” values.</li>
<li>Diagram: <img src="./Multivalued-Attribute.svg" alt="Multivalued Attribute Diagram"></li>
</ul>
<h4>Derived Attribute</h4>
<ul>
<li>An attribute based on another attribute.</li>
<li>Example: “Age” can be derived from “Date of birth”.</li>
<li>Diagram: <img src="./Derived-Attribute.svg" alt="Derived Attribute Diagram"></li>
</ul>
<h3>Relationship</h3>
<ul>
<li>A relationship describes how entities interact.</li>
<li>Example: The entity “carpenter” may be related to the entity “table” by the
relationship “builds” or “makes”.</li>
<li>Relationships are represented by diamond shapes and are labeled using verbs.</li>
</ul>
<h4>Recursive Relationship</h4>
<ul>
<li>The same entity participates more than once in the relationship.</li>
<li>Example: An employee can be a supervisor and be supervised, so there is a
recursive relationship.</li>
</ul>
<h2>Extended Features</h2>
<h3>Generalization</h3>
<ul>
<li>A generalization hierarchy is a form of abstraction that specifies that two or
more entities that share common attributes can be generalized into a
higher-level entity type called a super type or generic entity.</li>
<li>The lower level of entities becomes the subtypes, or categories, to the super
type. Subtypes are dependent entities.</li>
<li>Example: Account is the higher-level entity set and saving account and current
account are lower-level entity sets.</li>
<li>Diagram: <img src="./Generalization.webp" alt="Generalization Diagram"></li>
</ul>
<h3>Specialization</h3>
<ul>
<li>Specialization is the process of taking subsets of the higher-level entity set
to form lower-level entity sets.</li>
<li>It is a process of defining a set of subclasses of an entity type, which is
called the super class of the specialization.</li>
<li>The process of defining subclass is based on the basis of some distinguish
characteristics of the entities in the super class.</li>
<li>Diagram: <img src="./Specialization.webp" alt="Specialization Diagram"></li>
</ul>
<h3>Aggregration</h3>
<ul>
<li>Aggregration is a process when relation between two entities is treated as a
single entity.</li>
<li>Example: The relationship between Center and Course together, is acting as an
Entity, which is in relationship with another entity Visitor.</li>
<li>Diagram: <img src="./Aggregration.webp" alt="Aggregration Diagram"></li>
</ul>
<h2>Resources</h2>
<ul>
<li><a href="https://www.lucidchart.com/pages/er-diagrams">What is an Entity Relationship Diagram (ERD)?</a></li>
<li><a href="https://www.studytonight.com/dbms/generalization-and-specialization.php">The Enhanced ER Model</a></li>
</ul>]]></content>
  </entry>
  <entry>
    <title>CSS</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/css.html" />
    <updated>2022-12-26T21:04:39.182Z</updated>
    <id>/notes/programming/languages/css.html</id>
    <content type="html"><![CDATA[<h1>CSS</h1>
<p><a href="/notes/CSS%208946e12a95f04e3490bd9c09bfb99d1e/SASS%20d57c9cbb233644a3a615a487f4cdf949.md">SASS</a></p>
<ul>
<li>
<p>BEM Method</p>
<pre><code class="language-css">/* Block component */
.btn {}
/* Element that depends upon the block */
.btn__price {}
/* Modifier that changes the style of the block */
.btn--orange {}
.btn--big {}
</code></pre>
</li>
<li>
<p>Dark Mode Setting</p>
<pre><code class="language-css">:root {
  color-scheme: light dark; /* both supported */
}
</code></pre>
</li>
<li>
<p>Image Dark</p>
<ul>
<li>
<p>Apply the filter directly on the body tag.</p>
<pre><code class="language-css">body.dark-theme img {
  filter: brightness(.8) contrast(1.2);
}
</code></pre>
</li>
<li>
<p>Or apply it via media query.</p>
<pre><code class="language-css">@media (prefers-color-scheme: dark) {
  img {
    filter: brightness(.8) contrast(1.2);
  }
}
</code></pre>
</li>
</ul>
</li>
<li>
<p>Image prefer Dark</p>
<pre><code class="language-html">&lt;picture&gt;
  &lt;!-- Use this image if the user's OS setting is light or unset --&gt;
  &lt;source srcset=&quot;photo-light.png&quot; media=&quot;(prefers-color-scheme: light) or (prefers-color-scheme: no-preference)&quot;&gt;
  &lt;!-- Use this image if the user's OS setting is dark --&gt;
  &lt;source srcset=&quot;photo-dark.png&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;
&lt;/picture&gt;
</code></pre>
</li>
<li>
<p>Non-standard attributes, dataset</p>
<pre><code class="language-css">&lt;style&gt;
  /* styles rely on the custom attribute &quot;order-state&quot; */
  .order[order-state=&quot;new&quot;] {
    color: green;
  }

  .order[order-state=&quot;pending&quot;] {
    color: blue;
  }

  .order[order-state=&quot;canceled&quot;] {
    color: red;
  }
&lt;/style&gt;

&lt;div class=&quot;order&quot; order-state=&quot;new&quot;&gt;
  A new order.
&lt;/div&gt;

&lt;div class=&quot;order&quot; order-state=&quot;pending&quot;&gt;
  A pending order.
&lt;/div&gt;

&lt;div class=&quot;order&quot; order-state=&quot;canceled&quot;&gt;
  A canceled order.
&lt;/div&gt;
</code></pre>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>C</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/c.html" />
    <updated>2022-12-26T21:04:39.182Z</updated>
    <id>/notes/programming/languages/c.html</id>
    <content type="html"><![CDATA[<h1>C</h1>
<ul>
<li>In fact, you should use the main() to do very little except call each of the other functions.</li>
<li>A good rule of thumb is that a function should not take more lines than will fit on a single screen. If the function is longer than that, you’re probably making it do too much.</li>
<li>The difference between local and global variables:
<ul>
<li>A variable is global only if you define the variable (such as inti;) before a function name.</li>
<li>A variable is local only if you define it after an opening brace. A function always begins with opening braces. Some statements, such as while, also have opening braces, and you can define local variables within those braces as well.</li>
</ul>
</li>
<li>Local variables are safer than global variables.</li>
<li>Don’t define global variables in the middle of a program. They’re too hard to locate if you do.</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Bash</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/bash.html" />
    <updated>2022-12-26T21:04:39.182Z</updated>
    <id>/notes/programming/languages/bash.html</id>
    <content type="html"><![CDATA[<p><a href="#">#</a> Bash</p>
<ul>
<li>
<p>Functions Info</p>
<p><strong>apropos</strong> - List of man pages for possible matches based on a search term.</p>
</li>
</ul>
<h2>Commands</h2>
<ul>
<li>
<p>Man Page Organization</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/Man%20Page%202df02a5a631a4ebe9bcfd37a72009fc0.csv">Man Page</a></p>
</li>
<li>
<p>Redirecting Standard Output</p>
<pre><code class="language-bash">ls -l /usr/bin &gt; ls-output.txt
</code></pre>
<ul>
<li>This makes output of ls command</li>
</ul>
</li>
<li>
<p>About <code>uniq</code></p>
<ul>
<li><code>uniq</code> to remove any duplicates from the output of the <code>sort</code> command.</li>
</ul>
<pre><code class="language-bash">ls /bin /usr/bin | sort | uniq
</code></pre>
<ul>
<li>To see the list of duplicates instead, add the <code>d</code> option to <code>uniq</code></li>
</ul>
<pre><code class="language-bash">ls /bin /usr/bin | sort | uniq -d
</code></pre>
</li>
<li>
<p>About <code>tee</code></p>
<ul>
<li><code>tee</code> is like <code>ls &gt; output.txt</code> but it can work with grep command.</li>
</ul>
<pre><code class="language-bash">ls /usr/bin | tee ls.txt | grep zip
</code></pre>
<h2>About <code>echo</code></h2>
<pre><code class="language-bash">echo $((2 + 2))
</code></pre>
</li>
<li>
<p>Symbols</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/Symbols%20d88a1a92cda7446fa8a9d2c975c8947e.csv">Symbols</a></p>
</li>
<li>
<p><code>echo</code> Arithmetic Exponentiation can be nested</p>
<pre><code class="language-bash">echo $(($((5**2)) * 3))
</code></pre>
</li>
<li>
<p>The range of integers.</p>
<pre><code class="language-bash">echo {1..10}
echo a{A{1,2},B{3,4}}b
</code></pre>
</li>
<li>
<p>Enverment Value List</p>
<pre><code class="language-bash">cli printenv | less
set | less
</code></pre>
</li>
</ul>
<h2>History</h2>
<ul>
<li>
<p>To see the history</p>
<pre><code class="language-bash">history
</code></pre>
</li>
<li>
<p>History Command</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/History%20Command%205694bb062b694eb68fa66879592e9106.csv">History Command</a></p>
</li>
<li>
<p>History Expansion Commands</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/History%20Expansion%20Commands%204935186cd0cd4e49a5c894c0463b2851.csv">History Expansion Commands</a></p>
</li>
<li>
<p>To record the command</p>
<pre><code class="language-bash">script
</code></pre>
</li>
</ul>
<h2>Permissions</h2>
<ul>
<li>
<p>To see the group number</p>
<pre><code class="language-bash">id
</code></pre>
</li>
<li>
<p>File Type</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/File%20Type%20b93329415ef14da18905fe8e533748f4.csv">File Type</a></p>
</li>
<li>
<p>Permission Attributes -rwxrwxr–</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/Permission%20Attributes%20-rwxrwxr%E2%80%93%2035ff6cb19e8645a3b96ba09a33eba035.csv">Permission Attributes -rwxrwxr–</a></p>
</li>
<li>
<p>File Modes in Binary and Octal</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/File%20Modes%20in%20Binary%20and%20Octal%208ac1bb600cca40ebb1db460155009adb.csv">File Modes in Binary and Octal</a></p>
</li>
<li>
<p>The attribute for changing the file permission</p>
<ul>
<li><code>7 (rwx)</code>, <code>6 (rw-)</code>, <code>5 (r-x)</code>, <code>4 (r--)</code>, and <code>0 (---)</code></li>
</ul>
</li>
<li>
<p><code>chmod</code> Symbolic Notation</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/chmod%20Symbolic%20Notation%2036655aed32be491d8cf121e4b3981626.csv">chmod Symbolic Notation</a></p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/chmod%20Symbolic%20Notation%20Examples%20d2fdf09328984fce96f5699222acfa25.csv">chmod Symbolic Notation Examples</a></p>
</li>
<li>
<p><code>umask</code> command controls the default permissions given to a file when it is created.</p>
<pre><code class="language-bash">umask 005
</code></pre>
</li>
</ul>
<h2>File System</h2>
<ul>
<li>
<p>Testing and Repairing File Systems</p>
<pre><code class="language-bash">sudo fsck /dev/sdb1
</code></pre>
</li>
<li>
<p>Make bootable USB drive</p>
<pre><code class="language-bash">sudo dd bs=4M if=path/to/input.iso of=/dev/sd&lt;?&gt; conv=fdatasync  status=progress
</code></pre>
</li>
</ul>
<h2>Helpful Command</h2>
<ul>
<li>
<p>Execute <code>find</code> file with command use <code>xargs</code></p>
<pre><code class="language-bash">find ~ -type f -name &quot;index.html&quot; | xargs ls -l
</code></pre>
</li>
<li>
<p>Use <code>find</code> to find the file</p>
<pre><code class="language-bash">find ~ -type f -name &quot;index.html&quot;
</code></pre>
</li>
<li>
<p>Best way to compress in tar</p>
<pre><code class="language-bash">tar cfJ playground.tar.xz playground
</code></pre>
</li>
<li>
<p>How to Mount ISO File on Linux</p>
<pre><code class="language-bash">mount -t iso9660 -o loop image.iso /mnt/iso_image
</code></pre>
</li>
<li>
<p>How to sort in Linux</p>
<pre><code class="language-bash">sort -nk 5

# With command

ls -l /usr/share | sort -nk 5

# Sort in ':'

sort -ht ':' -k 3 /etc/passwd | head
</code></pre>
</li>
<li>
<p>Remove Duplicate use <code>uniq</code></p>
<pre><code class="language-bash">sort foo.txt | uniq
</code></pre>
</li>
<li>
<p>Spell check in Terminal</p>
<pre><code class="language-bash">aspell check filename

# To check HTML code

aspell -H check html-filename
</code></pre>
</li>
<li>
<p>To make PDF</p>
<pre><code class="language-bash">ls -l ~/ | pr pr.ps | groff &gt; pr.ps

# Convert PostScript file into Potable Document File

ps2pdf pr.ps pr.pdf
</code></pre>
</li>
<li>
<p>Good Locations for Scripts</p>
<ul>
<li><code>~/bin</code>Scripts intended for personal use.</li>
<li><code>/usr/local/bin</code>Script that everyone on a system is allowed to use.</li>
<li><code>/usr/local/sbin</code>Scripts intended for use by the system administrator</li>
<li><code>/usr/local</code>Locally supplied software, scripts and compiled programs</li>
</ul>
</li>
</ul>
<h1>Shell Script</h1>
<ul>
<li>
<p>Assigning Values to Variables and Constants.</p>
<pre><code class="language-bash">a=z # Assign the string &quot;z&quot; to variable a.
b=&quot;a string&quot; # Embedded spaces must be within quotes.
c=&quot;a string and $b&quot; # Other expansions such as variables can be expanded into the assignment.
d=&quot;$(ls -l foo.txt)&quot; # Results of a command.
e=$((5 * 7)) # Arithmetic expansion.
f=&quot;\t\ta string\n&quot; # Escape sequences such as tabs and newlines.
</code></pre>
</li>
<li>
<p>Using variables with other commands.</p>
<pre><code class="language-bash">filename=&quot;myFile&quot;
touch file
mv file ${filename}
</code></pre>
</li>
<li>
<p>Here script</p>
<pre><code class="language-bash">command &lt;&lt; token
text
token
</code></pre>
</li>
<li>
<p><code>_EOF_</code></p>
<ul>
<li>
<p>Example</p>
<pre><code class="language-bash"># !/bin/bash
date=$(date +&quot;%x %r %Z&quot;)

cat &lt;&lt; _EOF_
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Website&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Website&lt;/h1&gt;
        &lt;p&gt;Hello World&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
_EOF_
</code></pre>
</li>
<li>
<p><code>_EOF_</code> with command</p>
<pre><code class="language-bash">#!/bin/bash
# Script to retrieve a file via FTP
FTP_SERVER=ftp.nl.debian.org
FTP_PATH=/debian/dists/stretch/main/installer-amd64/current/images/
cdrom REMOTE_FILE=debian-cd_info.tar.gz
ftp -n &lt;&lt; _EOF_
open $FTP_SERVER
user anonymous me@linuxbox
cd $FTP_PATH
hash
get $REMOTE_FILE
bye
_EOF_
ls -l &quot;$REMOTE_FILE&quot;
</code></pre>
</li>
<li>
<p><code>_EOF_</code> with <code>-</code></p>
<pre><code class="language-bash"># !/bin/bash
date=$(date +&quot;%x %r %Z&quot;)

cat &lt;&lt;- _EOF_
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Website&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Website&lt;/h1&gt;
        &lt;p&gt;Hello World&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
_EOF_
</code></pre>
</li>
</ul>
</li>
<li>
<p>Shell Functions</p>
<pre><code class="language-bash"># !/bin/bash

z=human # Gobal variable

echo_1() {
echo &quot;hello&quot;
return
}

echo_2() {
i=world # local veariable
echo &quot;world&quot;
return
}

echo ${echo_1} ${echo_2} $z
</code></pre>
</li>
<li>
<p>Flow Control: Branching with if</p>
<ul>
<li>
<p><code>if</code></p>
<pre><code class="language-bash">x=5
if [ &quot;$x&quot; -eq 5 ]; then
echo &quot;x equals 5.&quot;
else
echo &quot;x does not equal 5.&quot;
fi
</code></pre>
</li>
<li>
<p><code>if</code> in shell</p>
<pre><code class="language-bash">if [ “$x” -eq 5 ]; then echo &quot;equals 5&quot;; else echo &quot;does not equal 5&quot;; fi
</code></pre>
</li>
<li>
<p><code>if</code>, <code>elif</code> and <code>else</code></p>
<pre><code class="language-bash">if commands; then
commands
[elif commands; then
commands...]
[else
commands]
fi
</code></pre>
</li>
</ul>
</li>
</ul>
<h2>Expressions Examples</h2>
<ul>
<li>
<p>File Expressions</p>
<pre><code class="language-bash">#!/bin/bash
# test-file: Evaluate the status of a file
FILE=~/.bashrc
if [ -e &quot;$FILE&quot; ]; then
if [ -f &quot;$FILE&quot; ]; then
echo &quot;$FILE is a regular file.&quot;
fi
if [ -d &quot;$FILE&quot; ]; then
echo &quot;$FILE is a directory.&quot;
fi
if [ -r &quot;$FILE&quot; ]; then
echo &quot;$FILE is readable.&quot;
fi
if [ -w &quot;$FILE&quot; ]; then
echo &quot;$FILE is writable.&quot;
fi
if [ -x &quot;$FILE&quot; ]; then
echo &quot;$FILE is executable/searchable.&quot;
fi
else
echo &quot;$FILE does not exist&quot;
exit 1
fi
exit
</code></pre>
</li>
<li>
<p>String Expressions</p>
<pre><code class="language-bash">#!/bin/bash
# test-string: evaluate the value of a string
ANSWER=maybe
if [ -z &quot;$ANSWER&quot; ]; then
echo &quot;There is no answer.&quot; &gt;&amp;2
exit 1
fi
if [ &quot;$ANSWER&quot; = &quot;yes&quot; ]; then
echo &quot;The answer is YES.&quot;
elif [ &quot;$ANSWER&quot; = &quot;no&quot; ]; then
echo &quot;The answer is NO.&quot;
elif [ &quot;$ANSWER&quot; = &quot;maybe&quot; ]; then
echo &quot;The answer is MAYBE.&quot;
else
echo &quot;The answer is UNKNOWN.&quot;
fi
</code></pre>
</li>
<li>
<p>Integer Expressions</p>
<pre><code class="language-bash">#!/bin/bash
# test-integer: evaluate the value of an integer.
INT=-5
if [ -z &quot;$INT&quot; ]; then
echo &quot;INT is empty.&quot; &gt;&amp;2
exit 1
fi
if [ &quot;$INT&quot; -eq 0 ]; then
echo &quot;INT is zero.&quot;
else
if [ &quot;$INT&quot; -lt 0 ]; then
echo &quot;INT is negative.&quot;
else
echo &quot;INT is positive.&quot;
fi
if [ $((INT % 2)) -eq 0 ]; then
echo &quot;INT is even.&quot;
else
echo &quot;INT is odd.&quot;
fi
fi
</code></pre>
</li>
<li>
<p>File Expressions</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Is True If:</th>
</tr>
</thead>
<tbody>
<tr>
<td>file1 -ef file2</td>
<td>file1 and file2 have the same inode numbers (the two filenames refer to the same file by hard linking).</td>
</tr>
<tr>
<td>file1 -nt file2</td>
<td>file1 is newer than file2.</td>
</tr>
<tr>
<td>file1 -ot file2</td>
<td>file1 is older than file2.</td>
</tr>
<tr>
<td>-b file</td>
<td>file exists and is a block-special (device) file.</td>
</tr>
<tr>
<td>-c file</td>
<td>file exists and is a character-special (device) file.</td>
</tr>
<tr>
<td>-d file</td>
<td>file exists and is a directory.</td>
</tr>
<tr>
<td>-e file</td>
<td>file exists.</td>
</tr>
<tr>
<td>-f file</td>
<td>file exists and is a regular file.</td>
</tr>
<tr>
<td>-g file</td>
<td>file exists and is set-group-ID.</td>
</tr>
<tr>
<td>-G file</td>
<td>file exists and is owned by the effective group ID.</td>
</tr>
<tr>
<td>-k file</td>
<td>file exists and has its “sticky bit” set.</td>
</tr>
<tr>
<td>-L file</td>
<td>file exists and is a symbolic link.</td>
</tr>
<tr>
<td>-O file</td>
<td>file exists and is owned by the effective user ID.</td>
</tr>
<tr>
<td>-p file</td>
<td>file exists and is a named pipe.</td>
</tr>
<tr>
<td>-r file</td>
<td>file exists and is readable (has readable permission for the effective user).</td>
</tr>
<tr>
<td>-s file</td>
<td>file exists and has a length greater than zero.</td>
</tr>
<tr>
<td>-S file</td>
<td>file exists and is a network socket.</td>
</tr>
<tr>
<td>-t fd</td>
<td>fd is a file descriptor directed to/from the terminal. This can be used to determine whether standard input/output/error is being redirected.</td>
</tr>
<tr>
<td>-u file</td>
<td>file exists and is setuid.</td>
</tr>
<tr>
<td>-w file</td>
<td>file exists and is writable (has write permission for the effective user).</td>
</tr>
<tr>
<td>-x file</td>
<td>file exists and is executable (has execute/search permission for the effective user).</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>String Expressions</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Is True If…</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td>string is not null.</td>
</tr>
<tr>
<td>-n string</td>
<td>The length of string is greater than zero.</td>
</tr>
<tr>
<td>-z string</td>
<td>The length of string is zero.</td>
</tr>
<tr>
<td><code>string1 = string2</code> <code>string1 == string2</code></td>
<td>string1 and string2 are equal. Single or double equal signs may be used. The use of double equal signs is supported by bash and is generally preferred, but it is not POSIX compliant.</td>
</tr>
<tr>
<td>string1 != string2</td>
<td>string1 and string2 are not equal.</td>
</tr>
<tr>
<td>string1 &gt; string2</td>
<td>string1 sorts after string2.</td>
</tr>
<tr>
<td>string1 &lt; string2</td>
<td>string1 sorts before string2.</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>Integer Expressions</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Is True If…</th>
</tr>
</thead>
<tbody>
<tr>
<td>integer1 -eq integer2</td>
<td>integer1 is equal to integer2.</td>
</tr>
<tr>
<td>integer1 -ne integer2</td>
<td>integer1 is not equal to integer2.</td>
</tr>
<tr>
<td>integer1 -le integer2</td>
<td>integer1 is less than or equal to integer2.</td>
</tr>
<tr>
<td>integer1 is less than or equal to integer2.</td>
<td>integer1 is less than integer2.</td>
</tr>
<tr>
<td>integer1 -ge integer2</td>
<td>integer1 is greater than or equal to integer2.</td>
</tr>
<tr>
<td>integer1 -gt integer2</td>
<td>integer1 is greater than integer2.</td>
</tr>
</tbody>
</table>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Java</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/java.html" />
    <updated>2022-12-26T21:04:39.182Z</updated>
    <id>/notes/programming/languages/java.html</id>
    <content type="html"><![CDATA[<h1>Java</h1>
<h2>1) Write a program to check number is even or odd using if else.</h2>
<pre><code class="language-java">import java.util.Scanner;

/**
 * Java Program - Check if Number is Even or Odd
 */

public class Example {

    public static void main(String[] args) {
        //create a scanner to read bytes from console entered by user via keyboard
        Scanner scanner = new Scanner(System.in);

        System.out.print(&quot;Enter a number : &quot;);
        //read integer from user
        int a = scanner.nextInt();

        //check if the number is even or odd
        if(a%2==0) {
            System.out.println(&quot;The number is even.&quot;);
        } else {
            System.out.println(&quot;The number is odd.&quot;);
        }

        //close the scanner
        scanner.close();
    }
}
</code></pre>
<p>O/P</p>
<pre><code>Enter a number : 4
The number is even.
</code></pre>
<h2>2) Write a program to check switch case statement using character datatype.</h2>
<pre><code class="language-java">public class SwitchExample {
public static void main(String[] args) {
    //Declaring a variable for switch expression
    String name=&quot;a&quot;;
    //Switch expression
    switch(name){
    //Case statements
    case &quot;a&quot;: System.out.println(&quot;Aman is in Database.&quot;);
    break;
    case &quot;r&quot;: System.out.println(&quot;Ravi is in Database.&quot;);
    break;
    case &quot;g&quot;: System.out.println(&quot;Gita is in Database.&quot;);
    break;
    //Default case statement
    default:System.out.println(&quot;Name is not in database.&quot;);
    }
}
}
</code></pre>
<pre><code>Aman is in Database.
</code></pre>
<h2>3) Develop a program to print command line argument using for loop.</h2>
<pre><code class="language-java">class CommandLineExample{
    public static void main(String args[]){
        System.out.println(&quot;Your first argument is: &quot;+args[0]);
        for (int i; i &lt;= 5; i++) {
            System.out.println(arg[0]);
        }
    }
}
</code></pre>
<p>O/P</p>
<pre><code>&gt; java CommandLineExample Hello
Your first argument is: Hello
Hello
Hello
Hello
Hello
Hello
Hello
</code></pre>
<h2>4) Develop a program to show the use of implicit typecasting.</h2>
<pre><code class="language-java">public class ImplicitTypecastingExample {
   public static void main(String args[]) {
      byte p = 12;
      System.out.println(&quot;byte value : &quot;+p);
      // Implicit Typecasting
      short q = p;
      System.out.println(&quot;short value : &quot;+q);
      int r = q;
      System.out.println(&quot;int value : &quot;+r);
      long s = r;
      System.out.println(&quot;long value : &quot;+s);
      float t = s;
      System.out.println(&quot;float value : &quot;+t);
      double u = t;
      System.out.println(&quot;double value : &quot;+u);
   }
}
</code></pre>
<pre><code>byte value : 12
short value : 12
int value : 12
long value : 12
float value : 12.0
double value : 12.0
</code></pre>
<h2>5) Write a program to implement different types of constructors to perform addition of complex numbers.</h2>
<pre><code class="language-java">public class ComplexNumber{
   //for real and imaginary parts of complex numbers
   double real, img;

   //constructor to initialize the complex number
   ComplexNumber(double r, double i){
	this.real = r;
	this.img = i;
   }

   public static ComplexNumber sum(ComplexNumber c1, ComplexNumber c2)
   {
	//creating a temporary complex number to hold the sum of two numbers
        ComplexNumber temp = new ComplexNumber(0, 0);

        temp.real = c1.real + c2.real;
        temp.img = c1.img + c2.img;

        //returning the output complex number
        return temp;
    }
    public static void main(String args[]) {
	ComplexNumber c1 = new ComplexNumber(5.5, 4);
	ComplexNumber c2 = new ComplexNumber(1.2, 3.5);
        ComplexNumber temp = sum(c1, c2);
        System.out.printf(&quot;Sum is: &quot;+ temp.real+&quot; + &quot;+ temp.img +&quot;i&quot;);
    }
}
</code></pre>
<p>O/P</p>
<pre><code>Sum is: 6.7 + 7.5i
</code></pre>
<h2>6) Write a program to show the use of all methods of String class.</h2>
<pre><code class="language-java">public class StringMethodsDemo {
	public static void main(String[] args) {
		String targetString = &quot;Java is fun to learn&quot;;
		String s1= &quot;JAVA&quot;;
		String s2= &quot;Java&quot;;
		String s3 = &quot;  Hello Java  &quot;;

		System.out.println(&quot;Char at index 2(third position): &quot; + targetString.charAt(2));
		System.out.println(&quot;After Concat: &quot;+ targetString.concat(&quot;-Enjoy-&quot;));
		System.out.println(&quot;Checking equals ignoring case: &quot; +s2.equalsIgnoreCase(s1));
		System.out.println(&quot;Checking equals with case: &quot; +s2.equals(s1));
		System.out.println(&quot;Checking Length: &quot;+ targetString.length());
		System.out.println(&quot;Replace function: &quot;+ targetString.replace(&quot;fun&quot;, &quot;easy&quot;));
		System.out.println(&quot;SubString of targetString: &quot;+ targetString.substring(8));
		System.out.println(&quot;SubString of targetString: &quot;+ targetString.substring(8, 12));
		System.out.println(&quot;Converting to lower case: &quot;+ targetString.toLowerCase());
		System.out.println(&quot;Converting to upper case: &quot;+ targetString.toUpperCase());
		System.out.println(&quot;Triming string: &quot; + s3.trim());
		System.out.println(&quot;searching s1 in targetString: &quot; + targetString.contains(s1));
		System.out.println(&quot;searching s2 in targetString: &quot; + targetString.contains(s2));

		char [] charArray = s2.toCharArray();
		System.out.println(&quot;Size of char array: &quot; + charArray.length);
		System.out.println(&quot;Printing last element of array: &quot; + charArray[3]);

	}

}
</code></pre>
<p>O/P</p>
<pre><code>Char at index 2(third position): v
After Concat: Java is fun to learn-Enjoy-
Checking equals ignoring case: true
Checking equals with case: false
Checking Length: 20
Replace function: Java is easy to learn
SubString of targetString: fun to learn
SubString of targetString: fun
Converting to lower case: java is fun to learn
Converting to upper case: JAVA IS FUN TO LEARN
Triming string: Hello Java
searching s1 in targetString: false
searching s2 in targetString: true
Size of char array: 4
Printing last element of array: a
</code></pre>
<h2>7) Write a program to implement all methods of StringBuffer class.</h2>
<pre><code class="language-java">class StringBufferExample{
    public static void main(String args[]){
        StringBuffer sb=new StringBuffer(&quot;Hello&quot;);
        sb.append(&quot; Java&quot;);
        System.out.println(sb);
        sb.insert(1,&quot;Java&quot;);
        System.out.println(sb);
        sb.replace(1,3,&quot;Java&quot;);
        System.out.println(sb);
        sb.delete(1,3);
        System.out.println(sb);
        sb.reverse();
        System.out.println(sb);
        System.out.println(sb.capacity());
        sb.ensureCapacity(10);
        System.out.println(sb.capacity());
    }
}
</code></pre>
<p>O/P</p>
<pre><code>Hello Java
HJavaello Java
HJavavaello Java
Hvavaello Java
avaJ olleavavH
21
21
</code></pre>
<h2>8) Write a program to implement single inheritance.</h2>
<pre><code class="language-java">class Animal{
void eat(){System.out.println(&quot;eating...&quot;);}
}
class Dog extends Animal{
void bark(){System.out.println(&quot;barking...&quot;);}
}
class TestInheritance{
public static void main(String args[]){
Dog d=new Dog();
d.bark();
d.eat();
}}
</code></pre>
<p>O/P</p>
<pre><code>barking...
eating...
</code></pre>
<h2>9) Write a program to implement multilevel inheritance.</h2>
<pre><code class="language-java">class Animal{
void eat(){System.out.println(&quot;eating...&quot;);}
}
class Dog extends Animal{
void bark(){System.out.println(&quot;barking...&quot;);}
}
class BabyDog extends Dog{
void weep(){System.out.println(&quot;weeping...&quot;);}
}
class TestInheritance2{
public static void main(String args[]){
BabyDog d=new BabyDog();
d.weep();
d.bark();
d.eat();
}}
</code></pre>
<p>O/P</p>
<pre><code>weeping...
barking...
eating...
</code></pre>
<h2>10) Develop a program to find area of rectangle and circle using interface.</h2>
<pre><code class="language-java">class FindLargestShape {
  public static void main(String arg[]) {
    Rectangle r = new Rectangle(10, 4);
    System.out.println(&quot;Rectangle Area : &quot; + r.getArea());
    System.out.println();
  }
}

class Rectangle {
  double length;
  double breadth;
  Rectangle(double length, double breadth) {
    this.length = length;
    this.breadth = breadth;
  }
  double getArea() {
    return length * breadth;
  }

}
</code></pre>
<h2>11) Write a program to implement user defined packages in terms of creating a new package and importing the same.</h2>
<pre><code class="language-java">package example;

public class gfg {

    public void show()
    {
        System.out.println(&quot;Hello geeks!! How are you?&quot;);
    }

    public static void main(String args[])
    {
        gfg obj = new gfg();
        obj.show();
    }
}
</code></pre>
<pre><code class="language-java">import example.gfg;

public class GFG {
    public static void main(String args[])
    {
        gfg obj = new gfg();
        System.out.println(obj.show());
    }
}
</code></pre>
<p>O/P</p>
<pre><code>Hello geeks!! How are you?
</code></pre>
<h2>12) Write a program to implement two thread use sleep method.</h2>
<pre><code class="language-java">class TestSleepMethod1 extends Thread{
 public void run(){
  for(int i=1;i&lt;5;i++){
  // the thread will sleep for the 500 milli seconds
    try{Thread.sleep(500);}catch(InterruptedException e){System.out.println(e);}
    System.out.println(i);
  }
 }
 public static void main(String args[]){
  TestSleepMethod1 t1=new TestSleepMethod1();
  TestSleepMethod1 t2=new TestSleepMethod1();

  t1.start();
  t2.start();
 }
}
</code></pre>
<pre><code>11
2
2
3
3
4
4
</code></pre>
<h2>13) Develop a program to accept a password from the user and throw “Authentication Failure” exception if the password is incorrect.</h2>
<pre><code class="language-java">import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class AuthenticationException extends Exception {

 public AuthenticationException(String message) {

  super(message);
 }
}

public class AuthenticationExcDemo {

 public static void main(String[] args) {

  InputStreamReader isr = new InputStreamReader(System.in);
  BufferedReader br = new BufferedReader(isr);
  String pwd;

  try {

   System.out.print(&quot;Enter password :: &quot;);
   pwd = br.readLine();

   if(!pwd.equals(&quot;123&quot;))
    throw new AuthenticationException(&quot;Incorrect password\nType correct password&quot;);
   else
    System.out.println(&quot;Welcome User !!!&quot;);

  }
  catch (IOException e) {
   e.printStackTrace();
  }
  catch (AuthenticationException a) {
   a.printStackTrace();
  }
  System.out.println(&quot;BYE BYE&quot;);
 }

}
</code></pre>
<h2>14) Develop a program to draw a polygon using applet.</h2>
<pre><code class="language-java">import java.awt.*;
import javax.swing.*;

public class poly extends JApplet {

    // called when applet is started
    public void init()
    {
        // set the size of applet to 300, 300
        setSize(200, 200);
        show();
    }

    // invoked when applet is started
    public void start()
    {
    }

    // invoked when applet is closed
    public void stop()
    {
    }

    public void paint(Graphics g)
    {
        // x coordinates of vertices
        int x[] = { 10, 30, 40, 50, 110, 140 };

        // y coordinates of vertices
        int y[] = { 140, 110, 50, 40, 30, 10 };

        // number of vertices
        int numberofpoints = 6;

        // set the color of line drawn to blue
        g.setColor(Color.blue);

        // draw the polygon using drawPolygon function
        g.drawPolygon(x, y, numberofpoints);
    }
}
</code></pre>
<h2>15) Develop an applet for drawing a human face.</h2>
<pre><code class="language-java">import java.applet.*;
import java.awt.*;
public class Human_Face extends Applet
{
    //Initialize the applet
    public void init()
    {
	setBackground(Color.white);
    }
    //Draw the human face
    public void paint(Graphics g)
    {
        //Change color to cream
        Color clr=new Color(255,179,86);
        g.setColor(clr);
        //Draw and fill the face
        g.drawOval(100,100,250,300);
        g.fillOval(100,100,250,300);
        //Change color to black
        g.setColor(Color.black);
        //Draw the left eye
        g.drawOval(160,185,40,25);
        g.fillOval(160,185,40,25);
        //Draw the right eye
        g.drawOval(250,185,40,25);
        g.fillOval(250,185,40,25);
        //Draw the Left Eyebrow
        g.drawArc(160,170,35,10,0,180);
        //Draw the Right Eyebrow
        g.drawArc(250,170,35,10,0,180);
        //Draw the Nose
        g.drawLine(210,265,210,275);
        g.drawLine(240,265,240,275);
        g.drawArc(210,275,30,10,0,-180);
       //Draw the smile
        g.drawArc(175,300,100,50,0,-180);
    }
}
</code></pre>
<h2>16) Develop a program to draw square inside a circle using applet.</h2>
<pre><code class="language-java">import java.applet.&quot;;
import java.awt.*;
/* &lt;applet code=shapes width=10 height=10&gt; &lt;/applet&gt;*/
public class shapes extends Applet {
    public void paint(Graphics g) {
    g.drawString(&quot;Square inside a circle&quot;, 150,110);
    g.drawOval(180,10,80,80);
    g.drawRect(192,22,55,55):
    g.drawString(&quot;Circle inside a square&quot;, 290, 110);
    g.drawRect(290, 10, 80, 80);
    g.drawOval(290, 10, 80, 80);
    }
}
</code></pre>
<h2>17) Develop a program to copy characters from one file to another.</h2>
<pre><code class="language-java">import java.io.*;
import java.util.*;
class Copyfile {
 public static void main(String arg[]) throws Exception {
  Scanner sc = new Scanner(System.in);
  System.out.print(&quot;Provide source file name :&quot;);
  String sfile = sc.next();
  System.out.print(&quot;Provide destination file name :&quot;);
  String dfile = sc.next();
  FileReader fin = new FileReader(sfile);
  FileWriter fout = new FileWriter(dfile, true);
  int c;
  while ((c = fin.read()) != -1) {
   fout.write(c);
  }
  System.out.println(&quot;Copy finish...&quot;);
  fin.close();
  fout.close();
 }
}
</code></pre>]]></content>
  </entry>
  <entry>
    <title>NodeJS</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/javascript/nodejs.html" />
    <updated>2022-12-26T21:04:39.182Z</updated>
    <id>/notes/programming/languages/javascript/nodejs.html</id>
    <content type="html"><![CDATA[<h1>NodeJS</h1>
<p>From <a href="https://trainings.internshala.com/nodejs-training">Internshala Training NodeJS Course</a></p>
<h1>Require</h1>
<ul>
<li>
<p>Import node module</p>
<pre><code class="language-jsx">const { readFs } = require(&quot;fs&quot;);
const { readHttps } = require(&quot;https&quot;);
</code></pre>
</li>
<li>
<p>Input the string in <code>console.log</code>.</p>
<pre><code class="language-jsx">st readLine = require(&quot;readline&quot;).createInterface({
  output: process.stdout,
  input: process.stdin,
});

readLine.question(&quot;What is your name?\n&quot;, (name) =&gt; {
  console.log(`Welcome ${name}`);
  readLine.close();
});

// What is your name?
// Jimmin &lt;= Ask to input here
// Welcome Jimmin
</code></pre>
</li>
</ul>
<h1>Module</h1>
<ul>
<li>
<p>Process</p>
<p>The <code>process</code> object in Node.js is a global object that can be accessed inside any module without requiring it.</p>
<ul>
<li>
<p><code>process.on</code></p>
<pre><code class="language-jsx">process.on('beforeExit', (code) =&gt; {
console.log('Process beforeExit event with code: ', code);
});
// Process beforeExit event with code:  0                                                                                             /0.3s
</code></pre>
</li>
<li>
<p>Process expressions</p>
<pre><code class="language-jsx">console.log(process.ppid);
// 21321
console.log(process.argv);
// [
//  '/snap/node/5148/bin/node',
//  '/home/kurama/Documents/Projects/Node JS/app.js'
//]
console.log(`Reports are compact? ${process.report.compact}`);
// Reports are compact? false                                                                                                         /0.3s
</code></pre>
</li>
</ul>
</li>
<li>
<p>Module</p>
<p>The <code>module</code> is same as process but you can only access within the file information.</p>
</li>
<li>
<p>Event</p>
<ul>
<li>
<p>EventEmitter</p>
<pre><code class="language-jsx">const events = require(&quot;events&quot;);
const eEmitter = new events.EventEmitter();

const getParty = function () {
  console.log(&quot;Time to party&quot;);
  const ran = Math.ceil(Math.random() * 10);
  console.log(`Party starts in ${ran}`);
  tester(ran);
};

eEmitter.on(&quot;music&quot;, getParty);

tester(2);

function tester(val) {
  setTimeout((e) =&gt; {
    eEmitter.emit(&quot;music&quot;);
  }, val * 1000);
}

// Time to party
// Party starts in 5
// Time to party
// Party starts in 8
// Time to party
// Party starts in 3
// Time to party
// Party starts in 9
</code></pre>
</li>
</ul>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Browser</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/javascript/browser.html" />
    <updated>2022-12-26T21:04:39.182Z</updated>
    <id>/notes/programming/languages/javascript/browser.html</id>
    <content type="html"><![CDATA[<h1>Browser: Document, Events, Interfaces</h1>
<h1>Document</h1>
<h2>document.documentElement</h2>
<h2>document.body</h2>
<ul>
<li>
<p>You can only but document.body in <body> tag.</p>
<pre><code class="language-html">&lt;html&gt;

&lt;head&gt;
  &lt;script&gt;
    alert( &quot;From HEAD: &quot; + document.body ); // null, there's no &lt;body&gt; yet
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;script&gt;
    alert( &quot;From BODY: &quot; + document.body ); // HTMLBodyElement, now it exists
  &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>document.body.style</code></p>
<pre><code class="language-jsx">// change the background color to red
document.body.style.background = &quot;red&quot;;

// change it back after 1 second
setTimeout(() =&gt; document.body.style.background = &quot;&quot;, 1000);
</code></pre>
</li>
</ul>
<h2>document.head</h2>
<h2>Searching:</h2>
<ul>
<li>
<p>Live collections of <strong>getElementsBy</strong>* &amp; <strong>querySelector</strong>*</p>
<ul>
<li>All methods “getElementsBy*” return a live collection. Such collections always reflect the current state of the document and “auto-update” when it changes.</li>
</ul>
<pre><code class="language-html">&lt;div&gt;First div&lt;/div&gt;

&lt;script&gt;
  let divs = document.getElementsByTagName('div');
  alert(divs.length); // 1
&lt;/script&gt;

&lt;div&gt;Second div&lt;/div&gt;

&lt;script&gt;
  alert(divs.length); // 2
&lt;/script&gt;
</code></pre>
<ul>
<li>In contrast, querySelectorAll returns a static collection. It’s like a fixed array of elements.</li>
</ul>
<pre><code class="language-html">&lt;div&gt;First div&lt;/div&gt;

&lt;script&gt;
  let divs = document.querySelectorAll('div');
  alert(divs.length); // 1
&lt;/script&gt;

&lt;div&gt;Second div&lt;/div&gt;

&lt;script&gt;
  alert(divs.length); // 1
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>There are 6 main methods to search for nodes in DOM:</p>
<p><a href="/notes/Browser%20Document,%20Events,%20Interfaces%205b1ea1234a324530a62e17f0aecee387/Methods%20to%20Search%20bae8734b53c44a51833cba491564ef97.csv">Methods to Search</a></p>
</li>
<li>
<p>❓ Search for elements</p>
<pre><code class="language-jsx">// 1. The table with `id=&quot;age-table&quot;`.
let table = document.getElementById('age-table')

// 2. All label elements inside that table
table.getElementsByTagName('label')
// or
document.querySelectorAll('#age-table label')

// 3. The first td in that table (with the word &quot;Age&quot;)
table.rows[0].cells[0]
// or
table.getElementsByTagName('td')[0]
// or
table.querySelector('td')

// 4. The form with the name &quot;search&quot;
// assuming there's only one element with name=&quot;search&quot; in the document
let form = document.getElementsByName('search')[0]
// or, form specifically
document.querySelector('form[name=&quot;search&quot;]')

// 5. The first input in that form.
form.getElementsByTagName('input')[0]
// or
form.querySelector('input')

// 6. The last input in that form
let inputs = form.querySelectorAll('input') // find all inputs
inputs[inputs.length-1] // take the last one
</code></pre>
</li>
</ul>
<h3>getElement*</h3>
<ul>
<li>
<p>We can get id of the element using the method <code>document.getElementById(id)</code>.</p>
<pre><code class="language-html">&lt;div id=&quot;elem&quot;&gt;
	&lt;p&gt;Hello&lt;/p&gt;
	&lt;div id=&quot;elem-content&quot;&gt;World&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
document.getElementById(&quot;elem&quot;).style.background = &quot;green&quot;;
document.getElementById(&quot;elem-content&quot;).style.color = &quot;white&quot;;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>getElementsByTagName</code> method of Document interface returns an HTMLCollection of elements with the given tag name.</p>
<pre><code class="language-html">&lt;ul id=&quot;birds&quot;&gt;
  &lt;li&gt;Orange-winged parrot&lt;/li&gt;
  &lt;li class=&quot;endangered&quot;&gt;Philippine eagle&lt;/li&gt;
  &lt;li&gt;Great white pelican&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
console.log(document.getElementsByTagName(&quot;li&quot;).length);
// 3
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>getElementsByClassName</code>for finding element with class name.</p>
<pre><code class="language-html">&lt;form name=&quot;my-form&quot;&gt;
  &lt;div class=&quot;article&quot;&gt;Article&lt;/div&gt;
  &lt;div class=&quot;long article&quot;&gt;Long article&lt;/div&gt;
&lt;/form&gt;

&lt;script&gt;
	let form = document.getElementsByName('my-form')[0];

	let articles = form.getElementsByClassName('article').length;

	console.log(articles);
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h3>querySelector*</h3>
<ul>
<li>
<p><code>document.querySelectorAll(css)</code> returns all elements inside matching the given CSS selector.</p>
<pre><code class="language-html">&lt;ul&gt;
  &lt;li&gt;The&lt;/li&gt;
  &lt;li&gt;test&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;has&lt;/li&gt;
  &lt;li&gt;passed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hello World&lt;/p&gt;
&lt;script&gt;
  let elements = document.querySelectorAll('li:last-child, p');

  for (let elem of elements) {
    console.log(elem.innerHTML); // &quot;test&quot;, &quot;passed&quot;
  }
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The call to <code>document.querySelector(css)</code> returns the first element for the given CSS selector.</p>
<pre><code class="language-html">&lt;h1&gt;Contents&lt;/h1&gt;

&lt;div class=&quot;contents&quot;&gt;
  &lt;ul class=&quot;book&quot;&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;script&gt;
  let chapter = document.querySelector('.chapter'); // LI

  alert(chapter.closest('.book')); // UL
  alert(chapter.closest('.contents')); // DIV

  alert(chapter.closest('h1')); // null (because h1 is not an ancestor)
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Make external links orange</p>
<pre><code class="language-html">&lt;a name=&quot;list&quot;&gt;the list&lt;/a&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tutorial&quot;&gt;/tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;local/path&quot;&gt;local/path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;ftp://ftp.com/my.zip&quot;&gt;ftp://ftp.com/my.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org&quot;&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://internal.com/test&quot;&gt;http://internal.com/test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let link = document.querySelectorAll('a');
		for ( let links of link ) {
			if( String(links.getAttribute('href')).includes('http')) {
			  links.style.color = 'orange';
			};
		}
&lt;/script&gt;
</code></pre>
<pre><code class="language-html">&lt;a name=&quot;list&quot;&gt;the list&lt;/a&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tutorial&quot;&gt;/tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;local/path&quot;&gt;local/path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;ftp://ftp.com/my.zip&quot;&gt;ftp://ftp.com/my.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org&quot;&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://internal.com/test&quot;&gt;http://internal.com/test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let links = document.querySelectorAll('a');

	for (let link of links) {
	  let href = link.getAttribute('href');
	  if (!href) continue; // no attribute

	  if (!href.includes('://')) continue; // no protocol

	  if (href.startsWith('http://internal.com')) continue; // internal

	  link.style.color = 'orange';
	}
&lt;/script&gt;
</code></pre>
<pre><code class="language-html">&lt;a name=&quot;list&quot;&gt;the list&lt;/a&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tutorial&quot;&gt;/tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;local/path&quot;&gt;local/path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;ftp://ftp.com/my.zip&quot;&gt;ftp://ftp.com/my.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org&quot;&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://internal.com/test&quot;&gt;http://internal.com/test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let selector = 'a[href*=&quot;://&quot;]:not([href^=&quot;http://internal.com&quot;])';
	let links = document.querySelectorAll(selector);

	links.forEach(link =&gt; link.style.color = 'orange');
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h2>Table</h2>
<ul>
<li>
<p>The <table> element supports (in addition to the given above) these properties.</p>
<ul>
<li>
<p>An example of usage:</p>
<pre><code class="language-html">&lt;table id=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;one&lt;/td&gt;&lt;td&gt;two&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;three&lt;/td&gt;&lt;td&gt;four&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
  // get td with &quot;two&quot; (first row, second column)
  let td = table.rows[0].cells[1];
  td.style.backgroundColor = &quot;red&quot;; // highlight it
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>table.rows</code> – the collection of <tr> elements of the table.</p>
</li>
<li>
<p><code>table.caption/tHead/tFoot</code> – references to elements <caption>, <thead>, <tfoot>.</p>
</li>
<li>
<p><code>table.tBodies</code> – the collection of <tbody> elements.</p>
</li>
<li>
<p><code>tr.cells</code> – the collection of <td> and <th> cells inside the given <tr>.</p>
</li>
<li>
<p><code>tr.sectionRowIndex</code> – the position (index) of the given <tr> inside the enclosing <thead>/<tbody>/<tfoot>.</p>
</li>
<li>
<p><code>tr.rowIndex</code> – the number of the <tr> in the table as a whole (including all table rows).</p>
</li>
<li>
<p><code>td.cellIndex</code> – the number of the cell inside the enclosing <tr>.</p>
</li>
</ul>
</li>
<li>
<p>❓ Select all diagonal cells</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;style&gt;
    table {
      border-collapse: collapse;
    }

    td {
      border: 1px solid black;
      padding: 3px 5px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;1:1&lt;/td&gt;
      &lt;td&gt;2:1&lt;/td&gt;
      &lt;td&gt;3:1&lt;/td&gt;
      &lt;td&gt;4:1&lt;/td&gt;
      &lt;td&gt;5:1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:2&lt;/td&gt;
      &lt;td&gt;2:2&lt;/td&gt;
      &lt;td&gt;3:2&lt;/td&gt;
      &lt;td&gt;4:2&lt;/td&gt;
      &lt;td&gt;5:2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:3&lt;/td&gt;
      &lt;td&gt;2:3&lt;/td&gt;
      &lt;td&gt;3:3&lt;/td&gt;
      &lt;td&gt;4:3&lt;/td&gt;
      &lt;td&gt;5:3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:4&lt;/td&gt;
      &lt;td&gt;2:4&lt;/td&gt;
      &lt;td&gt;3:4&lt;/td&gt;
      &lt;td&gt;4:4&lt;/td&gt;
      &lt;td&gt;5:4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:5&lt;/td&gt;
      &lt;td&gt;2:5&lt;/td&gt;
      &lt;td&gt;3:5&lt;/td&gt;
      &lt;td&gt;4:5&lt;/td&gt;
      &lt;td&gt;5:5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  &lt;script&gt;
    let table = document.body.firstElementChild;
    for(let i = 0; i &lt; table.rows.length; i++) {
      table.rows[i].cells[i].style.background = 'red'
    }
    // your code
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
</ul>
<h2>Methods</h2>
<ul>
<li>
<p><code>Document.createElement()</code> Creates a new element with the given tag name.</p>
<pre><code class="language-html">&lt;style&gt;
.alert {
  padding: 15px;
  border: 1px solid #d6e9c6;
  border-radius: 4px;
  color: #3c763d;
  background-color: #dff0d8;
}
&lt;/style&gt;

&lt;script&gt;
  let div = document.createElement('div');
  div.className = &quot;alert&quot;;
  div.innerHTML = &quot;&lt;strong&gt;Hi there!&lt;/strong&gt; You've read an important message.&quot;;

  document.body.append(div);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Document.createTextNode()</code> Creates a new Text node. This method can be used to escape HTML characters.</p>
<pre><code class="language-jsx">function clicked(word) {
	let printWord = document.createTextNode(word);
	document.body.append(printWord);
}

let button = document.createElement('button');
button.setAttribute('onclick', 'clicked(&quot;Yes &quot;)');
button.innerHTML = 'Click Me!'
document.body.append(button)
</code></pre>
</li>
</ul>
<h1>DocumentFragment</h1>
<ul>
<li>
<p>The <code>DocumentFragment interface</code> represents a minimal document object that has no parent.</p>
<pre><code class="language-jsx">let ul = document.createElement(&quot;ul&quot;);
document.body.append(ul);

let fargment = new DocumentFragment();

function getListContent() {

	for ( let i = 1; i &lt;= 5; i++ ) {
		let li = document.createElement(&quot;li&quot;);
		li.append(i);
		fargment.append(li);
	}

	console.log(fargment);
	return fargment;
}

ul.append(getListContent());
</code></pre>
</li>
</ul>
<h1>Node</h1>
<ul>
<li>
<p>Child nodes (or children) – elements that are direct children. In other words, they are nested exactly in the given one. For instance, <head> and <body> are children of <html> element.</p>
<ul>
<li>
<p><code>childNodes</code> read-only property returns a live NodeList of child nodes of the given element where the first child node is assigned index 0.</p>
<pre><code class="language-html">&lt;html&gt;
&lt;body&gt;
  &lt;div&gt;Begin&lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;Information&lt;/li&gt;
  &lt;/ul&gt;

  &lt;div&gt;End&lt;/div&gt;

  &lt;script&gt;
    for (let i = 0; i &lt; document.body.childNodes.length; i++) {
      alert( document.body.childNodes[i] ); // Text, DIV, Text, UL, ..., SCRIPT
    }
  &lt;/script&gt;
  ...more stuff...
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>firstChild</code> read-only property returns the node’s first child in the tree, or null if the node has no children.</p>
<pre><code class="language-html">&lt;p id=&quot;para-01&quot;&gt;
  &lt;span&gt;First span&lt;/span&gt;
&lt;/p&gt;

&lt;script&gt;
  var p01 = document.getElementById('para-01');
  alert(p01.firstChild.nodeName);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>lastChild</code> read-only property returns the last child of the node.</p>
<pre><code class="language-html">var tr = document.getElementById(&quot;row1&quot;);
var corner_td = tr.lastChild;
</code></pre>
</li>
</ul>
</li>
<li>
<p>Siblings are nodes that are children of the same parent.</p>
<ul>
<li>
<p>The next sibling is in<code>nextSibling</code>.</p>
<pre><code class="language-jsx">alert( document.body.parentNode === document.documentElement ); // true
</code></pre>
</li>
<li>
<p>the previous one in<code>previousSibling</code>.</p>
<pre><code class="language-jsx">alert( document.head.nextSibling ); // HTMLBodyElement
</code></pre>
</li>
<li>
<p>The parent is available as <code>parentNode</code>.</p>
<pre><code class="language-jsx">alert( document.body.previousSibling ); // HTMLHeadElement
</code></pre>
</li>
</ul>
</li>
<li>
<p><code>nodeName</code> to show the element name.</p>
<pre><code class="language-jsx">&lt;p id=&quot;word&quot;&gt;Hello World&lt;/p&gt;
&lt;script&gt;
	let elem = document.getElementById('word');
	console.log(elem.nodeName); // P
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Node.textContent</code> Pure text.</p>
<pre><code class="language-jsx">&lt;div id=&quot;elem1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;elem2&quot;&gt;&lt;/div&gt;

&lt;script&gt;
  let name = prompt(&quot;What's your name?&quot;, &quot;&lt;b&gt;Winnie-the-Pooh!&lt;/b&gt;&quot;);

  elem1.innerHTML = name; // Winnie-the-Pooh!
  elem2.textContent = name; // &lt;b&gt;Winnie-the-Pooh!&lt;/b&gt;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓Count descendants</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;ul&gt;
    &lt;li&gt;Animals
      &lt;ul&gt;
        &lt;li&gt;Mammals
          &lt;ul&gt;
            &lt;li&gt;Cows&lt;/li&gt;
            &lt;li&gt;Donkeys&lt;/li&gt;
            &lt;li&gt;Dogs&lt;/li&gt;
            &lt;li&gt;Tigers&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Other
          &lt;ul&gt;
            &lt;li&gt;Snakes&lt;/li&gt;
            &lt;li&gt;Birds&lt;/li&gt;
            &lt;li&gt;Lizards&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Fishes
      &lt;ul&gt;
        &lt;li&gt;Aquarium
          &lt;ul&gt;
            &lt;li&gt;Guppy&lt;/li&gt;
            &lt;li&gt;Angelfish&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Sea
          &lt;ul&gt;
            &lt;li&gt;Sea trout&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
	&lt;script&gt;
		let lists = document.getElementsByTagName('li');
		for (let list of lists) {
			console.log(list.textContent);
		}
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>node.append(...nodes or strings)</code> – append nodes or strings at the end of node.</p>
<pre><code class="language-jsx">function clicked(word) {
	let printWord = document.createTextNode(word);
	document.body.append(printWord);
}

let button = document.createElement('button');
button.setAttribute('onclick', 'clicked(&quot; Yes&quot;)');
button.innerHTML = 'Click Me!'
document.body.append(button)
</code></pre>
</li>
<li>
<p><code>node.prepend(...nodes or strings)</code> – insert nodes or strings at the beginning of node.</p>
<pre><code class="language-jsx">function clicked(word) {
	let printWord = document.createTextNode(word);
	let button = document.querySelector('button');
	button.prepend(printWord);
}

let button = document.createElement('button');
button.setAttribute('onclick', 'clicked(&quot;----&gt;&quot;)');
button.innerHTML = 'Click Me!'
document.body.append(button)
</code></pre>
</li>
<li>
<p><code>node.before()</code> &amp; <code>node.after()</code>–- insert nodes or strings before &amp; after node.</p>
<pre><code class="language-html">&lt;ol id=&quot;ol&quot;&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
&lt;/ol&gt;

&lt;script&gt;
	ol.before(&quot;&lt;p&gt;&quot;);
	ol.after(&quot;&lt;/p&gt;&quot;);
	console.log(document.body.outerHTML);
	/*
	&amp;lt;p&amp;gt;&lt;ol id=&quot;ol&quot;&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
	&lt;/ol&gt;&amp;lt;/p&amp;gt;
  */
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>node.replaceWith(...nodes or strings)</code> –- replaces node with the given nodes or strings.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;ClickMe&lt;/button&gt;

&lt;p&gt;&lt;b&gt;Hello World&lt;/b&gt;&lt;/p&gt;

&lt;script&gt;
	let b = document.querySelector('b');
	function clicked() {
		b.replaceWith(&quot;Bye World&quot;);
	}
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>ParentNode</h1>
<ul>
<li>
<p>❓Show descendants in a tree.</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;ul&gt;
    &lt;li&gt;Animals
      &lt;ul&gt;
        &lt;li&gt;Mammals
          &lt;ul&gt;
            &lt;li&gt;Cows&lt;/li&gt;
            &lt;li&gt;Donkeys&lt;/li&gt;
            &lt;li&gt;Dogs&lt;/li&gt;
            &lt;li&gt;Tigers&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Other
          &lt;ul&gt;
            &lt;li&gt;Snakes&lt;/li&gt;
            &lt;li&gt;Birds&lt;/li&gt;
            &lt;li&gt;Lizards&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Fishes
      &lt;ul&gt;
        &lt;li&gt;Aquarium
          &lt;ul&gt;
            &lt;li&gt;Guppy&lt;/li&gt;
            &lt;li&gt;Angelfish&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Sea
          &lt;ul&gt;
            &lt;li&gt;Sea trout&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;script&gt;
		let li = document.getElementsByTagName('li');

		for ( let lis of li ) {
			let lisLength = lis.getElementsByTagName('li').length;

			if(!lisLength) continue;

			lis.firstChild.data += `[${lisLength}]`;
		}
	&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p>❓ Colored clock with setInterval</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;div id=&quot;clock&quot;&gt;
  &lt;span class=&quot;hour&quot;&gt;hh&lt;/span&gt;:&lt;span class=&quot;min&quot;&gt;mm&lt;/span&gt;:&lt;span class=&quot;sec&quot;&gt;ss&lt;/span&gt;
  &lt;/div&gt;

  &lt;input type=&quot;button&quot; onclick=&quot;clockStart()&quot; value=&quot;Start&quot;&gt;
  &lt;input type=&quot;button&quot; onclick=&quot;clockStop()&quot; value=&quot;Stop&quot;&gt;

	&lt;script&gt;
		function update() {
	  let clock = document.getElementById('clock');
	  let date = new Date();
	  let hours = date.getHours();
	  let minutes = date.getMinutes();
	  let seconds = date.getSeconds();

	  clock.children[0].innerHTML = hours;
	  clock.children[1].innerHTML = minutes;
	  clock.children[2].innerHTML = seconds;
	}

	let timerId;

	function clockStart() { // run the clock
	  if (!timerId) { // only set a new interval if the clock is not running
	    timerId = setInterval(update, 1000);
	  }
	  update(); // (*)
	}

	function clockStop() {
	  clearInterval(timerId);
	  timerId = null; // (**)
	}
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p>Element-only navigation:- Navigation properties listed above refer to all nodes.</p>
<ul>
<li>
<p><code>children</code> – only those children that are element nodes.</p>
<pre><code class="language-html">&lt;html&gt;
&lt;body&gt;
  &lt;div&gt;Begin&lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;Information&lt;/li&gt;
  &lt;/ul&gt;

  &lt;div&gt;End&lt;/div&gt;

  &lt;script&gt;
    for (let elem of document.body.children) {
      alert(elem); // DIV, UL, DIV, SCRIPT
    }
  &lt;/script&gt;
  ...
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>firstElementChild</code>, <code>lastElementChild</code> – first and last element children.</p>
<pre><code class="language-jsx">alert( document.documentElement.parentNode ); // document
</code></pre>
</li>
<li>
<p><code>previousElementSibling</code>, <code>nextElementSibling</code> – neighbor elements.</p>
<pre><code class="language-html">&lt;div id=&quot;div-01&quot;&gt;Here is div-01&lt;/div&gt;
&lt;div id=&quot;div-02&quot;&gt;Here is div-02&lt;/div&gt;
&lt;li&gt;This is a list item&lt;/li&gt;
&lt;li&gt;This is another list item&lt;/li&gt;
&lt;div id=&quot;div-03&quot;&gt;Here is div-03&lt;/div&gt;

&lt;script&gt;
  let el = document.getElementById('div-03').previousElementSibling;
  document.write('&lt;p&gt;Siblings of div-03&lt;/p&gt;&lt;ol&gt;');
  while (el) {
    document.write('&lt;li&gt;' + el.nodeName + '&lt;/li&gt;');
    el = el.previousElementSibling;
  }
  document.write('&lt;/ol&gt;');
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>parentElement</code> – parent element.</p>
<pre><code class="language-jsx">console.log(document.head.parentElement);
/*
&lt;html lang=&quot;en&quot; class=&quot;working-hover&quot;&gt;
&lt;head&gt;…&lt;/head&gt;
&lt;body class&gt;…&lt;/body&gt;
&lt;/html&gt;
*/
</code></pre>
</li>
</ul>
</li>
</ul>
<h2>ChildNode</h2>
<ul>
<li>
<p><code>ChildNode.remove()</code> method removes the object from the tree it belongs to.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;Destroy !!!&lt;/button&gt;

&lt;p&gt;Hello World&lt;/p&gt;

&lt;script&gt;
	let button = document.querySelector('button'),
	p = document.querySelector('p');

	button.style.background = &quot;red&quot;;
	button.style.color = &quot;white&quot;;

	function clicked() {
		p.remove();
	}
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Clear the element</p>
<pre><code class="language-html">&lt;ol id=&quot;elem&quot;&gt;
  &lt;li&gt;Hello&lt;/li&gt;
  &lt;li&gt;World&lt;/li&gt;
&lt;/ol&gt;

&lt;script&gt;
	function clear(ele) {
		while (ele.firstChild) {
			ele.childNodes[1].remove();
		}
	}

	clear(document.querySelector(&quot;ol&quot;));
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Add a closing button</p>
<p><a href="https://codepen.io/fillyagioro/pen/jOydryr">https://codepen.io/fillyagioro/pen/jOydryr</a></p>
</li>
<li>
<p>The most deeply nested element that caused the event is called a target element, accessible as <code>event.target</code>.</p>
<p><a href="https://codepen.io/fillyagioro/pen/eYgxzBR">https://codepen.io/fillyagioro/pen/eYgxzBR</a></p>
</li>
<li>
<p>Stopping bubbling</p>
<p><a href="https://codepen.io/fillyagioro/pen/eYgxzBR">https://codepen.io/fillyagioro/pen/eYgxzBR</a></p>
</li>
<li>
<p>❓ Hide messages with delegation</p>
<p><a href="https://codepen.io/fillyagioro/pen/vYgPbVe">https://codepen.io/fillyagioro/pen/vYgPbVe</a></p>
</li>
</ul>
<h1>Element</h1>
<ul>
<li>
<p>The <code>matches(css)</code> method checks to see if the Element would be selected by the provided selectorString.</p>
<pre><code class="language-html">&lt;ul id=&quot;birds&quot;&gt;
  &lt;li&gt;Orange-winged parrot&lt;/li&gt;
  &lt;li class=&quot;endangered&quot;&gt;Philippine eagle&lt;/li&gt;
  &lt;li&gt;Great white pelican&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let list = document.getElementsByTagName('li');
  for(let elem of list) {
    if(elem.matches('.endangered')) {
      console.log(elem.innerHTML);
    }
  }
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>closest()</code> method traverses the Element and its parents  until it finds a node that matches the provided selector string.</p>
<pre><code class="language-html">&lt;h1&gt;Contents&lt;/h1&gt;

&lt;div class=&quot;contents&quot;&gt;
  &lt;ul class=&quot;book&quot;&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;script&gt;
	let chapter = document.querySelector('.chapter');
	console.log(chapter.closest('.book').innerHTML);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Element.tagName</code> to show the element name.</p>
<pre><code class="language-jsx">&lt;p id=&quot;word&quot;&gt;Hello World&lt;/p&gt;
&lt;script&gt;
	let elem = document.getElementById('word');
	console.log(elem.tagName); // P
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>innerHTML</code> property allows to get the HTML inside the element as a string.</p>
<pre><code class="language-jsx">&lt;body&gt;
  &lt;p&gt;A paragraph&lt;/p&gt;
  &lt;div&gt;A div&lt;/div&gt;

  &lt;script&gt;
    alert( document.body.innerHTML ); // read the current contents
    document.body.innerHTML = 'The new BODY!'; // replace it
  &lt;/script&gt;

&lt;/body&gt;
</code></pre>
</li>
<li>
<p>The <code>outerHTML</code> property contains the full HTML of the element. That’s like innerHTML plus the element itself.</p>
<pre><code class="language-jsx">&lt;div id=&quot;elem&quot;&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;

&lt;script&gt;
  console.log(elem.outerHTML); // &lt;div id=&quot;elem&quot;&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;
	console.log(elem.innerHTML); // Hello &lt;b&gt;World&lt;/b&gt;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>getAttribute()</code> returns the elements attribute which is called.</p>
<pre><code class="language-html">&lt;div id=&quot;elem&quot; something-data=&quot;yes&quot;&gt;&lt;/div&gt;

&lt;script&gt;
	console.log(elem.getAttribute('something-data'));
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>setAttribute()</code> sets the attribute value.</p>
<pre><code class="language-html">&lt;input&gt;

&lt;script&gt;
	let input = document.querySelector('input');
	input.setAttribute('id', 'into')
	console.log(input.outerHTML);
	console.log(input.id)
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>Get attribute and there value with <code>attribute</code>.</p>
<pre><code class="language-html">&lt;input id=&quot;hello&quot; something=&quot;yes&quot;&gt;

&lt;script&gt;
	let link = document.querySelector('input');

	for ( let links of link.attributes ) {
		console.log(links.name + ' ' + links.value);
	}
	// id hello
	// something yes
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Element.insertAdjacent*</code></p>
<ul>
<li>
<p><code>Element.insertAdjacentHTML()</code> method inserts a text as HTML, into a specified position.</p>
<pre><code class="language-jsx">let ulist = document.createElement('ul');
document.body.append(ulist);

let list = document.createElement('li');

while(true) {
	let ans = String(prompt(&quot;What you wnat inside the list?&quot;));

	if (!ans) {
		break;
	}
	list.innerHTML = ans;
	ulist.insertAdjacentHTML(&quot;afterBegin&quot;, `&lt;li&gt;${ans}&lt;/li&gt;`);
}
</code></pre>
<pre><code class="language-jsx">let li = document.createElement(&quot;li&quot;);
let ul = document.querySelector(&quot;ul&quot;)
function getListContent() {
	for (let i = 5; i &gt;= 1; i--) {
	ul.insertAdjacentHTML(&quot;afterBegin&quot;, `&lt;li&gt;${i}&lt;/li&gt;`);
	}
}

getListContent();
</code></pre>
</li>
<li>
<p><code>Element.insertAdjacentText()</code> – the same syntax, but a string of text is inserted “as text” instead of HTML.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;ClickMe&lt;/button&gt;

&lt;p&gt;Hello World&lt;/p&gt;

&lt;script&gt;
	let p = document.querySelector('p');
	function clicked() {
		p.insertAdjacentText(&quot;beforeend&quot;, &quot;Bye World&quot;);
	}
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Element.insertAdjacentElement()</code> – the same syntax, but inserts an element.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;ClickMe&lt;/button&gt;

&lt;p&gt;&lt;b&gt;Hello World&lt;/b&gt;&lt;/p&gt;

&lt;script&gt;
	let p = document.querySelector('p');
	let i = document.createElement('i')
	function clicked() {
		p.insertAdjacentElement(&quot;afterEnd&quot;, i);
	}
	i.innerHTML = &quot;Bye World&quot;;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>&quot;beforebegin&quot;</code> – insert <code>html</code> immediately before <code>elem</code>,</p>
</li>
<li>
<p><code>&quot;afterbegin&quot;</code> – insert <code>html</code> into <code>elem</code>, at the beginning,</p>
</li>
<li>
<p><code>&quot;beforeend&quot;</code> – insert <code>html</code> into <code>elem</code>, at the end,</p>
</li>
<li>
<p><code>&quot;afterend&quot;</code> – insert <code>html</code> immediately after <code>elem</code>.</p>
</li>
</ul>
</li>
<li>
<p>❓ Insert the HTML in the list</p>
<pre><code class="language-html">&lt;ul id=&quot;ul&quot;&gt;
  &lt;li id=&quot;one&quot;&gt;1&lt;/li&gt;
  &lt;li id=&quot;two&quot;&gt;4&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	one.insertAdjacentHTML(&quot;afterend&quot;, &quot;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&quot;);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>className</code> property of the Element interface gets and sets the value of the class attribute of the specified element.</p>
<pre><code class="language-jsx">let div = document.createElement('div');
div.className = &quot;hello&quot;;
div.innerHTML = div.className;

document.body.append(div);
</code></pre>
</li>
<li>
<p>Window sizes</p>
<ul>
<li>
<p><code>clientWidth</code> / <code>clientHeight</code> Width/height of the window.</p>
<pre><code class="language-jsx">console.log(document.documentElement.clientWidth);
console.log(document.documentElement.clientHeight);
</code></pre>
</li>
<li>
<p><code>document.documentElement.scrollWidth/scrollHeight</code> Width/height of the document.</p>
</li>
</ul>
</li>
<li>
<p>If there are no paddings, then <code>clientWidth/Height</code> is exactly the content area, inside the borders and the scrollbar (if any).</p>
<pre><code class="language-jsx">let h1 = document.body.querySelector('h1');
h1.clientHeight;
</code></pre>
</li>
<li>
<p><code>Element.scrollIntoView()</code>scroll into the view of line.</p>
<pre><code class="language-jsx">let h1 = document.body.querySelector('h1');

h1.scrollIntoView()
</code></pre>
</li>
<li>
<p><code>Element.getBoundingClientRect()</code> returns information about left, top, right, bottom, x, y, width, and height.</p>
</li>
<li>
<p><code>onmouseover</code> change element when you hover over element &amp; <code>onmouseout</code> change element when hover out over element.</p>
<p><a href="https://codepen.io/fillyagioro/pen/RwKzzxg">https://codepen.io/fillyagioro/pen/RwKzzxg</a></p>
</li>
<li>
<p><code>onmousedown</code> change element when you click over element &amp; <code>onmouseup</code> change element when click done.</p>
<p><a href="https://codepen.io/fillyagioro/pen/JjEQgRJ">https://codepen.io/fillyagioro/pen/JjEQgRJ</a></p>
</li>
<li>
<p>❓ Catch links in the element</p>
<p><a href="https://codepen.io/fillyagioro/pen/PoWrMeg">https://codepen.io/fillyagioro/pen/PoWrMeg</a></p>
</li>
</ul>
<h1>Event</h1>
<ul>
<li>
<p>The <code>preventDefault()</code> method cancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur.</p>
<p><a href="https://codepen.io/fillyagioro/pen/GRrbVBe">https://codepen.io/fillyagioro/pen/GRrbVBe</a></p>
</li>
</ul>
<h1>EventTarget</h1>
<ul>
<li>
<p>The <code>addEventListener()</code> method attaches an event handler to the specified element.</p>
<pre><code class="language-html">&lt;table id=&quot;outside&quot;&gt;
  &lt;tr&gt;&lt;td id=&quot;t1&quot;&gt;one&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td id=&quot;t2&quot;&gt;two&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;script&gt;
	let elem = document.querySelector('table');

	function change() {
		let td = document.getElementsByTagName('td');
		if (td[1].innerHTML == &quot;two&quot;) {
			td[1].innerHTML = &quot;three&quot;;
		} else {
			td[1].innerHTML = &quot;two&quot;
		}
	}

	elem.addEventListener('click', change, false)
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>Window</h1>
<ul>
<li>
<p>The method <code>scrollBy(x,y)</code> scrolls the page relative to its current position. For instance, scrollBy(0,10) scrolls the page 10px down.</p>
<pre><code class="language-jsx">window.scrollBy(0,10)
</code></pre>
</li>
<li>
<p><code>Window.scrollTo()</code> scrolls to a particular set of coordinates in the document.</p>
<pre><code class="language-jsx">window.scrollTo()
</code></pre>
</li>
</ul>
<h1>CSSStyleDeclaration.cssText</h1>
<ul>
<li>
<p>The <code>cssText</code> property of the CSSStyleDeclaration interface returns or sets the text of the element’s inline style declaration only.</p>
<pre><code class="language-jsx">let message = document.createElement('div');

message.style.cssText = &quot;background: red; color: white&quot;;

message.innerHTML = &quot;Hello, World&quot;;

document.body.append(message);
</code></pre>
</li>
</ul>
<h1>HTMLElement</h1>
<ul>
<li>
<p>Hide the element with <code>HTMLElement.hidden</code>.</p>
<pre><code class="language-jsx">&lt;div id=&quot;elem&quot;&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;
&lt;script&gt;
	let bold = elem.getElementsByTagName('b')[0];
	setInterval(() =&gt; bold.hidden = !bold.hidden, 500);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Hide on click</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;input type=&quot;button&quot; id=&quot;hider&quot; value=&quot;Click to hide the text&quot; /&gt;

  &lt;div id=&quot;text&quot;&gt;Text&lt;/div&gt;

  &lt;script&gt;
    hider.onclick = () =&gt; {
      let text = document.getElementById('text');
      text.hidden = true;
    }
  &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p>The style attribute is a string, but the style property is an object.</p>
<pre><code class="language-html">&lt;div id=&quot;div&quot; style=&quot;color:red;font-size:120%,al&quot;&gt;Hello&lt;/div&gt;

&lt;script&gt;
	console.log(div.style.color);
	// red
	div.style.background = &quot;green&quot;;

	console.log(div.style);
	// empty
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>HTMLElement.offsetWidth/Height</code> read-only property returns the layout width of an element as an integer.</p>
<pre><code class="language-jsx">h1 = document.body.querySelector('h1');
// h1.offsetHeight
</code></pre>
</li>
</ul>
<h1>HTMLInputElement</h1>
<ul>
<li>
<p>DOM elements also have additional properties, in particular those that depend on the class.</p>
<pre><code class="language-jsx">&lt;input type=&quot;text&quot; id=&quot;elem&quot; value=&quot;value&quot;&gt;

&lt;script&gt;
	let elem = document.getElementById('elem');
	console.log(elem.value);
	console.log(elem.type);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>Accessing the element: this</p>
<pre><code class="language-html">&lt;button onclick=&quot;alert(this.innerHTML)&quot;&gt;Click me&lt;/button&gt;
</code></pre>
</li>
</ul>
<h1>HTMLOrForeignElement</h1>
<ul>
<li>
<p>Non-standard attributes are used to pass custom data from HTML to JavaScript, or to “mark” HTML-elements for JavaScript.</p>
<pre><code class="language-html">&lt;!-- mark the div to show &quot;name&quot; here --&gt;
&lt;div show-info=&quot;name&quot;&gt;&lt;/div&gt;
&lt;!-- and age here --&gt;
&lt;div show-info=&quot;age&quot;&gt;&lt;/div&gt;

&lt;script&gt;
	let user = {
		name: &quot;Pete&quot;,
		age: 25
	};

	 for(let div of document.querySelectorAll('[show-info]')) {
	 	let text = div.getAttribute('show-info');
		div.innerHTML = user[text];
	}
&lt;/script&gt;

</code></pre>
</li>
<li>
<p>All attributes starting with “data-” are reserved for programmers’ use. They are available in the dataset property.</p>
<pre><code class="language-html">&lt;style&gt;
  .order[data-order-state=&quot;new&quot;] {
    color: green;
  }

  .order[data-order-state=&quot;pending&quot;] {
    color: blue;
  }

  .order[data-order-state=&quot;canceled&quot;] {
    color: red;
  }
&lt;/style&gt;

&lt;div id=&quot;order&quot; class=&quot;order&quot; data-order-state=&quot;new&quot;&gt;
  A new order.
&lt;/div&gt;

&lt;script&gt;
	order.dataset.orderState = 'padding';

	console.log(order.outerHTML);
	// &lt;div id=&quot;order&quot; class=&quot;order&quot; data-order-state=&quot;padding&quot;&gt;A new order.&lt;/div&gt;
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>GlobalEventHandlers.onclick</h1>
<ul>
<li>
<p>The <code>onclick</code> event occurs when the user clicks on an element.</p>
<pre><code class="language-html">&lt;button&gt;Click Me&lt;/button&gt;

&lt;script&gt;
  let button = document.querySelector('button');

  button.onclick = () =&gt; alert(&quot;Hello World&quot;)
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>Location</h1>
<ul>
<li><code>location</code> interface represents the location (URL) of the object it is linked to.
<ul>
<li>
<p><code>location.href</code> shows URL.</p>
<pre><code class="language-jsx">alert(location.href); // shows current URL
if (confirm(&quot;Go to Wikipedia?&quot;)) {
  location.href = &quot;https://wikipedia.org&quot;; // redirect the browser to another URL
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h1>Web Console Helpers</h1>
<ul>
<li><code>$0</code> The currently-inspected element in the page. <code>$0.style.background = 'red'</code></li>
</ul>]]></content>
  </entry>
  <entry>
    <title>React</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/javascript/react.html" />
    <updated>2022-12-26T21:04:39.182Z</updated>
    <id>/notes/programming/languages/javascript/react.html</id>
    <content type="html"><![CDATA[<h1>React</h1>
<ul>
<li>Function VS Class Component
<ul>
<li>A functional component is just a plain JavaScript function that accepts props as an argument and returns a React element.</li>
<li>A class component requires you to extend from React. Component and create a render function which returns a React element.</li>
</ul>
</li>
<li></li>
</ul>]]></content>
  </entry>
</feed>
