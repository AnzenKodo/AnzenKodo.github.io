<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AK#Notes</title>
  <subtitle>This my personal website where I post my notes about thing that I have learn.</subtitle>
  <link href="https://anzenkodo.github.io/notes/" />
  <link href="https://anzenkodo.github.io/notes/" rel="self" />
	<id>https://anzenkodo.github.io/notes/</id>
  <updated>2022-12-18T06:08:20.187Z</updated>
  <author>
    <name>Axel</name>
    <email>AnzenKodo@altmails.com</email>
  </author>
    <entry>
    <title>Home</title>
    <link href="https://anzenkodo.github.io/notes/" />
    <updated>2022-12-18T06:08:20.187Z</updated>
    <id>/notes/</id>
    <content type="html"><![CDATA[<p>This my personal website where I post my notes about thing that I have learn.</p>
<h2>Features</h2>
<ul>
<li>Easy to:
<ul>
<li>Setup</li>
<li>Configure</li>
<li>Write</li>
</ul>
</li>
<li>Supports:
<ul>
<li>Tags</li>
<li>Search (Power by <a href="https://duckduckgo.com/">DuckDuckGo</a>)</li>
<li>Canonical</li>
<li><a href="https://ogp.me/">Open Graph</a></li>
<li>Analytics</li>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
</ul>
</li>
<li>Auto generate:
<ul>
<li>GitHub Pages Actions file</li>
<li>Favicon</li>
<li>Sitemap</li>
<li>404 page</li>
<li>CSS</li>
<li><code>mainfest.json</code> file</li>
<li>Feeds
<ul>
<li>RSS</li>
<li>JSON</li>
<li>Atom</li>
</ul>
</li>
</ul>
</li>
<li>No Client side JavaScript</li>
<li>Minified HTML &amp; Inline CSS</li>
<li>Lightweight</li>
</ul>
<h2>Getting Started</h2>
<h3>Installing</h3>
<ul>
<li>Download deno from <a href="https://deno.land/">https://deno.land/</a> and install it.</li>
<li>After installing deno run following commands.</li>
</ul>
<pre><code class="language-sh"># Install the dblog
deno run https://deno.land/x/dblog/install.js # Add deno to path, if you didn't already.

# See all the options that are available
dblog --help

# Setup the your blog (Skip this if already your blog setup)
dblog --setup

# Make your blog and Run on localhost
dblog --serve
</code></pre>
<h3>Update</h3>
<p>To update dblog, rerun the installation command.</p>
<pre><code class="language-sh">deno run https://deno.land/x/dblog/install.js
</code></pre>
<h3>Run dblog without installing dblog</h3>
<pre><code class="language-sh">deno run -A https://deno.land/x/dblog/mod.js --help
</code></pre>
<h2>Live Demo &amp; Folder</h2>
<ul>
<li><a href="https://anzenkodo.github.io/dblog">Live Demo</a></li>
<li><a href="https://github.com/AnzenKodo/dblog/tree/gh-pages">Generated Files</a></li>
</ul>
<h2>Configuration</h2>
<p>Place <code>config.json</code> in root folder to edit default configuration. The
<code>config.json</code> is optional.</p>
<p><strong>The <code>config.json</code> with default configuration:</strong></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;dblog&quot;,
  &quot;start_url&quot;: &quot;https://AnzenKodo.github.io/dblog/&quot;,
  &quot;description&quot;: &quot;dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.&quot;,
  &quot;email&quot;: &quot;&quot;,
  &quot;author&quot;: &quot;AnzenKodo&quot;,
  &quot;posts&quot;: &quot;./posts&quot;,
  &quot;output&quot;: &quot;./site&quot;,
  &quot;favicon&quot;: &quot;favicon.svg&quot;,
  &quot;lang&quot;: &quot;en-US&quot;,
  &quot;port&quot;: 8000,
  &quot;background&quot;: &quot;#ffffff&quot;,
  &quot;foreground&quot;: &quot;#000000&quot;,
  &quot;theme&quot;: &quot;#01a252&quot;,
  &quot;footer&quot;: &quot;&lt;p&gt;Made by &lt;a href=\&quot;https://AnzenKodo.github.io/AnzenKodo\&quot;&gt;AnzenKodo&lt;/a&gt; under &lt;a href=\&quot;https://anzenkodo.github.io/dblog/LICENSE\&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;\n&quot;,
  &quot;page404&quot;: &quot;404 Page Not Found, Sorry :(&quot;,
  &quot;backup&quot;: false,
  &quot;exclude&quot;: [
    &quot;config.json&quot;,
    &quot;backup.json&quot;
  ],
  &quot;nav&quot;: {},
  &quot;head&quot;: &quot;&quot;
}
</code></pre>
<p><strong>Note:</strong> Every option is optional.</p>
<ul>
<li><strong>name</strong> - Name of your blog.</li>
<li><strong>start_url</strong> - Start URL of your site. <em>Example:</em> ‘<a href="https://example.com/">https://example.com/</a>’,
‘<a href="https://blog.example.com/">https://blog.example.com/</a>’, ‘<a href="https://example.com/blog/">https://example.com/blog/</a>’</li>
<li><strong>email</strong> - Your email address. This will enable ‘Reply with Email’ button in
posts.</li>
<li><strong>author</strong> - Your name or username.</li>
<li><strong>posts</strong> - Path of posts.</li>
<li><strong>output</strong> - Folder where your blog build will be placed. <em>Example:</em> ‘./blog’,
‘…/site/blog’, ‘site/blog’.</li>
<li><strong>favicon</strong> - <em><strong>Recommended 500x500px</strong></em>. Favicon location. <em>If empty,
generated favicon will be used</em>. <em>Example:</em> ‘./favicon.png’,
‘./static/favicon.icon’, ‘…/favicon.jpg’.</li>
<li><strong>lang</strong> - Blog language in ‘RFC 5646’ format. Example: ‘ja’ for Japanese,
‘sv’ for Swedish, ‘it’ for Italian. See
<a href="https://wikipedia.org/wiki/IETF_language_tag#List_of_common_primary_language_subtags">List of common primary language subtags in Wikipedia</a></li>
<li><strong>footer</strong> - Footer of your website. <em>Supports CommonMark Markdown format</em>.
<em>Example:</em>
<code>Made by [AnzenKodo](https://AnzenKodo.github.io/AnzenKodo) uder [MIT License](https://anzenkodo.github.io/dblog/LICENSE.html)</code>.</li>
<li><strong>port</strong> - Port of your blog on localhost. <em>Example</em>: ‘8080’, ‘8300’, ‘8400’.</li>
<li><strong>background</strong> - Background color in light mode. Becomes foreground color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>foreground</strong> - Foreground color in light mode. Becomes background color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>theme</strong> - Blog theme color. <em>Example:</em> ‘#0583f2’, ‘#f20544’, ‘#f2b705’.</li>
<li><strong>page404</strong> - 404 page message. <em>Example:</em> ‘Sorry, page not found :(’.</li>
<li><strong>backup</strong> - Backup file location. <em>Example:</em> <code>false</code> to don’t generate
<code>backup.json</code> file, ‘./backup.json’, ‘./site/backup.json’, ‘…/backup.json’.</li>
<li><strong>exclude</strong> - Exclude files or folder. <em>Example:</em><pre><code class="language-json">&quot;exclude&quot;: [ &quot;.env&quot;, &quot;todo.md&quot;, &quot;drafts&quot; ],
</code></pre>
</li>
<li><strong>nav</strong> - Nav bar item list. Example:<pre><code class="language-json">&quot;nav&quot;: {
  &quot;about&quot;: &quot;./about.md&quot;,
  &quot;stie&quot;: &quot;https://anzenkodo.github.io/AnzenKodo&quot;
}
</code></pre>
</li>
<li><strong>head</strong> - If you analytics or any other tags you want to put on head tag.
<em>Example:</em>
<code>&lt;link rel=&quot;preconnect&quot; href=&quot;//www.google-analytics.com&quot; crossorigin=&quot;&quot;&gt;</code>.</li>
</ul>
<h2>CLI Options</h2>
<pre><code class="language-sh">dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.

Website: https://anzenkodo.github.io/dblog
Package: https://deno.land/x/dblog
Repo: https://github.com/AnzenKodo/dblog
Docs: https://anzenkodo.github.io/dblog/posts/dblog-Docs.html

USAGE:
  dblog [OPTIONS]

OPTIONS:
  --serve   Build blog and Start localhost.
    --noopen  Don't open browser, when starting localhost.
  --build   Build blog without starting localhost.
  --setup   Setup new blog.
  --backup  Restore blog if 'backup.json' file available.
  --readme  Generate 'README.md' file.
  --help    Print help information.
</code></pre>
<h2>File Options</h2>
<pre><code>---
title: If empty the file name will be used
description: If empty the first paragraph will be used.
tags: [ &quot;tag1&quot;, &quot;tag2&quot; ]
date: 20/08/2020
canonical:
---
</code></pre>
<ul>
<li><strong>date</strong> - If empty, the file date will be used. <em>Note:</em> The file <code>date</code> might
not always right. So always give you own date.</li>
<li><strong>canonical</strong> - Share content between multiple sites without impacting SEO.
Just put canonical URL. Know more about
<a href="https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls">canonical url</a>.</li>
</ul>
<h3>If file name start with underscore “_” it will be consider as draft.</h3>
<p><strong>Example:</strong> <code>posts/_This is draft.md</code></p>
<h2>Markdown Guide</h2>
<h3><a href="https://commonmark.org/help/">CommonMark</a> Syntex</h3>
<h4>Heading</h4>
<pre><code class="language-md"># H1

## H2

### H3

#### H4

##### H5

###### H6
</code></pre>
<h1>H1</h1>
<h2>H2</h2>
<h3>H3</h3>
<h4>H4</h4>
<h5>H5</h5>
<h6>H6</h6>
<h4>Inline style</h4>
<pre><code class="language-md">**Bold** _Italic_ ~~Strikethrough~~
</code></pre>
<p><strong>Bold</strong> <em>Italic</em> <s>Strikethrough</s></p>
<h4>Link and Image</h4>
<pre><code class="language-md">[website](https://anzenkodo.github.io/dblog)
![Jurassic Deno by Samip Poudel](https://deno.land/images/artwork/jurassicDeno.jpg)
</code></pre>
<p><a href="https://anzenkodo.github.io/dblog">website</a>
<img src="https://deno.land/images/artwork/jurassicDeno.jpg" alt="Jurassic Deno by Samip Poudel"></p>
<h4>Blockquote</h4>
<pre><code class="language-md">&gt; 'The road to hell is paved with good intentions' by Abbot Bernard
</code></pre>
<blockquote>
<p>‘The road to hell is paved with good intentions’ by Abbot Bernard</p>
</blockquote>
<h4>List</h4>
<pre><code class="language-md">- List
  - List
- List

1. One
2. Two
3. Three
</code></pre>
<ul>
<li>List
<ul>
<li>List</li>
</ul>
</li>
<li>List</li>
</ul>
<ol>
<li>One</li>
<li>Two</li>
<li>Three</li>
</ol>
<h4>Horizontal rule</h4>
<pre><code class="language-md">---
</code></pre>
<hr>
<h4>Code block</h4>
<div class="highlight highlight-source-lisp notranslate position-relative overflow-auto">
<pre>
`Inline code` with backticks
```js
  console.log("Code Blog in JavaScript");
```
</pre>
</div>
<p><code>Inline code</code> with backticks</p>
<pre><code class="language-js">console.log(&quot;Code Blog in JavaScript&quot;);
</code></pre>
<h3>Additional Markdown syntax</h3>
<h4>Checkbox</h4>
<pre><code class="language-md">- [ ] Checkbox
- [x] Checkbox with tick
</code></pre>
<ul class="task-list">
<li class="task-list-item"><input type="checkbox" id="cbx_0" disabled="true"><label for="cbx_0"> Checkbox</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> Checkbox with tick</label></li>
</ul>
<h4>Image with caption</h4>
<pre><code class="language-md">![Deno](https://deno.land/images/artwork/deno_matrix.png &quot;Matrix by bramaudi&quot;)
</code></pre>
<figure data-type="image"><img src="https://deno.land/images/artwork/deno_matrix.png" alt="Deno" loading="lazy" decoding="async"><figcaption>Matrix by bramaudi</figcaption></figure>
<h4>Footer</h4>
<pre><code class="language-md">Here is a footnote reference[^1]. [^1]: Here is the footnote.
</code></pre>
<p>Here is a footnote reference[^1]. [^1]: Here is the footnote.</p>
<h4>Additional inline syntax</h4>
<pre><code class="language-md">~sub~ ^sup^ ==mark== [[kbd]] _underline_ ++insert++ ~~delete~~
</code></pre>
<p><sub>sub</sub>
<sup>sup</sup>
<mark>mark</mark>
<kbd>kbd</kbd>
<u>underline</u>
<ins>insert</ins>
<del>delete</del></p>
<h4>Description list</h4>
<pre><code class="language-md">: Definition 1 Term 2 with _inline markup_ : Definition 2 Third paragraph of
definition 2.
</code></pre>
<dl>
  <dt>Definition 1</dt>
  <dd>Term 2 with inline.</dd>
  <dt>Definition 2</dt>
  <dd>Third paragraph of definition 2.</dd>
</dl>
<h4>Abbreviation</h4>
<pre><code class="language-md">*[abbr]: Abbreviation
</code></pre>
<p><abbr title="Abbreviation">abbr</abbr></p>
<h4>Table</h4>
<h5>Normal</h5>
<pre><code class="language-md">| Syntax    | Description |
| --------- | ----------- |
| Header    | Title       |
| Paragraph | Text        |
</code></pre>
<table>
<thead>
<tr>
<th>Syntax</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Header</td>
<td>Title</td>
</tr>
<tr>
<td>Paragraph</td>
<td>Text</td>
</tr>
</tbody>
</table>
<h5>Multiline</h5>
<pre><code class="language-md">| Markdown  | Rendered HTML |
| --------- | ------------- |
| _Italic_  | _Italic_      |
|           |               |
| - Item 1  | - Item 1      |
| - Item 2  | - Item 2      |
| ```python | ```python \   |
| .1 + .2   | .1 + .2       |
</code></pre>
<table><thead><tr><th>Markdown</th><th>Rendered HTML</th></tr></thead> <tbody>
  <tr> <td> <pre><code>*Italic* </code></pre> </td> <td> <p><em>Italic</em></p>
  </td> </tr> <tr> <td> <pre><code>- Item 1 - Item 2</code></pre> </td> <td>
  <ul> <li>Item 1</li> <li>Item 2</li> </ul> </td> </tr> <tr> <td>
<pre><code>
```python
.1 + .2
```
</code></pre> </td> <td> <pre><code class="language-python">.1 + .2
  </code></pre> </td> </tr> </tbody> </table>
<h5>Rowspan</h5>
<pre><code class="language-md">|                       Stage | Direct Products | ATP Yields |
| --------------------------: | --------------: | ---------: |
|                  Glycolysis |           2 ATP |            |
|                          ^^ |          2 NADH |   3--5 ATP |
|          Pyruvaye oxidation |          2 NADH |      5 ATP |
|           Citric acid cycle |           2 ATP |            |
|                          ^^ |          6 NADH |     15 ATP |
|                          ^^ |         2 FADH2 |      3 ATP |
|              **30--32** ATP |                 |            |
| [Net ATP yields per hexose] |                 |            |
</code></pre>
<table> <caption id="netatpyieldsperhexose">Net ATP yields per hexose</caption>
  <thead> <tr> <th align="right">Stage</th> <th align="right">Direct
Products</th> <th align="right">ATP Yields</th> </tr> </thead> <tbody> <tr> <td
align="right" rowspan="2">Glycolysis</td> <td align="right" colspan="2">2
ATP</td> </tr> <tr> <td align="right">2 NADH</td> <td align="right">3–5
ATP</td> </tr> <tr> <td align="right">Pyruvaye oxidation</td> <td
align="right">2 NADH</td> <td align="right">5 ATP</td> </tr> <tr> <td
align="right" rowspan="3">Citric acid cycle</td> <td align="right"
colspan="2">2 ATP</td> </tr> <tr> <td align="right">6 NADH</td> <td
align="right">15 ATP</td> </tr> <tr> <td align="right">2 FADH2</td> <td
align="right">3 ATP</td> </tr> <tr> <td align="right"
colspan="3"><strong>30–32</strong> ATP</td> </tr> </tbody> </table>
<h4>Headerless</h4>
<pre><code class="language-md">|--|--|--|--|--|--|--|--| |♜| |♝|♛|♚|♝|♞|♜| | |♟|♟|♟| |♟|♟|♟| |♟| |♞| | | | | |
| |♗| | |♟| | | | | | | | |♙| | | | | | | | | |♘| | | |♙|♙|♙|♙| |♙|♙|♙|
|♖|♘|♗|♕|♔| | |♖|
</code></pre>
<table> <tbody> <tr> <td>♜</td> <td></td> <td>♝</td> <td>♛</td> <td>♚</td>
  <td>♝</td> <td>♞</td> <td>♜</td> </tr> <tr> <td></td> <td>♟</td> <td>♟</td>
  <td>♟</td> <td></td> <td>♟</td> <td>♟</td> <td>♟</td> </tr> <tr> <td>♟</td>
  <td></td> <td>♞</td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr>
  <tr> <td></td> <td>♗</td> <td></td> <td></td> <td>♟</td> <td></td> <td></td>
  <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td>♙</td>
  <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td>
  <td></td> <td></td> <td>♘</td> <td></td> <td></td> </tr> <tr> <td>♙</td>
  <td>♙</td> <td>♙</td> <td>♙</td> <td></td> <td>♙</td> <td>♙</td> <td>♙</td>
  </tr> <tr> <td>♖</td> <td>♘</td> <td>♗</td> <td>♕</td> <td>♔</td> <td></td>
  <td></td> <td>♖</td> </tr> </tbody> </table>]]></content>
  </entry>
  <entry>
    <title>Bash</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/bash.html" />
    <updated>2022-12-18T06:08:20.187Z</updated>
    <id>/notes/programming/languages/bash.html</id>
    <content type="html"><![CDATA[<p><a href="#">#</a> Bash</p>
<ul>
<li>
<p>Functions Info</p>
<p><strong>apropos</strong> - List of man pages for possible matches based on a search term.</p>
</li>
</ul>
<h2>Commands</h2>
<ul>
<li>
<p>Man Page Organization</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/Man%20Page%202df02a5a631a4ebe9bcfd37a72009fc0.csv">Man Page</a></p>
</li>
<li>
<p>Redirecting Standard Output</p>
<pre><code class="language-bash">ls -l /usr/bin &gt; ls-output.txt
</code></pre>
<ul>
<li>This makes output of ls command</li>
</ul>
</li>
<li>
<p>About <code>uniq</code></p>
<ul>
<li><code>uniq</code> to remove any duplicates from the output of the <code>sort</code> command.</li>
</ul>
<pre><code class="language-bash">ls /bin /usr/bin | sort | uniq
</code></pre>
<ul>
<li>To see the list of duplicates instead, add the <code>d</code> option to <code>uniq</code></li>
</ul>
<pre><code class="language-bash">ls /bin /usr/bin | sort | uniq -d
</code></pre>
</li>
<li>
<p>About <code>tee</code></p>
<ul>
<li><code>tee</code> is like <code>ls &gt; output.txt</code> but it can work with grep command.</li>
</ul>
<pre><code class="language-bash">ls /usr/bin | tee ls.txt | grep zip
</code></pre>
<h2>About <code>echo</code></h2>
<pre><code class="language-bash">echo $((2 + 2))
</code></pre>
</li>
<li>
<p>Symbols</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/Symbols%20d88a1a92cda7446fa8a9d2c975c8947e.csv">Symbols</a></p>
</li>
<li>
<p><code>echo</code> Arithmetic Exponentiation can be nested</p>
<pre><code class="language-bash">echo $(($((5**2)) * 3))
</code></pre>
</li>
<li>
<p>The range of integers.</p>
<pre><code class="language-bash">echo {1..10}
echo a{A{1,2},B{3,4}}b
</code></pre>
</li>
<li>
<p>Enverment Value List</p>
<pre><code class="language-bash">cli printenv | less
set | less
</code></pre>
</li>
</ul>
<h2>History</h2>
<ul>
<li>
<p>To see the history</p>
<pre><code class="language-bash">history
</code></pre>
</li>
<li>
<p>History Command</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/History%20Command%205694bb062b694eb68fa66879592e9106.csv">History Command</a></p>
</li>
<li>
<p>History Expansion Commands</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/History%20Expansion%20Commands%204935186cd0cd4e49a5c894c0463b2851.csv">History Expansion Commands</a></p>
</li>
<li>
<p>To record the command</p>
<pre><code class="language-bash">script
</code></pre>
</li>
</ul>
<h2>Permissions</h2>
<ul>
<li>
<p>To see the group number</p>
<pre><code class="language-bash">id
</code></pre>
</li>
<li>
<p>File Type</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/File%20Type%20b93329415ef14da18905fe8e533748f4.csv">File Type</a></p>
</li>
<li>
<p>Permission Attributes -rwxrwxr–</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/Permission%20Attributes%20-rwxrwxr%E2%80%93%2035ff6cb19e8645a3b96ba09a33eba035.csv">Permission Attributes -rwxrwxr–</a></p>
</li>
<li>
<p>File Modes in Binary and Octal</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/File%20Modes%20in%20Binary%20and%20Octal%208ac1bb600cca40ebb1db460155009adb.csv">File Modes in Binary and Octal</a></p>
</li>
<li>
<p>The attribute for changing the file permission</p>
<ul>
<li><code>7 (rwx)</code>, <code>6 (rw-)</code>, <code>5 (r-x)</code>, <code>4 (r--)</code>, and <code>0 (---)</code></li>
</ul>
</li>
<li>
<p><code>chmod</code> Symbolic Notation</p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/chmod%20Symbolic%20Notation%2036655aed32be491d8cf121e4b3981626.csv">chmod Symbolic Notation</a></p>
<p><a href="/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/chmod%20Symbolic%20Notation%20Examples%20d2fdf09328984fce96f5699222acfa25.csv">chmod Symbolic Notation Examples</a></p>
</li>
<li>
<p><code>umask</code> command controls the default permissions given to a file when it is created.</p>
<pre><code class="language-bash">umask 005
</code></pre>
</li>
</ul>
<h2>File System</h2>
<ul>
<li>
<p>Testing and Repairing File Systems</p>
<pre><code class="language-bash">sudo fsck /dev/sdb1
</code></pre>
</li>
<li>
<p>Make bootable USB drive</p>
<pre><code class="language-bash">sudo dd bs=4M if=path/to/input.iso of=/dev/sd&lt;?&gt; conv=fdatasync  status=progress
</code></pre>
</li>
</ul>
<h2>Helpful Command</h2>
<ul>
<li>
<p>Execute <code>find</code> file with command use <code>xargs</code></p>
<pre><code class="language-bash">find ~ -type f -name &quot;index.html&quot; | xargs ls -l
</code></pre>
</li>
<li>
<p>Use <code>find</code> to find the file</p>
<pre><code class="language-bash">find ~ -type f -name &quot;index.html&quot;
</code></pre>
</li>
<li>
<p>Best way to compress in tar</p>
<pre><code class="language-bash">tar cfJ playground.tar.xz playground
</code></pre>
</li>
<li>
<p>How to Mount ISO File on Linux</p>
<pre><code class="language-bash">mount -t iso9660 -o loop image.iso /mnt/iso_image
</code></pre>
</li>
<li>
<p>How to sort in Linux</p>
<pre><code class="language-bash">sort -nk 5

# With command

ls -l /usr/share | sort -nk 5

# Sort in ':'

sort -ht ':' -k 3 /etc/passwd | head
</code></pre>
</li>
<li>
<p>Remove Duplicate use <code>uniq</code></p>
<pre><code class="language-bash">sort foo.txt | uniq
</code></pre>
</li>
<li>
<p>Spell check in Terminal</p>
<pre><code class="language-bash">aspell check filename

# To check HTML code

aspell -H check html-filename
</code></pre>
</li>
<li>
<p>To make PDF</p>
<pre><code class="language-bash">ls -l ~/ | pr pr.ps | groff &gt; pr.ps

# Convert PostScript file into Potable Document File

ps2pdf pr.ps pr.pdf
</code></pre>
</li>
<li>
<p>Good Locations for Scripts</p>
<ul>
<li><code>~/bin</code>Scripts intended for personal use.</li>
<li><code>/usr/local/bin</code>Script that everyone on a system is allowed to use.</li>
<li><code>/usr/local/sbin</code>Scripts intended for use by the system administrator</li>
<li><code>/usr/local</code>Locally supplied software, scripts and compiled programs</li>
</ul>
</li>
</ul>
<h1>Shell Script</h1>
<ul>
<li>
<p>Assigning Values to Variables and Constants.</p>
<pre><code class="language-bash">a=z # Assign the string &quot;z&quot; to variable a.
b=&quot;a string&quot; # Embedded spaces must be within quotes.
c=&quot;a string and $b&quot; # Other expansions such as variables can be expanded into the assignment.
d=&quot;$(ls -l foo.txt)&quot; # Results of a command.
e=$((5 * 7)) # Arithmetic expansion.
f=&quot;\t\ta string\n&quot; # Escape sequences such as tabs and newlines.
</code></pre>
</li>
<li>
<p>Using variables with other commands.</p>
<pre><code class="language-bash">filename=&quot;myFile&quot;
touch file
mv file ${filename}
</code></pre>
</li>
<li>
<p>Here script</p>
<pre><code class="language-bash">command &lt;&lt; token
text
token
</code></pre>
</li>
<li>
<p><code>_EOF_</code></p>
<ul>
<li>
<p>Example</p>
<pre><code class="language-bash"># !/bin/bash
date=$(date +&quot;%x %r %Z&quot;)

cat &lt;&lt; _EOF_
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Website&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Website&lt;/h1&gt;
        &lt;p&gt;Hello World&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
_EOF_
</code></pre>
</li>
<li>
<p><code>_EOF_</code> with command</p>
<pre><code class="language-bash">#!/bin/bash
# Script to retrieve a file via FTP
FTP_SERVER=ftp.nl.debian.org
FTP_PATH=/debian/dists/stretch/main/installer-amd64/current/images/
cdrom REMOTE_FILE=debian-cd_info.tar.gz
ftp -n &lt;&lt; _EOF_
open $FTP_SERVER
user anonymous me@linuxbox
cd $FTP_PATH
hash
get $REMOTE_FILE
bye
_EOF_
ls -l &quot;$REMOTE_FILE&quot;
</code></pre>
</li>
<li>
<p><code>_EOF_</code> with <code>-</code></p>
<pre><code class="language-bash"># !/bin/bash
date=$(date +&quot;%x %r %Z&quot;)

cat &lt;&lt;- _EOF_
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Website&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Website&lt;/h1&gt;
        &lt;p&gt;Hello World&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
_EOF_
</code></pre>
</li>
</ul>
</li>
<li>
<p>Shell Functions</p>
<pre><code class="language-bash"># !/bin/bash

z=human # Gobal variable

echo_1() {
echo &quot;hello&quot;
return
}

echo_2() {
i=world # local veariable
echo &quot;world&quot;
return
}

echo ${echo_1} ${echo_2} $z
</code></pre>
</li>
<li>
<p>Flow Control: Branching with if</p>
<ul>
<li>
<p><code>if</code></p>
<pre><code class="language-bash">x=5
if [ &quot;$x&quot; -eq 5 ]; then
echo &quot;x equals 5.&quot;
else
echo &quot;x does not equal 5.&quot;
fi
</code></pre>
</li>
<li>
<p><code>if</code> in shell</p>
<pre><code class="language-bash">if [ “$x” -eq 5 ]; then echo &quot;equals 5&quot;; else echo &quot;does not equal 5&quot;; fi
</code></pre>
</li>
<li>
<p><code>if</code>, <code>elif</code> and <code>else</code></p>
<pre><code class="language-bash">if commands; then
commands
[elif commands; then
commands...]
[else
commands]
fi
</code></pre>
</li>
</ul>
</li>
</ul>
<h2>Expressions Examples</h2>
<ul>
<li>
<p>File Expressions</p>
<pre><code class="language-bash">#!/bin/bash
# test-file: Evaluate the status of a file
FILE=~/.bashrc
if [ -e &quot;$FILE&quot; ]; then
if [ -f &quot;$FILE&quot; ]; then
echo &quot;$FILE is a regular file.&quot;
fi
if [ -d &quot;$FILE&quot; ]; then
echo &quot;$FILE is a directory.&quot;
fi
if [ -r &quot;$FILE&quot; ]; then
echo &quot;$FILE is readable.&quot;
fi
if [ -w &quot;$FILE&quot; ]; then
echo &quot;$FILE is writable.&quot;
fi
if [ -x &quot;$FILE&quot; ]; then
echo &quot;$FILE is executable/searchable.&quot;
fi
else
echo &quot;$FILE does not exist&quot;
exit 1
fi
exit
</code></pre>
</li>
<li>
<p>String Expressions</p>
<pre><code class="language-bash">#!/bin/bash
# test-string: evaluate the value of a string
ANSWER=maybe
if [ -z &quot;$ANSWER&quot; ]; then
echo &quot;There is no answer.&quot; &gt;&amp;2
exit 1
fi
if [ &quot;$ANSWER&quot; = &quot;yes&quot; ]; then
echo &quot;The answer is YES.&quot;
elif [ &quot;$ANSWER&quot; = &quot;no&quot; ]; then
echo &quot;The answer is NO.&quot;
elif [ &quot;$ANSWER&quot; = &quot;maybe&quot; ]; then
echo &quot;The answer is MAYBE.&quot;
else
echo &quot;The answer is UNKNOWN.&quot;
fi
</code></pre>
</li>
<li>
<p>Integer Expressions</p>
<pre><code class="language-bash">#!/bin/bash
# test-integer: evaluate the value of an integer.
INT=-5
if [ -z &quot;$INT&quot; ]; then
echo &quot;INT is empty.&quot; &gt;&amp;2
exit 1
fi
if [ &quot;$INT&quot; -eq 0 ]; then
echo &quot;INT is zero.&quot;
else
if [ &quot;$INT&quot; -lt 0 ]; then
echo &quot;INT is negative.&quot;
else
echo &quot;INT is positive.&quot;
fi
if [ $((INT % 2)) -eq 0 ]; then
echo &quot;INT is even.&quot;
else
echo &quot;INT is odd.&quot;
fi
fi
</code></pre>
</li>
<li>
<p>File Expressions</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Is True If:</th>
</tr>
</thead>
<tbody>
<tr>
<td>file1 -ef file2</td>
<td>file1 and file2 have the same inode numbers (the two filenames refer to the same file by hard linking).</td>
</tr>
<tr>
<td>file1 -nt file2</td>
<td>file1 is newer than file2.</td>
</tr>
<tr>
<td>file1 -ot file2</td>
<td>file1 is older than file2.</td>
</tr>
<tr>
<td>-b file</td>
<td>file exists and is a block-special (device) file.</td>
</tr>
<tr>
<td>-c file</td>
<td>file exists and is a character-special (device) file.</td>
</tr>
<tr>
<td>-d file</td>
<td>file exists and is a directory.</td>
</tr>
<tr>
<td>-e file</td>
<td>file exists.</td>
</tr>
<tr>
<td>-f file</td>
<td>file exists and is a regular file.</td>
</tr>
<tr>
<td>-g file</td>
<td>file exists and is set-group-ID.</td>
</tr>
<tr>
<td>-G file</td>
<td>file exists and is owned by the effective group ID.</td>
</tr>
<tr>
<td>-k file</td>
<td>file exists and has its “sticky bit” set.</td>
</tr>
<tr>
<td>-L file</td>
<td>file exists and is a symbolic link.</td>
</tr>
<tr>
<td>-O file</td>
<td>file exists and is owned by the effective user ID.</td>
</tr>
<tr>
<td>-p file</td>
<td>file exists and is a named pipe.</td>
</tr>
<tr>
<td>-r file</td>
<td>file exists and is readable (has readable permission for the effective user).</td>
</tr>
<tr>
<td>-s file</td>
<td>file exists and has a length greater than zero.</td>
</tr>
<tr>
<td>-S file</td>
<td>file exists and is a network socket.</td>
</tr>
<tr>
<td>-t fd</td>
<td>fd is a file descriptor directed to/from the terminal. This can be used to determine whether standard input/output/error is being redirected.</td>
</tr>
<tr>
<td>-u file</td>
<td>file exists and is setuid.</td>
</tr>
<tr>
<td>-w file</td>
<td>file exists and is writable (has write permission for the effective user).</td>
</tr>
<tr>
<td>-x file</td>
<td>file exists and is executable (has execute/search permission for the effective user).</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>String Expressions</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Is True If…</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td>string is not null.</td>
</tr>
<tr>
<td>-n string</td>
<td>The length of string is greater than zero.</td>
</tr>
<tr>
<td>-z string</td>
<td>The length of string is zero.</td>
</tr>
<tr>
<td><code>string1 = string2</code> <code>string1 == string2</code></td>
<td>string1 and string2 are equal. Single or double equal signs may be used. The use of double equal signs is supported by bash and is generally preferred, but it is not POSIX compliant.</td>
</tr>
<tr>
<td>string1 != string2</td>
<td>string1 and string2 are not equal.</td>
</tr>
<tr>
<td>string1 &gt; string2</td>
<td>string1 sorts after string2.</td>
</tr>
<tr>
<td>string1 &lt; string2</td>
<td>string1 sorts before string2.</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>Integer Expressions</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Is True If…</th>
</tr>
</thead>
<tbody>
<tr>
<td>integer1 -eq integer2</td>
<td>integer1 is equal to integer2.</td>
</tr>
<tr>
<td>integer1 -ne integer2</td>
<td>integer1 is not equal to integer2.</td>
</tr>
<tr>
<td>integer1 -le integer2</td>
<td>integer1 is less than or equal to integer2.</td>
</tr>
<tr>
<td>integer1 is less than or equal to integer2.</td>
<td>integer1 is less than integer2.</td>
</tr>
<tr>
<td>integer1 -ge integer2</td>
<td>integer1 is greater than or equal to integer2.</td>
</tr>
<tr>
<td>integer1 -gt integer2</td>
<td>integer1 is greater than integer2.</td>
</tr>
</tbody>
</table>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Java</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/java.html" />
    <updated>2022-12-18T06:08:20.187Z</updated>
    <id>/notes/programming/languages/java.html</id>
    <content type="html"><![CDATA[<h1>Java</h1>
<h2>1) Write a program to check number is even or odd using if else.</h2>
<pre><code class="language-java">import java.util.Scanner;

/**
 * Java Program - Check if Number is Even or Odd
 */

public class Example {

    public static void main(String[] args) {
        //create a scanner to read bytes from console entered by user via keyboard
        Scanner scanner = new Scanner(System.in);

        System.out.print(&quot;Enter a number : &quot;);
        //read integer from user
        int a = scanner.nextInt();

        //check if the number is even or odd
        if(a%2==0) {
            System.out.println(&quot;The number is even.&quot;);
        } else {
            System.out.println(&quot;The number is odd.&quot;);
        }

        //close the scanner
        scanner.close();
    }
}
</code></pre>
<p>O/P</p>
<pre><code>Enter a number : 4
The number is even.
</code></pre>
<h2>2) Write a program to check switch case statement using character datatype.</h2>
<pre><code class="language-java">public class SwitchExample {
public static void main(String[] args) {
    //Declaring a variable for switch expression
    String name=&quot;a&quot;;
    //Switch expression
    switch(name){
    //Case statements
    case &quot;a&quot;: System.out.println(&quot;Aman is in Database.&quot;);
    break;
    case &quot;r&quot;: System.out.println(&quot;Ravi is in Database.&quot;);
    break;
    case &quot;g&quot;: System.out.println(&quot;Gita is in Database.&quot;);
    break;
    //Default case statement
    default:System.out.println(&quot;Name is not in database.&quot;);
    }
}
}
</code></pre>
<pre><code>Aman is in Database.
</code></pre>
<h2>3) Develop a program to print command line argument using for loop.</h2>
<pre><code class="language-java">class CommandLineExample{
    public static void main(String args[]){
        System.out.println(&quot;Your first argument is: &quot;+args[0]);
        for (int i; i &lt;= 5; i++) {
            System.out.println(arg[0]);
        }
    }
}
</code></pre>
<p>O/P</p>
<pre><code>&gt; java CommandLineExample Hello
Your first argument is: Hello
Hello
Hello
Hello
Hello
Hello
Hello
</code></pre>
<h2>4) Develop a program to show the use of implicit typecasting.</h2>
<pre><code class="language-java">public class ImplicitTypecastingExample {
   public static void main(String args[]) {
      byte p = 12;
      System.out.println(&quot;byte value : &quot;+p);
      // Implicit Typecasting
      short q = p;
      System.out.println(&quot;short value : &quot;+q);
      int r = q;
      System.out.println(&quot;int value : &quot;+r);
      long s = r;
      System.out.println(&quot;long value : &quot;+s);
      float t = s;
      System.out.println(&quot;float value : &quot;+t);
      double u = t;
      System.out.println(&quot;double value : &quot;+u);
   }
}
</code></pre>
<pre><code>byte value : 12
short value : 12
int value : 12
long value : 12
float value : 12.0
double value : 12.0
</code></pre>
<h2>5) Write a program to implement different types of constructors to perform addition of complex numbers.</h2>
<pre><code class="language-java">public class ComplexNumber{
   //for real and imaginary parts of complex numbers
   double real, img;

   //constructor to initialize the complex number
   ComplexNumber(double r, double i){
	this.real = r;
	this.img = i;
   }

   public static ComplexNumber sum(ComplexNumber c1, ComplexNumber c2)
   {
	//creating a temporary complex number to hold the sum of two numbers
        ComplexNumber temp = new ComplexNumber(0, 0);

        temp.real = c1.real + c2.real;
        temp.img = c1.img + c2.img;

        //returning the output complex number
        return temp;
    }
    public static void main(String args[]) {
	ComplexNumber c1 = new ComplexNumber(5.5, 4);
	ComplexNumber c2 = new ComplexNumber(1.2, 3.5);
        ComplexNumber temp = sum(c1, c2);
        System.out.printf(&quot;Sum is: &quot;+ temp.real+&quot; + &quot;+ temp.img +&quot;i&quot;);
    }
}
</code></pre>
<p>O/P</p>
<pre><code>Sum is: 6.7 + 7.5i
</code></pre>
<h2>6) Write a program to show the use of all methods of String class.</h2>
<pre><code class="language-java">public class StringMethodsDemo {
	public static void main(String[] args) {
		String targetString = &quot;Java is fun to learn&quot;;
		String s1= &quot;JAVA&quot;;
		String s2= &quot;Java&quot;;
		String s3 = &quot;  Hello Java  &quot;;

		System.out.println(&quot;Char at index 2(third position): &quot; + targetString.charAt(2));
		System.out.println(&quot;After Concat: &quot;+ targetString.concat(&quot;-Enjoy-&quot;));
		System.out.println(&quot;Checking equals ignoring case: &quot; +s2.equalsIgnoreCase(s1));
		System.out.println(&quot;Checking equals with case: &quot; +s2.equals(s1));
		System.out.println(&quot;Checking Length: &quot;+ targetString.length());
		System.out.println(&quot;Replace function: &quot;+ targetString.replace(&quot;fun&quot;, &quot;easy&quot;));
		System.out.println(&quot;SubString of targetString: &quot;+ targetString.substring(8));
		System.out.println(&quot;SubString of targetString: &quot;+ targetString.substring(8, 12));
		System.out.println(&quot;Converting to lower case: &quot;+ targetString.toLowerCase());
		System.out.println(&quot;Converting to upper case: &quot;+ targetString.toUpperCase());
		System.out.println(&quot;Triming string: &quot; + s3.trim());
		System.out.println(&quot;searching s1 in targetString: &quot; + targetString.contains(s1));
		System.out.println(&quot;searching s2 in targetString: &quot; + targetString.contains(s2));

		char [] charArray = s2.toCharArray();
		System.out.println(&quot;Size of char array: &quot; + charArray.length);
		System.out.println(&quot;Printing last element of array: &quot; + charArray[3]);

	}

}
</code></pre>
<p>O/P</p>
<pre><code>Char at index 2(third position): v
After Concat: Java is fun to learn-Enjoy-
Checking equals ignoring case: true
Checking equals with case: false
Checking Length: 20
Replace function: Java is easy to learn
SubString of targetString: fun to learn
SubString of targetString: fun
Converting to lower case: java is fun to learn
Converting to upper case: JAVA IS FUN TO LEARN
Triming string: Hello Java
searching s1 in targetString: false
searching s2 in targetString: true
Size of char array: 4
Printing last element of array: a
</code></pre>
<h2>7) Write a program to implement all methods of StringBuffer class.</h2>
<pre><code class="language-java">class StringBufferExample{
    public static void main(String args[]){
        StringBuffer sb=new StringBuffer(&quot;Hello&quot;);
        sb.append(&quot; Java&quot;);
        System.out.println(sb);
        sb.insert(1,&quot;Java&quot;);
        System.out.println(sb);
        sb.replace(1,3,&quot;Java&quot;);
        System.out.println(sb);
        sb.delete(1,3);
        System.out.println(sb);
        sb.reverse();
        System.out.println(sb);
        System.out.println(sb.capacity());
        sb.ensureCapacity(10);
        System.out.println(sb.capacity());
    }
}
</code></pre>
<p>O/P</p>
<pre><code>Hello Java
HJavaello Java
HJavavaello Java
Hvavaello Java
avaJ olleavavH
21
21
</code></pre>
<h2>8) Write a program to implement single inheritance.</h2>
<pre><code class="language-java">class Animal{
void eat(){System.out.println(&quot;eating...&quot;);}
}
class Dog extends Animal{
void bark(){System.out.println(&quot;barking...&quot;);}
}
class TestInheritance{
public static void main(String args[]){
Dog d=new Dog();
d.bark();
d.eat();
}}
</code></pre>
<p>O/P</p>
<pre><code>barking...
eating...
</code></pre>
<h2>9) Write a program to implement multilevel inheritance.</h2>
<pre><code class="language-java">class Animal{
void eat(){System.out.println(&quot;eating...&quot;);}
}
class Dog extends Animal{
void bark(){System.out.println(&quot;barking...&quot;);}
}
class BabyDog extends Dog{
void weep(){System.out.println(&quot;weeping...&quot;);}
}
class TestInheritance2{
public static void main(String args[]){
BabyDog d=new BabyDog();
d.weep();
d.bark();
d.eat();
}}
</code></pre>
<p>O/P</p>
<pre><code>weeping...
barking...
eating...
</code></pre>
<h2>10) Develop a program to find area of rectangle and circle using interface.</h2>
<pre><code class="language-java">class FindLargestShape {
  public static void main(String arg[]) {
    Rectangle r = new Rectangle(10, 4);
    System.out.println(&quot;Rectangle Area : &quot; + r.getArea());
    System.out.println();
  }
}

class Rectangle {
  double length;
  double breadth;
  Rectangle(double length, double breadth) {
    this.length = length;
    this.breadth = breadth;
  }
  double getArea() {
    return length * breadth;
  }

}
</code></pre>
<h2>11) Write a program to implement user defined packages in terms of creating a new package and importing the same.</h2>
<pre><code class="language-java">package example;

public class gfg {

    public void show()
    {
        System.out.println(&quot;Hello geeks!! How are you?&quot;);
    }

    public static void main(String args[])
    {
        gfg obj = new gfg();
        obj.show();
    }
}
</code></pre>
<pre><code class="language-java">import example.gfg;

public class GFG {
    public static void main(String args[])
    {
        gfg obj = new gfg();
        System.out.println(obj.show());
    }
}
</code></pre>
<p>O/P</p>
<pre><code>Hello geeks!! How are you?
</code></pre>
<h2>12) Write a program to implement two thread use sleep method.</h2>
<pre><code class="language-java">class TestSleepMethod1 extends Thread{
 public void run(){
  for(int i=1;i&lt;5;i++){
  // the thread will sleep for the 500 milli seconds
    try{Thread.sleep(500);}catch(InterruptedException e){System.out.println(e);}
    System.out.println(i);
  }
 }
 public static void main(String args[]){
  TestSleepMethod1 t1=new TestSleepMethod1();
  TestSleepMethod1 t2=new TestSleepMethod1();

  t1.start();
  t2.start();
 }
}
</code></pre>
<pre><code>11
2
2
3
3
4
4
</code></pre>
<h2>13) Develop a program to accept a password from the user and throw “Authentication Failure” exception if the password is incorrect.</h2>
<pre><code class="language-java">import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class AuthenticationException extends Exception {

 public AuthenticationException(String message) {

  super(message);
 }
}

public class AuthenticationExcDemo {

 public static void main(String[] args) {

  InputStreamReader isr = new InputStreamReader(System.in);
  BufferedReader br = new BufferedReader(isr);
  String pwd;

  try {

   System.out.print(&quot;Enter password :: &quot;);
   pwd = br.readLine();

   if(!pwd.equals(&quot;123&quot;))
    throw new AuthenticationException(&quot;Incorrect password\nType correct password&quot;);
   else
    System.out.println(&quot;Welcome User !!!&quot;);

  }
  catch (IOException e) {
   e.printStackTrace();
  }
  catch (AuthenticationException a) {
   a.printStackTrace();
  }
  System.out.println(&quot;BYE BYE&quot;);
 }

}
</code></pre>
<h2>14) Develop a program to draw a polygon using applet.</h2>
<pre><code class="language-java">import java.awt.*;
import javax.swing.*;

public class poly extends JApplet {

    // called when applet is started
    public void init()
    {
        // set the size of applet to 300, 300
        setSize(200, 200);
        show();
    }

    // invoked when applet is started
    public void start()
    {
    }

    // invoked when applet is closed
    public void stop()
    {
    }

    public void paint(Graphics g)
    {
        // x coordinates of vertices
        int x[] = { 10, 30, 40, 50, 110, 140 };

        // y coordinates of vertices
        int y[] = { 140, 110, 50, 40, 30, 10 };

        // number of vertices
        int numberofpoints = 6;

        // set the color of line drawn to blue
        g.setColor(Color.blue);

        // draw the polygon using drawPolygon function
        g.drawPolygon(x, y, numberofpoints);
    }
}
</code></pre>
<h2>15) Develop an applet for drawing a human face.</h2>
<pre><code class="language-java">import java.applet.*;
import java.awt.*;
public class Human_Face extends Applet
{
    //Initialize the applet
    public void init()
    {
	setBackground(Color.white);
    }
    //Draw the human face
    public void paint(Graphics g)
    {
        //Change color to cream
        Color clr=new Color(255,179,86);
        g.setColor(clr);
        //Draw and fill the face
        g.drawOval(100,100,250,300);
        g.fillOval(100,100,250,300);
        //Change color to black
        g.setColor(Color.black);
        //Draw the left eye
        g.drawOval(160,185,40,25);
        g.fillOval(160,185,40,25);
        //Draw the right eye
        g.drawOval(250,185,40,25);
        g.fillOval(250,185,40,25);
        //Draw the Left Eyebrow
        g.drawArc(160,170,35,10,0,180);
        //Draw the Right Eyebrow
        g.drawArc(250,170,35,10,0,180);
        //Draw the Nose
        g.drawLine(210,265,210,275);
        g.drawLine(240,265,240,275);
        g.drawArc(210,275,30,10,0,-180);
       //Draw the smile
        g.drawArc(175,300,100,50,0,-180);
    }
}
</code></pre>
<h2>16) Develop a program to draw square inside a circle using applet.</h2>
<pre><code class="language-java">import java.applet.&quot;;
import java.awt.*;
/* &lt;applet code=shapes width=10 height=10&gt; &lt;/applet&gt;*/
public class shapes extends Applet {
    public void paint(Graphics g) {
    g.drawString(&quot;Square inside a circle&quot;, 150,110);
    g.drawOval(180,10,80,80);
    g.drawRect(192,22,55,55):
    g.drawString(&quot;Circle inside a square&quot;, 290, 110);
    g.drawRect(290, 10, 80, 80);
    g.drawOval(290, 10, 80, 80);
    }
}
</code></pre>
<h2>17) Develop a program to copy characters from one file to another.</h2>
<pre><code class="language-java">import java.io.*;
import java.util.*;
class Copyfile {
 public static void main(String arg[]) throws Exception {
  Scanner sc = new Scanner(System.in);
  System.out.print(&quot;Provide source file name :&quot;);
  String sfile = sc.next();
  System.out.print(&quot;Provide destination file name :&quot;);
  String dfile = sc.next();
  FileReader fin = new FileReader(sfile);
  FileWriter fout = new FileWriter(dfile, true);
  int c;
  while ((c = fin.read()) != -1) {
   fout.write(c);
  }
  System.out.println(&quot;Copy finish...&quot;);
  fin.close();
  fout.close();
 }
}
</code></pre>]]></content>
  </entry>
  <entry>
    <title>C</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/c.html" />
    <updated>2022-12-18T06:08:20.187Z</updated>
    <id>/notes/programming/languages/c.html</id>
    <content type="html"><![CDATA[<h1>C</h1>
<ul>
<li>In fact, you should use the main() to do very little except call each of the other functions.</li>
<li>A good rule of thumb is that a function should not take more lines than will fit on a single screen. If the function is longer than that, you’re probably making it do too much.</li>
<li>The difference between local and global variables:
<ul>
<li>A variable is global only if you define the variable (such as inti;) before a function name.</li>
<li>A variable is local only if you define it after an opening brace. A function always begins with opening braces. Some statements, such as while, also have opening braces, and you can define local variables within those braces as well.</li>
</ul>
</li>
<li>Local variables are safer than global variables.</li>
<li>Don’t define global variables in the middle of a program. They’re too hard to locate if you do.</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>CSS</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/css.html" />
    <updated>2022-12-18T06:08:20.187Z</updated>
    <id>/notes/programming/languages/css.html</id>
    <content type="html"><![CDATA[<h1>CSS</h1>
<p><a href="/notes/CSS%208946e12a95f04e3490bd9c09bfb99d1e/SASS%20d57c9cbb233644a3a615a487f4cdf949.md">SASS</a></p>
<ul>
<li>
<p>BEM Method</p>
<pre><code class="language-css">/* Block component */
.btn {}
/* Element that depends upon the block */
.btn__price {}
/* Modifier that changes the style of the block */
.btn--orange {}
.btn--big {}
</code></pre>
</li>
<li>
<p>Dark Mode Setting</p>
<pre><code class="language-css">:root {
  color-scheme: light dark; /* both supported */
}
</code></pre>
</li>
<li>
<p>Image Dark</p>
<ul>
<li>
<p>Apply the filter directly on the body tag.</p>
<pre><code class="language-css">body.dark-theme img {
  filter: brightness(.8) contrast(1.2);
}
</code></pre>
</li>
<li>
<p>Or apply it via media query.</p>
<pre><code class="language-css">@media (prefers-color-scheme: dark) {
  img {
    filter: brightness(.8) contrast(1.2);
  }
}
</code></pre>
</li>
</ul>
</li>
<li>
<p>Image prefer Dark</p>
<pre><code class="language-html">&lt;picture&gt;
  &lt;!-- Use this image if the user's OS setting is light or unset --&gt;
  &lt;source srcset=&quot;photo-light.png&quot; media=&quot;(prefers-color-scheme: light) or (prefers-color-scheme: no-preference)&quot;&gt;
  &lt;!-- Use this image if the user's OS setting is dark --&gt;
  &lt;source srcset=&quot;photo-dark.png&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;
&lt;/picture&gt;
</code></pre>
</li>
<li>
<p>Non-standard attributes, dataset</p>
<pre><code class="language-css">&lt;style&gt;
  /* styles rely on the custom attribute &quot;order-state&quot; */
  .order[order-state=&quot;new&quot;] {
    color: green;
  }

  .order[order-state=&quot;pending&quot;] {
    color: blue;
  }

  .order[order-state=&quot;canceled&quot;] {
    color: red;
  }
&lt;/style&gt;

&lt;div class=&quot;order&quot; order-state=&quot;new&quot;&gt;
  A new order.
&lt;/div&gt;

&lt;div class=&quot;order&quot; order-state=&quot;pending&quot;&gt;
  A pending order.
&lt;/div&gt;

&lt;div class=&quot;order&quot; order-state=&quot;canceled&quot;&gt;
  A canceled order.
&lt;/div&gt;
</code></pre>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>React</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/javascript/react.html" />
    <updated>2022-12-18T06:08:20.187Z</updated>
    <id>/notes/programming/languages/javascript/react.html</id>
    <content type="html"><![CDATA[<h1>React</h1>
<ul>
<li>Function VS Class Component
<ul>
<li>A functional component is just a plain JavaScript function that accepts props as an argument and returns a React element.</li>
<li>A class component requires you to extend from React. Component and create a render function which returns a React element.</li>
</ul>
</li>
<li></li>
</ul>]]></content>
  </entry>
  <entry>
    <title>NodeJS</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/javascript/nodejs.html" />
    <updated>2022-12-18T06:08:20.187Z</updated>
    <id>/notes/programming/languages/javascript/nodejs.html</id>
    <content type="html"><![CDATA[<h1>NodeJS</h1>
<p>From <a href="https://trainings.internshala.com/nodejs-training">Internshala Training NodeJS Course</a></p>
<h1>Require</h1>
<ul>
<li>
<p>Import node module</p>
<pre><code class="language-jsx">const { readFs } = require(&quot;fs&quot;);
const { readHttps } = require(&quot;https&quot;);
</code></pre>
</li>
<li>
<p>Input the string in <code>console.log</code>.</p>
<pre><code class="language-jsx">st readLine = require(&quot;readline&quot;).createInterface({
  output: process.stdout,
  input: process.stdin,
});

readLine.question(&quot;What is your name?\n&quot;, (name) =&gt; {
  console.log(`Welcome ${name}`);
  readLine.close();
});

// What is your name?
// Jimmin &lt;= Ask to input here
// Welcome Jimmin
</code></pre>
</li>
</ul>
<h1>Module</h1>
<ul>
<li>
<p>Process</p>
<p>The <code>process</code> object in Node.js is a global object that can be accessed inside any module without requiring it.</p>
<ul>
<li>
<p><code>process.on</code></p>
<pre><code class="language-jsx">process.on('beforeExit', (code) =&gt; {
console.log('Process beforeExit event with code: ', code);
});
// Process beforeExit event with code:  0                                                                                             /0.3s
</code></pre>
</li>
<li>
<p>Process expressions</p>
<pre><code class="language-jsx">console.log(process.ppid);
// 21321
console.log(process.argv);
// [
//  '/snap/node/5148/bin/node',
//  '/home/kurama/Documents/Projects/Node JS/app.js'
//]
console.log(`Reports are compact? ${process.report.compact}`);
// Reports are compact? false                                                                                                         /0.3s
</code></pre>
</li>
</ul>
</li>
<li>
<p>Module</p>
<p>The <code>module</code> is same as process but you can only access within the file information.</p>
</li>
<li>
<p>Event</p>
<ul>
<li>
<p>EventEmitter</p>
<pre><code class="language-jsx">const events = require(&quot;events&quot;);
const eEmitter = new events.EventEmitter();

const getParty = function () {
  console.log(&quot;Time to party&quot;);
  const ran = Math.ceil(Math.random() * 10);
  console.log(`Party starts in ${ran}`);
  tester(ran);
};

eEmitter.on(&quot;music&quot;, getParty);

tester(2);

function tester(val) {
  setTimeout((e) =&gt; {
    eEmitter.emit(&quot;music&quot;);
  }, val * 1000);
}

// Time to party
// Party starts in 5
// Time to party
// Party starts in 8
// Time to party
// Party starts in 3
// Time to party
// Party starts in 9
</code></pre>
</li>
</ul>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>JS</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/javascript/js.html" />
    <updated>2022-12-18T06:08:20.187Z</updated>
    <id>/notes/programming/languages/javascript/js.html</id>
    <content type="html"><![CDATA[<h1>The JavaScript language</h1>
<h1>Standard built-in objects</h1>
<h2>Proxy</h2>
<ul>
<li>
<p>The <code>new Proxy</code> object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.</p>
<pre><code class="language-jsx">let numbers = {
    'Hello': 'Hi',
    'YoYo': 'Yo',
    'Going': 'Go'
}

let proxy = new Proxy(numbers, {
    get(target, prop) {
        if(prop in target) {
            return target[prop];
        } else {
            return `${prop} is not found`;
        }
    }
});

proxy['Going'];
// Go
</code></pre>
</li>
<li>
<p>Proxy with <code>set</code> <strong>Note</strong>: For set, it must return true for a successful write.</p>
<pre><code class="language-jsx">let users = {};

let dataStorage = new Proxy(users, {
    set(target, prop, val) {
        if(typeof val == 'string') {
            target[prop] = val;
        } else {
            throw new Error(`Only string allowed`);
        }
    }
});

dataStorage.name = &quot;Jone&quot;
// Jone

dataStorage.age = 12
// Error: Only string allowed
</code></pre>
</li>
<li>
<p>Proxy with <code>has</code></p>
<pre><code class="language-jsx">let range = {
    start: 1,
    end: 10
};

let range = new Proxy(range, {
    has(target, prop) {
        return target.start &lt; prop &amp;&amp; target.end &gt; prop;
    }
});

alert(5 in range); // true
alert(50 in range); // false
</code></pre>
</li>
</ul>
<h2>Reflect</h2>
<ul>
<li>
<p><code>Reflect.ownKeys()</code> returns an array of the target object’s own property keys.</p>
<pre><code class="language-jsx">let user = {
  name: &quot;John&quot;,
  age: 30,
  _password: &quot;***&quot;
};

let user = new Proxy(user, {
    ownKey(target) {
        return Object.keys(target).filter(obj =&gt; !obj.startsWith('_'));
    }
});

for(let key in user) alert(key);
// name, age
</code></pre>
</li>
<li>
<p><code>Reflect.set()</code></p>
<pre><code class="language-jsx">user = {
	age: 32
}
Reflect.set(user, 'name', 'Jone');
Reflect.set(user, 'age', '53');

console.log(user);

{age: &quot;53&quot;, name: &quot;Jone&quot;}
</code></pre>
</li>
<li>
<p>Proxying a getter with <code>Reflect.get()</code>.</p>
<pre><code class="language-jsx">let user = {
    _name: &quot;Guest&quot;,
    get name() {
        return this._name;
    }
}

let userProxy = new Proxy(user, {
    get(target, prop, receiver) {
        return Reflect.get(target, prop, receiver);
    }
});

let admin = {
    __proto__: userProxy,
    _name: &quot;Admin&quot;
};

admin.name;
// Admin
</code></pre>
</li>
</ul>
<h2>Promise</h2>
<ul>
<li>
<p>Return value if fail or pass.</p>
<pre><code class="language-jsx">let passPromise = new Promise((reslove, reject) =&gt; {
	try {
		if (false) throw NotDefine();
		reslove(&quot;Pass&quot;);
	} catch(err) {
		reject(err.message);
	}
});

passPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))
// Pass

let failPromise = new Promise((reslove, reject) =&gt; {
	try {
		if (true) throw NotDefine();
		reslove(&quot;Pass&quot;);
	} catch(err) {
		reject(err.message);
	}
});

failPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))
// NotDefine is not defined
</code></pre>
</li>
<li>
<p>Promise with <code>finally</code>.</p>
<pre><code class="language-jsx">let failPromise = new Promise((reslove, reject) =&gt; {
	try {
		if (true) throw NotDefine();
		reslove(&quot;Pass&quot;);
	} catch(err) {
		reject(&quot;Fail: &quot; + err.message);
	}
})
	.finally(() =&gt; console.log(&quot;The result is:&quot;));

failPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))
// The result is
// NotDefine is not defined
</code></pre>
</li>
<li>
<p>Promise with <code>catch</code>.</p>
<pre><code class="language-jsx">let failPromise = new Promise((reslove, reject) =&gt; {
	try {
		if (true) throw NotDefine();
		reslove(&quot;Pass&quot;);
	} catch(err) {
		reject(&quot;Fail: &quot; + err.message);
	}
})
	.finally(() =&gt; console.log(&quot;The result is:&quot;)
	.catch((err) =&gt; console.log(err.name + &quot;: This error is catch.&quot;));

failPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))
// The result is
// undefined: This error is catch.
</code></pre>
</li>
<li>
<p>❓Delay with a promise.</p>
<pre><code class="language-jsx">function delay(ms) {
    return new Promise((reslove) =&gt; setTimeout(reslove, ms));
}

delay(3000).then(() =&gt; alert('runs after 3 seconds'));
// runs after 3 seconds
</code></pre>
</li>
<li>
<p>Promises chaining with <code>then</code></p>
<pre><code class="language-jsx">new Promise((reslove, reject) =&gt; {
    reslove(&quot;Hello&quot;);
}).then((result) =&gt; {
    console.log(result);
    return &quot;how&quot;;
}).then((result) =&gt; {
    console.log(result);
    return &quot;are&quot;;
}).then((result) =&gt; {
    console.log(result);
}).finally(() =&gt; {
    console.log(&quot;you?&quot;);
});
</code></pre>
</li>
<li>
<p>Promises chaining with numbers</p>
<pre><code class="language-jsx">new Promise((reslove) =&gt; {
    reslove(1);
}).then((result) =&gt; {
    console.log(result);
    return result + 1;
}).then((result) =&gt; {
    console.log(result);
    return result + 1;
}).then((result) =&gt; {
    console.log(result);
});

/*
1
2
3
*/
</code></pre>
</li>
<li>
<p><code>Promise.all</code>you can use multiple Promise</p>
<pre><code class="language-jsx">let username = []

for ( loop = 0; loop &lt; 2; loop++ ) username.push(prompt(&quot;What is your Username&quot;));

let githubAPI = username.map(user =&gt; &quot;https://api.github.com/users/&quot; + user);

Promise.all(githubAPI)
	.then(apiJSON =&gt; Promise.all(apiJSON.map(aj =&gt; aj.json())))
	.then(check =&gt; {
	if (check == null) {
		console.log(`No result found`)
		exit();
		}
	return check;
})
	.then(github =&gt; console.log(`Name: ${github.name}, Repo: ${github.public_repos}`));
</code></pre>
</li>
<li>
<p>#<code>Promise.allSettled</code>the <code>Promise.all</code>can’t error this function can.</p>
<ul>
<li><code>Promise.allSettled</code> just waits for all promises to settle, regardless of the result. The resulting array has:
<ul>
<li><code>{status:&quot;fulfilled&quot;, value:result}</code> for successful responses,</li>
<li><code>{status:&quot;rejected&quot;, reason:error}</code> for errors.</li>
</ul>
</li>
</ul>
<pre><code class="language-jsx">let urls = [
	`https://api.github.com/users/aav`,
	`https://api.github.com/users/hello`,
	`https://no-such-url`
];

Promise.allSettled(urls.map(url =&gt; fetch(url)))
	.then(url =&gt; url.forEach((urlLoop, num) =&gt; {
		if ( urlLoop.status == &quot;fulfilled&quot; ) {
			fetch(urls[num])
                .then(urlJSON =&gt; urlJSON.json())
                .then(data =&gt; console.log(`${data.name}`));
		}
		if ( urlLoop.status == &quot;rejected&quot; ) {
			console.log(`Error: Failed to fetch. Error code: 3234`);
		}
	}));
</code></pre>
</li>
<li>
<p><code>Promise.race</code></p>
<ul>
<li>
<p><code>reject</code> or <code>error</code> can’t come first.</p>
<pre><code class="language-jsx">Promise.race([
  new Promise((resolve, reject) =&gt; reject(1)),
  new Promise((resolve, reject) =&gt; resolve(2)),
  new Promise((resolve, reject) =&gt; reject(3)),
  new Promise((resolve, reject) =&gt; resolve(4))
]).then(alert);

// Uncaught (in promise) 1
</code></pre>
</li>
<li>
<p>Only shows the promise which executes first.</p>
<pre><code class="language-jsx">Promise.race([
  new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(2), 200)),
  new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(4), 100))
]).then(alert);
</code></pre>
</li>
</ul>
</li>
<li>
<p><code>Promise.any</code></p>
<pre><code class="language-jsx">Promise.any([
    new Promise((reslove, reject) =&gt; reject(1)),
    new Promise((reslove, reject) =&gt; setTimeout(() =&gt; reslove(2), 200)),
    new Promise((reslove, reject) =&gt; reject(3)),
    new Promise((reslove, reject) =&gt; setTimeout(() =&gt; reslove(4), 100))
]).then(word =&gt; console.log(word));
</code></pre>
</li>
</ul>
<h2>Date</h2>
<ul>
<li>
<p>To Get the <code>Date</code></p>
<ul>
<li><code>getFullYear()</code> Get the year (4 digits).</li>
<li><code>getMonth()</code> Get the month, from 0 to 11.</li>
<li><code>getDate()</code> Get the day of month, from 1 to 31, the name of the method does look a little bit strange.</li>
<li><code>getHours()</code>, <code>getMinutes()</code>, <code>getSeconds()</code>, <code>getMilliseconds()</code> Get the corresponding time components.</li>
<li><code>getDay()</code> Get the day of week, from 0 (Sunday) to 6 (Saturday). The first day is always Sunday, in some countries that’s not so, but can’t be changed.</li>
<li><code>getTime()</code> Returns the timestamp for the date – a number of milliseconds passed from the January 1st of 1970 UTC+0.</li>
<li><code>getTimezoneOffset()</code> Returns the difference between UTC and the local time zone, in minutes.</li>
</ul>
</li>
<li>
<p>To Set the <code>Date</code></p>
<ul>
<li><code>setFullYear(year, [month], [date])</code></li>
<li><code>setMonth(month, [date])</code></li>
<li><code>setDate(date)</code></li>
<li><code>setHours(hour, [min], [sec], [ms])</code></li>
<li><code>setMinutes(min, [sec], [ms])</code></li>
<li><code>setSeconds(sec, [ms])</code></li>
<li><code>setMilliseconds(ms)</code></li>
<li><code>setTime(milliseconds)</code></li>
</ul>
</li>
<li>
<p>#<code>Date()</code> constructor.</p>
<pre><code class="language-jsx">const date1 = new Date('December 17, 1995 03:24:00');
console.log(date1);
// Sun Dec 17 1995 03:24:00 GMT+0530 (India Standard Time)
</code></pre>
</li>
<li>
<p>#<code>Date.now()</code> for now date.</p>
<pre><code class="language-jsx">let start = Date.now();
for (let i = 0; i &lt; 100000; i++) {
  let doSomething = i * i * i;
}
let end = Date.now();
console.log( `The loop took ${end - start} ms` );
// The loop took 2 ms
</code></pre>
</li>
<li>
<p><code>Date.parse</code> from a string.</p>
<pre><code class="language-jsx">let ms = Date.parse('2012-01-26T13:51:50.417-07:00');
alert(ms);
// 1327611110417
</code></pre>
</li>
</ul>
<h2>Function</h2>
<ul>
<li>
<p>IIFE (Immediately Invoked Function Expression)</p>
<pre><code class="language-jsx">((name, surname) =&gt; {
	console.log(`Hello ${name} ${surname}`);
})('Jummy', 'Vinchoco');

// Hello Jummy Vinchoco
</code></pre>
</li>
<li>
<p>❓ Fix a function that loses “this”</p>
<pre><code class="language-jsx">function askPassword(ok, fail) {
  let password = prompt(&quot;Password?&quot;, '');
  if (password == &quot;rockstar&quot;) ok();
  else fail();
}

let user = {
  name: 'John',

  loginOk() {
    alert(`${this.name} logged in`);
  },

  loginFail() {
    alert(`${this.name} failed to log in`);
  },

};

askPassword(user.loginOk.bind(user), user.loginFail.bind(user));
</code></pre>
</li>
<li>
<p>Arrow don’t have <code>this</code>, <code>argument</code>, <code>new</code> &amp; <code>super</code></p>
</li>
<li>
<p>#<code>Function.name</code>to show variable name</p>
<pre><code class="language-jsx">function sayHi() {
  alert(&quot;Hi&quot;);
}

alert(sayHi.name); // sayHi
</code></pre>
</li>
<li>
<p>#<code>setter</code>&amp; #<code>getter</code>. #<code>set</code> you can change the value like <code>let</code>&amp; <code>const</code>. #<code>get</code>syntax binds an object property to a function that will be called when that property is looked up.</p>
<ul>
<li>
<p>This can also work with <code>defineProperty</code> &amp; <code>defineProperties</code></p>
<pre><code class="language-jsx">let user = {
  name: &quot;John&quot;,
  surname: &quot;Smith&quot;
};

Object.defineProperty(user, 'fullName', {
  get() {
    return `${this.name} ${this.surname}`;
  },

  set(value) {
    [this.name, this.surname] = value.split(&quot; &quot;);
  }
});

console.log(user.fullName); // John Smith

for(let key in user) console.log(user); // name, surname
</code></pre>
</li>
<li>
<p><code>getters</code>/<code>setters</code> can be used as wrappers over “real” property values to gain more control over operations with them.</p>
<pre><code class="language-jsx">let user = {
  get name() {
    return this._name;
  },

  set name(value) {
    if (value.length &lt; 4) {
      alert(&quot;Name is too short, need at least 4 characters&quot;);
      return;
    }
    this._name = value;
  }
};

user.name = &quot;Pete&quot;;
alert(user.name); // Pete

user.name = &quot;&quot;; // Name is too short...
</code></pre>
</li>
</ul>
</li>
<li>
<p>Binding object with function with #<code>bind</code>.</p>
<ul>
<li>
<p>Joined other function <code>this</code> with bind.</p>
<pre><code class="language-jsx">let user = {
    firstName: &quot;John&quot;
};

function func(word) {
    console.log(word + ' ' + this.firstName);
};

say(&quot;Hi&quot;);
// Hi John
</code></pre>
</li>
<li>
<p>You can solve <code>this</code> problem with #<code>bind</code>.</p>
<pre><code class="language-jsx">let user = {
    firstName: &quot;Jonn&quot;,
    sayHi() {
        console.log(`Hi ${this.firstName}`);
    }
}

user.bind(user.sayHi);
// Hi Jonn
</code></pre>
</li>
</ul>
</li>
<li>
<p>Sort with #<code>sort()</code>.</p>
<pre><code class="language-jsx">let arr = [ 1, 15, 2 ];
console.log(arr.sort((a, b) =&gt; a - b);
// [1, 2, 15]
</code></pre>
</li>
<li>
<p>Sort string #<code>localeCompare()</code>.</p>
<pre><code class="language-jsx">let countries = ['Österreich', 'Andorra', 'Vietnam'];
console.log(countries.sort((a, b) =&gt; a.localeCompare(b)))
// Andorra, Österreich, Vietnam
</code></pre>
</li>
<li>
<p>Reverse the array with #<code>reverse()</code></p>
<pre><code class="language-jsx">let arr = [1, 2, 3, 4, 5];
arr.reverse();
alert( arr );
// 5,4,3,2,1
</code></pre>
</li>
<li>
<p>Checks is it Array or Not with #<code>isArray()</code>.</p>
<pre><code class="language-jsx">console.log(Array.isArray({}));
// false
console.log(Array.isArray([]));
// true
</code></pre>
</li>
<li>
<p>Make array with words with <code>Array.from()</code>.</p>
<pre><code class="language-jsx">console.log(Array.from(&quot;HELLO&quot;));
// [&quot;H&quot;, &quot;E&quot;, &quot;L&quot;, &quot;L&quot;, &quot;O&quot;]
</code></pre>
</li>
<li>
<p>You can function as a variable in function.</p>
<pre><code class="language-jsx">function f() {
  let value = Math.random();

  return function() { alert(value); };
}

// 3 functions in array, every one of them links to Lexical Environment
// from the corresponding f() run
let arr = [f(), f(), f()];
</code></pre>
</li>
<li>
<p>Both nested functions are created within the same outer Lexical Environment, so they share access to the same count variable.</p>
<pre><code class="language-jsx">function Counter() {
  let count = 0;

  this.up = function() {
    return ++count;
  };

  this.down = function() {
    return --count;
  };
}

let counter = new Counter();

alert( counter.up() ); // 1
alert( counter.up() ); // 2
alert( counter.down() ); // 1
</code></pre>
</li>
<li>
<p>The function that created inside the function is stay inside the function.</p>
<pre><code class="language-jsx">let phrase = &quot;Hello&quot;;

if (true) {
  let user = &quot;John&quot;;

  function sayHi() {
    alert(`${phrase}, ${user}`);
  }
}

sayHi(); // error
</code></pre>
</li>
<li>
<p>Length of String with <code>length()</code>.</p>
</li>
<li>
<p>Named Function Expression, or NFE, is a term for Function Expressions that have a name.</p>
<ul>
<li>It allows the function to reference itself internally.</li>
<li>It is not visible outside of the function.</li>
</ul>
<pre><code class="language-jsx">let sayHi = function func(who) {
  if (who) {
    alert(`Hello, ${who}`);
  } else {
    **func(&quot;Guest&quot;);**
  }
};

let welcome = sayHi;
sayHi = null;

welcome(); // Hello, Guest
</code></pre>
<ul>
<li><code>func</code> is function-local. It is not taken from outside (and not visible there). The specification guarantees that it will always reference the current function.</li>
</ul>
</li>
<li>
<p>Sum with an arbitrary amount of brackets.</p>
<pre><code class="language-jsx">function sum(a) {

  let currentSum = a;

  function f(b) {
    currentSum += b;
    return f;
  }

  f.toString = function() {
    return currentSum;
  };

  return f;
}

alert( sum(1)(2) ); // 3
alert( sum(5)(-1)(2) ); // 6
alert( sum(6)(-1)(-2)(-3) ); // 0
alert( sum(0)(1)(2)(3)(4)(5) ); // 15
</code></pre>
</li>
<li>
<p>The call() method calls a function with a given this value and arguments provided individually.</p>
<pre><code class="language-jsx">function sayHi() {
    return this.name;
}

let hi = { name: &quot;hello boys&quot; };

sayHi.call( hi ); // hello boys
</code></pre>
</li>
<li>
<p>call() method with argument.</p>
<pre><code class="language-jsx">function sayHi( user ) {
    console.log( this.name + &quot; &quot; + user );
}

let id = { name: &quot;Jonney&quot; };
let username = &quot;Deep&quot;;

sayHi.call( id, username );
</code></pre>
</li>
<li>
<p>Function binding</p>
<ul>
<li>
<p>The function inside the function run the first the outer function.</p>
<pre><code class="language-jsx">function handleException(funcAsParameter) {
	console.log(&quot;Inside handleException function&quot;)
	try {
		funcAsParameter()
	} catch(err) {
		console.log(err)
	}
}

function divideByZero() {
	result = 5 / 0
	if(!Number.isFinite(result)) {
		throw &quot;Division by Zero not a good idea!!&quot;
	}
	console.log(&quot;Result of the division of 5 by zero is: &quot; + result)
}

// Passing divide by zero as a parameter to handle exceptions. handleException will
// call the divide by zero methods and will handle any exception raised by it.
handleException(divideByZero)
</code></pre>
</li>
</ul>
</li>
<li>
<p>IIFE - Self Executing Anonymous Function</p>
<pre><code class="language-jsx">(function helloWorld(name, age) {
	console.log(`My name is ${name} and I am ${age} years old`);
})(&quot;Jonney&quot;, 32);
</code></pre>
</li>
</ul>
<h2>Array</h2>
<ul>
<li>
<p><code>Array</code>method, selects and negatives.</p>
<ul>
<li><code>slice(start, end)</code> From <code>start</code> to <code>end</code> (not including <code>end</code>) - <strong>Allows negatives</strong></li>
<li><code>substring(start, end)</code> Between <code>start</code> and <code>end</code> - <strong>Negative values mean</strong> <code>0</code></li>
<li><code>substr(start, length)</code>from <code>start</code> get <code>length</code> characters - <strong>Allows negative</strong> <code>start</code></li>
</ul>
</li>
<li>
<p>#<code>map()</code>changes the value of the first variable in arrow function next value in the array</p>
<pre><code class="language-jsx">const array1 = [1, 4, 9, 16];

// pass a function to map
const map1 = array1.map(x =&gt; x * 2);

console.log(map1);
// expected output: Array [2, 8, 18, 32]
</code></pre>
</li>
<li>
<p>#<code>isArray</code> checks if it is array or not</p>
<pre><code class="language-jsx">Array.isArray([1, 2, 3]);  // true
Array.isArray({foo: 123}); // false
</code></pre>
</li>
<li>
<p>#<code>indexOf</code>checks if the array has same value and gives <code>true</code> = 1 &amp; <code>false</code> = 0</p>
<pre><code class="language-jsx">const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];

console.log(beasts.indexOf('bison'));
// expected output: 1

// start from index 2
console.log(beasts.indexOf('bison', 2));
// expected output: 4

console.log(beasts.indexOf('giraffe'));
// expected output: -1
</code></pre>
</li>
<li>
<p><code>includes</code> works like <code>indexOf</code>but returns <code>true</code>&amp; <code>false</code></p>
<pre><code class="language-jsx">const array1 = [1, 2, 3];

console.log(array1.includes(2));
// expected output: true

const pets = ['cat', 'dog', 'bat'];

console.log(pets.includes('cat'));
// expected output: true

console.log(pets.includes('at'));
// expected output: false
</code></pre>
</li>
<li>
<p>#<code>forEach</code>loops through all array values</p>
<pre><code class="language-jsx">let code = [&quot;hello&quot;, &quot;world&quot;, &quot;noob&quot;];

code.forEach(n =&gt; console.log(n));
/*
 hello
 world
 noob
*/
</code></pre>
</li>
<li>
<p><code>Array</code> prototypically inherits from <code>Object</code>. <code>console.log(Array instanceof Object) // true</code></p>
</li>
<li>
<p>The <code>join()</code> method creates and returns a new string by concatenating all of the elements in an array.</p>
<pre><code class="language-jsx">const elements = ['Fire', 'Air', 'Water'];

console.log(elements.join());
// expected output: &quot;Fire,Air,Water&quot;

console.log(elements.join(''));
// expected output: &quot;FireAirWater&quot;

console.log(elements.join('-'));
// expected output: &quot;Fire-Air-Water&quot;
</code></pre>
</li>
</ul>
<h2>JSON</h2>
<ul>
<li>
<p>#<code>JSON.stringify()</code> converts a JavaScript object or value to a JSON string.</p>
<pre><code class="language-jsx">console.log(JSON.stringify({ x: [10, undefined, function(){}, Symbol('')] }));
</code></pre>
</li>
<li>
<p>String to Object with <code>JSON.parse()</code></p>
<pre><code class="language-jsx">let userData = '{ &quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 35, &quot;isAdmin&quot;: false, &quot;friends&quot;: [0,&quot;hi&quot;,2,3] }';
let user = JSON.parse(userData);
alert( user.friends[1] );
// &quot;hi&quot;
</code></pre>
</li>
<li>
<p>Only show passed value with <code>toJSON()</code></p>
<pre><code class="language-jsx">let room = {
  number: 23,
  toJSON() {
    return this.number;
  }
};
let meetup = {
  title: &quot;Conference&quot;,
  room
};
alert( JSON.stringify(room) ); // 23
alert( JSON.stringify(meetup) );
/*
  {
    &quot;title&quot;:&quot;Conference&quot;,
    &quot;room&quot;: 23
  }
*/
</code></pre>
</li>
<li>
<p>Object to String <code>JSON.stringify()</code></p>
<pre><code class="language-jsx">let user = {
  name: &quot;John&quot;,
  age: 25,
  roles: {
    isAdmin: false,
    isEditor: true
  }
};
alert(JSON.stringify(user, null, 2));
/* two-space indents:
{
  &quot;name&quot;: &quot;John&quot;,
  &quot;age&quot;: 25,
  &quot;roles&quot;: {
    &quot;isAdmin&quot;: false,
    &quot;isEditor&quot;: true
  }
}
*/
/* for JSON.stringify(user, null, 4) the result would be more indented:
{
    &quot;name&quot;: &quot;John&quot;,
    &quot;age&quot;: 25,
    &quot;roles&quot;: {
        &quot;isAdmin&quot;: false,
        &quot;isEditor&quot;: true
    }
}
*/
</code></pre>
</li>
<li>
<p>JSON in Javascript</p>
<pre><code class="language-jsx">let string = JSON.stringify({squirrel: false,
                             events: [&quot;weekend&quot;]});
console.log(string);
// → {&quot;squirrel&quot;:false,&quot;events&quot;:[&quot;weekend&quot;]}
console.log(JSON.parse(string).events);
// → [&quot;weekend&quot;]
</code></pre>
</li>
</ul>
<h2>Object</h2>
<ul>
<li>
<p><code>Object</code> properties can store beside a value, have three special attributes (so-called “flags”).</p>
<ul>
<li><code>writable</code>- if <code>true</code>, the value can be changed, otherwise it’s read-only.</li>
<li><code>enumerable</code>- if <code>true</code>, then listed in loops, otherwise not listed.</li>
<li><code>configurable</code>- if <code>true</code>, the property can be deleted and these attributes can be modified, otherwise not.</li>
</ul>
</li>
<li>
<p>With #<code>getOwnPropertyDescriptor</code> you can also show object flags.</p>
<pre><code class="language-jsx">let user = {
    name: &quot;John&quot;
}

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;John&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: true
}
*/

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;).writable);
// true
</code></pre>
</li>
<li>
<p>To change the flags, we can use #<code>Object.defineProperty</code>.</p>
<ul>
<li>
<p><code>writable: false</code> value can’t be change.</p>
<pre><code class="language-jsx">let user = {
    name: &quot;John&quot;
}

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;John&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: true
}
*/

Object.defineProperty(user, &quot;name&quot;, {
    writable: false,
    value: &quot;Jonney&quot;
});

user.name = &quot;John&quot;; // Value will not change

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;Jonney&quot;,
  &quot;writable&quot;: false,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: true
}
*/
</code></pre>
</li>
<li>
<p><code>configurable: false</code> can’t be deleted.</p>
<ul>
<li>The idea of “configurable: false” is to prevent changes of property flags and its deletion, while allowing to change its value.
<ul>
<li>Can’t change <code>configurable</code> flag.</li>
<li>Can’t change <code>enumerable</code> flag.</li>
<li>Can’t change <code>writable: false</code> to <code>true</code> (the other way round works).</li>
<li>Can’t change <code>get/set</code> for an accessor property (but can assign them if absent).</li>
</ul>
</li>
</ul>
<pre><code class="language-jsx">let user = {
    name: &quot;John&quot;
}

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;John&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: true
}
*/

Object.defineProperty(user, &quot;name&quot;, {
    configurable: false,
    value: &quot;Jonney&quot;
});

delete user.name; // Value can't be deleted

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;Jonney&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: false
}
*/
</code></pre>
</li>
<li>
<p><code>enumerable: false</code> can’t use <code>for...in</code>loop &amp; <code>Object.key</code></p>
<pre><code class="language-jsx">let user = {
    name: &quot;John&quot;,
		age: 23
}

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;John&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: true
}
*/

Object.defineProperty(user, &quot;name&quot;, {
    enumerable: false,
    value: &quot;Jonney&quot;
});

for (let key in user) console.log(key);
// age --&gt; don't show name

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;Jonney&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: false,
  &quot;configurable&quot;: true
}
*/
</code></pre>
</li>
</ul>
</li>
<li>
<p>Unlike #<code>Object.defineProperty</code>the #<code>Object.defineProperties</code>can change multiple flags.</p>
<pre><code class="language-jsx">let user = { }

Object.defineProperties(user, {
	name: {value: &quot;John&quot;, writable: true},
	age: {value: 30, enumerable: true}
});

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;Jonney&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: false,
  &quot;configurable&quot;: false
}
*/
</code></pre>
</li>
<li>
<p>The #<code>Object.preventExtensions()</code> method prevents new properties from ever being added to an object.</p>
<ul>
<li>
<p>The #<code>Object.isExtensible()</code> method determines if an object is extensible.</p>
<pre><code class="language-jsx">const object1 = {};

Object.preventExtensions(object1);

console.log(Object.isExtensible(object1));
// expected output: false

Object.defineProperty(object1, 'property1', {
    value: 42
});

Object.getOwnPropertyDescriptor(object1);
// Error
</code></pre>
</li>
</ul>
</li>
<li>
<p>The #<code>Object.freeze()</code> forbids adding/removing/changing of properties. Sets configurable: false, writable: false for all existing properties.</p>
<ul>
<li>
<p>The #<code>Object.isFrozen()</code> determines if an object is frozen.</p>
<pre><code class="language-jsx">const obj = {
  prop: 42
};

Object.freeze(obj);

console.log(Object.isFrozen(obj));
// true

obj.prop = 33;
// Throws an error in strict mode

console.log(obj.prop);
// expected output: 42
</code></pre>
</li>
</ul>
</li>
<li>
<p>The #<code>Object.seal()</code> method seals an object, preventing new properties from being added to it and marking all existing properties as <code>configurable: false</code>. You can’t delete the value.</p>
<ul>
<li>
<p>The #<code>Object.isSealed()</code> method determines if an object is sealed.</p>
<pre><code class="language-jsx">const object1 = {
  property1: 42
};

Object.seal(object1);

console.log(Object.isSealed(object1));

object1.property1 = 33;
console.log(object1.property1);
// expected output: 33

delete object1.property1; // cannot delete when sealed
console.log(object1.property1);
// expected output: 33
</code></pre>
</li>
</ul>
</li>
<li>
<p>#<code>Object.prototype.constructor</code></p>
<ul>
<li>
<p>#<code>constructor</code>shows the variable property match.</p>
<pre><code class="language-jsx">let o = {};
console.log(o.constructor === Object);
// true

let a = [];
console.log(a.constructor === Array);
// true

let n = new Number;
console.log(n.constructor === Number);
// true

let s = new String;
console.log(s.constructor === String);
// true
</code></pre>
</li>
<li>
<p>Create 2nd object using function to object.</p>
<pre><code class="language-jsx">function Rabbit(name) {
    this.name = name;
}

let rabbit = new Rabbit(&quot;Mik Bunney&quot;);

console.log(rabbit.name);

let newRabbit = new rabbit.constructor(&quot;Mik Bunney&quot;);

newRabbit.name
</code></pre>
</li>
</ul>
</li>
<li>
<p>#<code>F.prototype</code>and #<code>prototype</code></p>
<ul>
<li>
<p>Use <code>F.prototype</code>to connect <code>Object</code>to <code>function</code> adds value top of <code>function</code> value.</p>
<pre><code class="language-jsx">function username(name, surname) {
    this.name = name;
    this.surname = surname;
}

let age = {
	dob: &quot;18-09-2020&quot;
}

username.prototype = age;

let person = new username(&quot;Joney&quot;, &quot;Deepth&quot;);

console.log(`Name: ${person.name} ${person.surname}, DOB: ${person.dob}`);
</code></pre>
</li>
<li>
<p>Add <code>this</code>value to function without adding value in brackets(<code>{}</code>).</p>
<pre><code class="language-jsx">function Rabbit() {};

Rabbit.prototype.age = 20;

let rabbit = new Rabbit();

console.log(rabbit.age);
// 20
</code></pre>
</li>
<li>
<p>Make <code>.function</code>with prototype.</p>
<pre><code class="language-jsx">function f() {
	console.log(&quot;Hello&quot;);
}

Function.prototype.disc = function(number) {
	console.log(setTimeout(this, number));
}

console.log(f.disc(1000));
</code></pre>
</li>
<li>
<p>Make multi-layer brackets.</p>
<pre><code class="language-jsx">function f(word) {
console.log(word);
}

Function.prototype.disc = function(number) {
let f = this;
return function(word) {
console.log(setTimeout(() =&gt; f(word), number));
}
}
</code></pre>
</li>
</ul>
</li>
<li>
<p>The #<code>Object.create()</code> method creates a new object, using an existing object as the prototype of the newly created object.</p>
<pre><code class="language-jsx">let person = {
	isHuman: true,
	printInformation() {
		if(!this.isHuman) {
			console.log(&quot;You are not Human :(&quot;);
		}
	}
}

console.log(person.printInformation());

let me = Object.create(person);

me.isHuman = false;

console.log(me.printInformation());
// You are not Human :(
</code></pre>
</li>
<li>
<p>The #<code>Object.getPrototypeOf()</code> method returns the prototype of the specified object.</p>
<pre><code class="language-jsx">let person1 = {};

let person2 = Object.create(person1);

console.log(Object.getPrototypeOf(person2) === person1);
// true

console.log(person2 === person1);
// false
</code></pre>
</li>
<li>
<p>The #<code>Object.setPrototypeOf()</code>is same as <code>Object.create()</code>.</p>
<pre><code class="language-jsx">let animal = {
    eat: true,
    sleep: true
}

let animal2 = {
    eat: false
}

let rabbit = Object.create(animal);

console.log(rabbit.eat);
// true

Object.setPrototypeOf(rabbit, animal2);

console.log(rabbit.eat);
// false

console.log(rabbit.sleep);
// undefine
</code></pre>
</li>
<li>
<p>Show the <code>Object</code>information.</p>
<ul>
<li>
<p>Returns property name.</p>
<ul>
<li>
<p>#<code>Object.keys</code></p>
<pre><code class="language-jsx">const object1 = {
  a: 'somestring',
  b: 42,
  c: false
};

console.log(Object.keys(object1));
// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
</code></pre>
</li>
<li>
<p>#<code>Object.getOwnPropertyNames()</code></p>
<pre><code class="language-jsx">const object1 = {
  a: 1,
  b: 2,
  c: 3
};

console.log(Object.getOwnPropertyNames(object1));
// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
</code></pre>
</li>
</ul>
</li>
<li>
<p>#<code>Object.values</code>returns property value.</p>
<pre><code class="language-jsx">const object1 = {
  a: 'somestring',
  b: 42,
  c: false
};

console.log(Object.values(object1));
// expected output: Array [&quot;somestring&quot;, 42, false]
</code></pre>
</li>
<li>
<p><code>Object.entries()</code>returns both property name &amp; value.</p>
<pre><code class="language-jsx">const object1 = {
  a: 'somestring',
  b: 42
};

for (const [key, value] of Object.entries(object1)) {
  console.log(`${key}: ${value}`);
}

// expected output:
// &quot;a: somestring&quot;
// &quot;b: 42&quot;
// order is not guaranteed
</code></pre>
</li>
</ul>
</li>
<li>
<p>The #<code>Object.getOwnPropertySymbols()</code> method returns an array of all symbol properties found directly upon a given object.</p>
<pre><code class="language-jsx">const object1 = {};
const a = Symbol('a');
const b = Symbol.for('b');

object1[a] = 'localSymbol';
object1[b] = 'globalSymbol';

const objectSymbols = Object.getOwnPropertySymbols(object1);

console.log(objectSymbols.length);
// expected output: 2
</code></pre>
</li>
<li>
<p>The static #<code>Reflect.ownKeys()</code> method returns an array of the target object’s own property keys.</p>
<pre><code class="language-jsx">const object1 = {
  property1: 42,
  property2: 13
};

const array1 = [];

console.log(Reflect.ownKeys(object1));
// expected output: Array [&quot;property1&quot;, &quot;property2&quot;]

console.log(Reflect.ownKeys(array1));
// expected output: Array [&quot;length&quot;]
</code></pre>
</li>
<li>
<p>#<code>obj.hasOwnProperty()</code> returns <code>true</code> if <code>Object</code> has its own (not inherited) key named key.</p>
<pre><code class="language-jsx">const object1 = {};
object1.property1 = 42;

console.log(object1.hasOwnProperty('property1'));
// expected output: true

console.log(object1.hasOwnProperty('toString'));
// expected output: false

console.log(object1.hasOwnProperty('hasOwnProperty'));
// expected output: false
</code></pre>
</li>
<li>
<p>#<code>Object.assign()</code> copy all the value from two object and transfers into one.</p>
<pre><code class="language-jsx">let object1 = { a: 1, b: 2 };
let object2 = { b: 2, c: 3 };

let superObj = Object.assign(object1, object2);

console.log(object1);
// {a: 1, b: 2, c: 3}

console.log(object2);
// {b: 2, c: 3}

console.log(superObj);
// {a: 1, b: 2, c: 3}
</code></pre>
</li>
<li>
<p><code>Object.fromEntries</code> Object from Map.</p>
<pre><code class="language-jsx">let recipeMap = new Map([
  ['cucumber', 500],
  ['tomatoes', 350],
  ['onion',    50]
]);
let prices = Object.fromEntries(recipeMap);
console.log(prices.onion);
// 50
</code></pre>
</li>
</ul>
<h2>Map</h2>
<ul>
<li>
<p>Basics with <code>Map()</code>, <code>has()</code>, <code>get()</code>, &amp; <code>set()</code></p>
<pre><code class="language-jsx">let recipeMap = new Map([
  ['cucumber', 500],
  ['tomatoes', 350],
  ['onion',    50]
]);
recipeMap.set('garilica',    60)
		 .set('others', 100);
console.log(recipeMap.has('others'));
// true
console.log(recipeMap.get('onion'));
// 50
</code></pre>
</li>
<li>
<p>Run <code>Map()</code> iterator with <code>keys()</code>, <code>value()</code> &amp; <code>entries()</code></p>
<pre><code class="language-jsx">let recipeMap = new Map([
  ['cucumber', 500],
  ['tomatoes', 350],
  ['onion',    50]
]);
let recipeEntries = recipeMap.entries();
console.log(recipeEntries.next().value);
// [&quot;cucumber&quot;, 500]
console.log(recipeEntries.next().value);
// [&quot;tomatoes&quot;, 350]
let recipeValue = recipeMap.value();
console.log(recipeValue.next().value);
// 500
let recipeKeys = recipeMap.keys();
console.log(recipeKeys.next().value);
// &quot;cucumber&quot;
</code></pre>
</li>
<li>
<p>Delete the <code>Map()</code> entries with <code>delete()</code> &amp; <code>clear()</code>.</p>
<pre><code class="language-jsx">let recipeMap = new Map([
  ['cucumber', 500],
  ['tomatoes', 350],
  ['onion',    50]
]);
recipeMap.delete()
console.log(recipeMap.size);
// 2
recipeMap.clear()
console.log(recipeMap.size);
// 0
</code></pre>
</li>
<li>
<p>Length of <code>Map()</code> with <code>size</code>.</p>
<pre><code class="language-jsx">let recipeMap = new Map([
  ['cucumber', 500],
  ['tomatoes', 350],
  ['onion',    50]
]);
console.log(recipeMap.size);
// 3
</code></pre>
</li>
<li>
<p>Random Number with <code>Math.random()</code></p>
<pre><code class="language-jsx">// With ceil
for (let i = 0; i &lt; 9; i = Math.ceil(Math.random() * 10)) {
    console.log(i);
}
// With floor (only goes to 0 to 9)
for (let i = 0; i &lt; 9; i = Math.floor(Math.random() * 10)) {
    console.log(i);
}
</code></pre>
</li>
</ul>
<h2>Math</h2>
<ul>
<li>
<p><code>Math</code> is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.</p>
<p><a href="/notes/The%20JavaScript%20language%20dda21ff2e0dc4987a0af85b5e6efb600/Math%20d81dc67853fc4521a32f51d9ff504b89.csv">Math</a></p>
</li>
</ul>
<h2>Number</h2>
<ul>
<li>
<p>Fixed the Float number <code>toFixed()</code></p>
<pre><code class="language-jsx">let n = 1.23456;
alert( n.toFixed(2) ); // 1.23
</code></pre>
</li>
</ul>
<h2>String</h2>
<ul>
<li>
<p>Escape notation</p>
<ul>
<li><code>\n</code>New line</li>
<li><code>\r</code>Carriage return: not used alone. Windows text files use a combination of two characters \r\n to represent a line break.</li>
<li><code>\', \&quot;</code>Quotes</li>
<li><code>\\</code>Backslash</li>
<li><code>\t</code>Tab</li>
<li><code>\b, \f, \v</code> Backspace, Form Feed, Vertical Tab – kept for compatibility, not used nowadays.</li>
<li><code>\xXX</code>Unicode character with the given hexadecimal Unicode XX, e.g. ‘\x7A’ is the same as ‘z’.</li>
<li><code>\uXXXX</code>A Unicode symbol with the hex code XXXX in UTF-16 encoding, for instance \u00A9 – is a Unicode for the copyright symbol :copyright:. It must be exactly 4 hex digits.</li>
<li><code>\u{X…XXXXXX}</code> <strong>(1 to 6 hex characters)</strong> A Unicode symbol with the given UTF-32 encoding. Some rare characters are encoded with two Unicode symbols, taking 4 bytes. This way we can insert long codes.</li>
</ul>
</li>
<li>
<p><code>padStart</code> and takes the desired length and padding character as arguments.</p>
<pre><code class="language-jsx">console.log(String(6).padStart(3, &quot;0&quot;));
// → 006
</code></pre>
</li>
<li>
<p>Make Array a String with <code>toString</code>.</p>
<pre><code class="language-jsx">console.log([1, 2].toString());
// 1,2
</code></pre>
</li>
<li>
<p>Search for a specific value with <code>lastIndexOf</code> &amp; <code>indexOf</code></p>
<pre><code class="language-jsx">let num = [1, 2, 3, 2, 1];
console.log(num.indexOf(2));
// 1
console.log(num.lastIndexOf(1));
// 4
console.log(&quot;coconut&quot;.indexOf(&quot;co&quot;));
// 0
console.log(&quot;coconut&quot;.indexOf(&quot;co&quot;, 1))
// 3
</code></pre>
</li>
<li>
<p>Split the string with <code>split</code>.</p>
<pre><code class="language-jsx">let sentence = &quot;Secretarybirds.specialize.in.stomping&quot;;
let words = sentence.split(&quot;.&quot;);
console.log(words);
// → [&quot;Secretarybirds&quot;, &quot;specialize&quot;, &quot;in&quot;, &quot;stomping&quot;]
console.log(words.join(&quot;. &quot;));
// → Secretarybirds. specialize. in. stomping
</code></pre>
</li>
<li>
<p>Upper and Lowercase with <code>toUpperCase()</code> &amp; <code>toLowerCase</code>.</p>
<pre><code class="language-jsx">let word = &quot;This is Upper Case&quot;;
console.log(word.toUpperCase());
// THIS IS UPPER CASE
let word = &quot;This is Lower Case&quot;;
console.log(word.toLowerCase());
// this is lower case
</code></pre>
</li>
<li>
<p>Remove whitespace with <code>trim</code>.</p>
<pre><code class="language-jsx">console.log(&quot;  okay \n &quot;.trim());
// → okay
</code></pre>
</li>
<li>
<p>Repeated with <code>repeat</code></p>
<pre><code class="language-jsx">console.log(&quot;/&quot; + &quot;*&quot;.repeat(10) + &quot;\n&quot; + &quot;@Gii\n&quot; + &quot;*&quot;.repeat(10) + &quot;/&quot;);
/**********
@Gii
**********/
</code></pre>
</li>
<li>
<p>To get a character at position with <code>charAt()</code></p>
<pre><code class="language-jsx">let str = &quot;hello&quot;
console.log(str[1]);
// 1
console.log(str.charAt(1));
// 1
</code></pre>
</li>
<li>
<p>Check if it contains the string in start and end with <code>startWith()</code> &amp; <code>endWith()</code>.</p>
<pre><code class="language-jsx">alert( &quot;Widget&quot;.startsWith(&quot;Wid&quot;) );
// true
alert( &quot;Widget&quot;.endsWith(&quot;get&quot;) );
// true
</code></pre>
</li>
<li>
<p>Checks every array with <code>every()</code>.</p>
<pre><code class="language-jsx">const formula = n =&gt; n % 2 === 0;
[2, 4, 6, 8, 10].every(formula);
// true
[2, 3, 6, 8, 10].every(formula);
// false
</code></pre>
</li>
<li>
<p>Change value of array with <code>splice()</code>.</p>
<pre><code class="language-jsx">const meetingWords = [&quot;hi&quot;, &quot;hello&quot;, &quot;whats up&quot;, &quot;how are you&quot;];
const newMeetingWords = [&quot;ohh hello&quot;, &quot;nice to meet you&quot;]
meetingWords.splice(1, 2, newMeetingWords);
console.log(meetingWords);
// [&quot;hi&quot;, [&quot;ohh hello&quot;, &quot;nice to meet you&quot;], &quot;how are you&quot;]
</code></pre>
</li>
<li>
<p>Combine array in the array with <code>flat()</code>.</p>
<pre><code class="language-jsx">onst meetingWords = [&quot;hi&quot;, [&quot;ohh hello&quot;, &quot;nice to meet you&quot;], &quot;how are you&quot;];
console.log(meetingWords.flat());
// [&quot;hi&quot;, &quot;ohh hello&quot;, &quot;nice to meet you&quot;, &quot;how are you&quot;]
</code></pre>
</li>
<li>
<p>Manipulate Arrays with <code>push()</code> &amp; <code>pop()</code>.</p>
<pre><code class="language-jsx">let num = [1, 2, 3];
num.push(4);
// Adds 4 in last in seqnce
console.log(num);
// [1, 2, 3, 4]
console.log(num.pop()); // Delete's the 4 for seqnce
// 4
console.log(num);
// [1, 2, 3]
</code></pre>
</li>
<li>
<p>Changes all elements in an array to a static value with <code>fill()</code>.</p>
<pre><code class="language-jsx">const array1 = [1, 2, 3, 4];
const i = array1.indexOf(2);
console.log(array1.fill(&quot;hi&quot;, i));
// [1, &quot;hi&quot;, &quot;hi&quot;, &quot;hi&quot;]
console.log(array1.fill(&quot;hi&quot;, i, i+1));
// [1, &quot;hi&quot;, 3, 4]
</code></pre>
<h3><code>forEach()</code> inline loop</h3>
<pre><code class="language-js">[&quot;A&quot;, &quot;B&quot;].forEach(l =&gt; console.log(l));
// A
// B
</code></pre>
</li>
<li>
<p><code>filter()</code> to <code>if()</code> in inline.</p>
<pre><code class="language-jsx">const numArray = [1, 2, 3, 4, 5];
console.log(numArray.filter(n =&gt; n%2 === 0));
// [2, 4]
</code></pre>
</li>
<li>
<p><code>map()</code> creates a new array.</p>
<pre><code class="language-jsx">const array1 = [1, 4, 9, 16];
const map1 = array1.map(x =&gt; x * 2);
console.log(map1);
// Array [2, 8, 18, 32]
</code></pre>
</li>
<li>
<p><code>some()</code> to find <code>true</code> &amp; <code>false</code>.</p>
<pre><code class="language-jsx">const array = [1, 2, 3, 4, 5];
console.log(array.some(l =&gt; l % 2 == 0));
// true
</code></pre>
</li>
<li>
<p>Shallow copies part of an array to another location <code>copyWithin()</code>.</p>
<pre><code class="language-jsx">const array1 = ['a', 'b', 'c', 'd', 'e'];
console.log(array1.copyWithin(0, 3, 4));
// [&quot;d&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]
// copy to index 1 all elements from index 3 to the end
console.log(array1.copyWithin(1, 3));
// [&quot;d&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;e&quot;]
</code></pre>
</li>
<li>
<p>Inline calculation <code>reduce()</code>.</p>
<pre><code class="language-jsx">const array1 = [1, 2, 3, 4];
const reducer = (a, b) =&gt; a + b;
console.log(array1.reduce(reducer));
// 10
console.log(array1.reduce(reducer, 5));
// 15
</code></pre>
</li>
<li>
<p>Combine value with <code>concat()</code>.</p>
<pre><code class="language-jsx">let arrays = [[1, 2, 3], [4, 5], [6]];
console.log(arrays.reduce((a, b) =&gt; a.concat(b)))
// [1, 2, 3, 4, 5, 6]
</code></pre>
</li>
</ul>
<h2>Global Object</h2>
<ul>
<li>
<p>The <code>WeakSet</code> object lets you store weakly held objects in a collection.</p>
<pre><code class="language-jsx">// WeakSet
let visitedSet = new WeakSet();
let john = { name: &quot;John&quot; };
visitedSet.add(john);
console.log(visitedSet.has(john));
// true
john = null;
console.log(visitedSet.has(john));
// fase
// Set
visitedSet = new Set();
visitedSet.add(john);
john = { name: &quot;John&quot; };
console.log(visitedSet.has(john));
// true
john = null;
console.log(visitedSet.has(john));
// true
</code></pre>
</li>
<li>
<p>The <code>WeakMap</code> object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.</p>
<pre><code class="language-jsx">// :file_folder: cache.js
let cache = new Map();
// calculate and remember the result
function process(obj) {
  if (!cache.has(obj)) {
    let result = /* calculations of the result for */ obj;
    cache.set(obj, result);
  }
  return cache.get(obj);
}
// Now we use process() in another file:
// :file_folder: main.js
let obj = {/* let's say we have an object */};
let result1 = process(obj); // calculated
// ...later, from another place of the code...
let result2 = process(obj); // remembered result taken from cache
// ...later, when the object is not needed any more:
obj = null;
alert(cache.size); // 1 (Ouch! The object is still in cache, taking memory!)
</code></pre>
</li>
<li>
<p>Convert string into number with <code>parseInt</code>.</p>
<pre><code class="language-jsx">function input(value) {
	let valueInt = parseInt(value);
	return valueInt * 2;
}
console.log(input(3));
// 6
</code></pre>
</li>
</ul>
<h2>Symbol</h2>
<ul>
<li>
<p>Symbol into Method.</p>
<pre><code class="language-jsx">let sym = Symbol(&quot;123&quot;);
let met = {
	[sym]() {return &quot;This is Symbol&quot;}
}
console.log(met[sym]());
</code></pre>
</li>
<li>
<p>Global symbols with <code>Symbol.for()</code>.</p>
<pre><code class="language-jsx">let id = Symbol.for(&quot;id&quot;);
let idAgain = Symbol.for(&quot;id&quot;);
console.log( id === idAgain );
// true
</code></pre>
</li>
<li>
<p>Global symbol key with <code>Symbol.keyFor()</code>.</p>
<pre><code class="language-jsx">et id = Symbol.for(&quot;id&quot;);
console.log( Symbol.keyFor(id));
// id
</code></pre>
</li>
<li>
<p>The iterator interface in <code>Symbol.iterator()</code></p>
<pre><code class="language-jsx">let word = &quot;in&quot;;
let ite = word[Symbol.iterator]();
console.log(ite.next());
// {value: &quot;i&quot;, done: false}
console.log(ite.next().value);
// n
console.log(ite.next());
// {value: undefined, done: true}
console.log(ite.next().done);
// true
let array = [&quot;inside&quot;, &quot;outside&quot;];
ite = array[Symbol.iterator]();
console.log(ite.next().value);
// inside
</code></pre>
</li>
</ul>
<h2>Error</h2>
<ul>
<li>
<p>Extending Error</p>
<pre><code class="language-jsx">class TrueError extends Error {
    constructor(name, message) {
        super(message);
        this.name = name;
    }
}

try {
    test();
} catch(err) {
    if ( err instanceof TrueError) {
        console.log( err.name );
    }
    if ( err instanceof Error ) {
        console.log( err.message );
    }
} finally {
    console.log(&quot;Runed&quot;);
}

// TrueError
// Not a real error.
// Runed
</code></pre>
</li>
<li>
<p>❓Extending Error can <code>extends</code>other error also</p>
<pre><code class="language-jsx">class FormatError extends SyntaxError {
    constructor(message) {
        super(message);
        this.name = &quot;FormatError&quot;;
        this.stack = &quot;Stack&quot;;
    }
}

let err = new FormatError(&quot;Formatting error&quot;);

alert( err.message ); // Formatting error
alert( err.name ); // FormatError
alert( err.stack ); // stack

alert( err instanceof FormatError ); // true
alert( err instanceof SyntaxError ); // true (because inherits from SyntaxError)
</code></pre>
</li>
<li>
<p>Error with <code>if...else</code></p>
<pre><code class="language-jsx">try {
    NotDefine();
} catch(err) {
    console.log( err.name === &quot;ReferenceError&quot; );
}

// true
</code></pre>
</li>
</ul>
<h1>Class</h1>
<ul>
<li>
<p>What class <code>User {...}</code> construct really does is:</p>
<ol>
<li>Creates a function named <code>User</code>, that becomes the result of the class declaration. The function code is taken from the <code>constructor</code> method (assumed empty if we don’t write such method).</li>
<li>Stores class methods, such as <code>sayHi</code>, in <code>User.prototype</code>.</li>
</ol>
<pre><code class="language-jsx">class User{
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
    userInfo() {
        console.log(`Name: ${this.name}\n Age: ${this.age}`);
    }
}

let jone = new User(&quot;Jone Funzo&quot;, 30);

console.log(jone.age);
// 30

console.log(jone.userInfo());
// Name: Jone Funzo
 Age: 30
</code></pre>
</li>
<li>
<p>Just like functions, classes can be defined inside another variable expression, passed around, returned, assigned, etc.</p>
<pre><code class="language-jsx">const Use = class {
    constructor(name) {
        this.name = name;
    }
    sayHi() {
        console.log(this.name);
    }
}

let use = new Use(&quot;Jonney&quot;);

use.sayHi()
// Jonney
</code></pre>
</li>
<li>
<p>Class with also having function expression with it.</p>
<pre><code class="language-jsx">class User {
    constructor(name) {
        this.name = name;
    }
    sayHi(age) {
        console.log(this.name + ' ' + age);
    }
}

let me = new User(&quot;James&quot;);

console.log(me.sayHi(32));
// James 32
</code></pre>
</li>
<li>
<p>Function with <code>class</code> inside it.</p>
<pre><code class="language-jsx">function makeClass(word) {
	return class {
		sayHi() {
		console.log(word);
		}
	}
}

let hello = new makeClass(&quot;How are you?&quot;);

hello().sayHi();
// How are you?
</code></pre>
</li>
<li>
<p>#<code>getter</code> &amp; #<code>setter</code>in the class.</p>
<pre><code class="language-jsx">class User {
    constructor(name) {
        this.name = name;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        if (value &gt; 4) {
            return &quot;Too short name!&quot;;
        }
        this._name = value;
    }
}

let user = new User(&quot;Jone&quot;);

user.name
</code></pre>
</li>
<li>
<p>Using <code>class</code>without <code>constructor</code>.</p>
<pre><code class="language-jsx">class User {
	name = &quot;Joey&quot;;
	age = 32;

	info() {
		console.log(`${this.name} age is ${this.age}`);
	}
}

let joey = new User;

console.log(joey.name);
// Joey

console.log(joey.info());
// Joey age is 32
</code></pre>
</li>
<li>
<p>#<code>extents</code>information.</p>
<ul>
<li>
<p><code>extents</code>to connect two classes together.</p>
<pre><code class="language-jsx">class Animal {
    constructor(name) {
        this.name = name;
    }
    walk() {
        console.log(`${this.name} can walk.`);
    }
}

class Birds extends Animal {
    fly() {
        console.log(`${this.name} can fly`);
    }
}

let lion = new Animal(&quot;Lion&quot;);
console.log(lion.walk());
// Lion can walk
// console.log(lion.fly()); woldn't run
// Error

let pigions = new Birds(&quot;Pigions&quot;);
console.log(pigions.walk());
// Pigions can walk
console.log(pigions.fly());
// Pigions can fly
</code></pre>
</li>
<li>
<p>#<code>super.variable</code>shows the <code>extents</code>prenat variable result.</p>
<ul>
<li><code>super</code>don’t work with arrow function(<code>⇒</code>).</li>
</ul>
<pre><code class="language-jsx">class Animal {
    constructor(name) {
        this.name = name;
    }
    place() {
        return `Londan`;
    }
}

class Rabbit extends Animal {
    place() {
        return `Londan`;
    }
    travel() {
        console.log(`${this.place()} to ${super.place()}`);
    }
}

let rabbit = new Rabbit(&quot;Jonney&quot;);

rabbit.travel();
</code></pre>
</li>
<li>
<p><code>extents</code> connect with <code>super()</code>to bypass parental <code>constructor</code>.</p>
<pre><code class="language-jsx">class Animal {
    constructor(name) {
        this.speed = 0;
        this.name = name;
    }
}

class Reddit extends Animal {
    constructor(name, age) {
        super(name);
        this.age = age;
    }
    run() {
        console.log(`That ${this.name} is ${this.age} age and running.`);
    }
}

let reddit = new Reddit(&quot;White Rabbit&quot;, 23);

reddit.run()
// That White Rabbit is 23 age and running.
</code></pre>
</li>
</ul>
</li>
<li>
<p>Private properties and methods to secure the overwriting.</p>
<pre><code class="language-jsx">class Cla {
    #private = 0;

    #privateMessage() {
        console.log(&quot;You unlock it WoW.&quot;);
    }

    lockMessage() {
        console.log(this.#privateMessage());
    }
}

let cla = new Cla;

cla.lockMessage();
// You unlock it WoW.

console.log(cla.private);
// Error

console.log(cla.privateMessage());
// Erro
</code></pre>
</li>
<li>
<p>Classes with built-in classes.</p>
<pre><code class="language-jsx">class PowerArray extends Array {
    number = 20;

    add() {
        return 2 + 2;
    }
}

let powerArray = new PowerArray(1, 2, 3, 4);

console.log(powerArray.length);
// 4

console.log(powerArray.number);
// 20

console.log(powerArray.add());
// 4
</code></pre>
</li>
<li>
<p>Make the mixin with object and use with class.</p>
<pre><code class="language-jsx">// Mixin
let myMixin = {
	sayUser(name) {
		console.log(`${name} is ${this.age} years old.`);
	}
}

class Jonney {
	age = 32;
	test = true;
}

Object.assign(Jonney.prototype, myMixin);

let jonney = new Jonney();

jonney.sayUser(&quot;Jonney&quot;);
// Jonney
console.log(jonney.test);
// true
</code></pre>
</li>
<li>
<p><code>static</code>methods are called directly on the class without creating an instance/object of the class.</p>
<pre><code class="language-jsx">class Car {
	static myCars(name) {
		console.log(name);
	}
	static NumCars = 3;
}

console.log(Car.NumCars = 4);
// 4

Car.myCars(&quot;Ford&quot;);
</code></pre>
</li>
<li>
<p>#<code>Symbol.hasInstance</code>is well-known symbol is used to determine if a constructor object recognizes an object as its instance.</p>
<pre><code class="language-jsx">class TrueOr {
    static [Symbol.hasInstance](obj) {
        return true;
    }
}

obj = {
    eat: false
}

console.log(obj instanceof TrueOr);
// true

console.log(Array instanceof TrueOr);
// true

class TrueOr {
    static [Symbol.hasInstance](obj) {
        if(obj.eat) return true; // changed
    }
}

cosnole.log(obj instanceof TrueOr);
// true
</code></pre>
</li>
</ul>
<h1>Expressions and operators</h1>
<ul>
<li>
<p>The #<code>new</code> syntax</p>
<ul>
<li>
<p>The function is created with the arguments <code>arg1...argN</code> and the given function Body.</p>
<pre><code class="language-jsx">let sum = new Function('a', 'b', 'return a + b');

alert( sum(1, 2) ); // 3
</code></pre>
</li>
<li>
<p>When a function is created using a new Function, its <code>[[Environment]]</code> is set to reference not the current Lexical Environment, but the global one.</p>
<pre><code class="language-jsx">function getFunc() {
  let value = &quot;test&quot;;

  let func = new Function('alert(value)');

  return func;
}

getFunc()(); // error: value is not defined
</code></pre>
</li>
<li>
<p>Turn <code>function</code> into <code>Object</code>.</p>
<pre><code class="language-jsx">function User(name, age) {
	this.name = name;
	this.age = age;
}

let ravi = new User(&quot;Ravi Sharma&quot;, 25);

console.log(ravi.name);
// Ravi Sharma
</code></pre>
</li>
</ul>
</li>
<li>
<p>#<code>instanceof</code>check whether an object belongs to a certain class or not.</p>
<pre><code class="language-jsx">console.log([] instanceof Array);
// true

console.log({} instanceof Symbol);
// false

console.log(Array instanceof Object);
// true
</code></pre>
</li>
<li>
<p>Change the location of function with <code>this</code> &amp; <code>call</code>.</p>
<pre><code class="language-jsx">function speak(line) {
  console.log(`The ${this.type} rabbit says '${line}'`);
}
let hungryRabbit = {type: &quot;hungry&quot;, speak};
hungryRabbit.speak(&quot;I could use a carrot right now.&quot;);
// The hungry rabbit says 'I could use a carrot right now.'
speak.call(hungryRabbit, &quot;Burp!&quot;);
// → The hungry rabbit says 'Burp!'
</code></pre>
</li>
<li>
<p>Optional chaining with <code>?.</code></p>
<pre><code class="language-jsx">const user = {
	name = &quot;aav&quot;;
}
console.log(user?.name);
// aav
console.log(user?.age);
// undefine
</code></pre>
</li>
<li>
<p>Converts number-string to number with <code>+</code></p>
<pre><code class="language-jsx">console.log(+true);
// 1
console.log(+false);
// 0
let x = &quot;1&quot;, y = &quot;2&quot;;
console.log(x + y);
// 12
console.log(+x + +y);
// 3
</code></pre>
</li>
<li>
<p><code>~</code> Adds +1 in the number.</p>
<pre><code class="language-jsx">console.log(~1);
// 2
</code></pre>
</li>
</ul>
<h1>Statements and declarations</h1>
<ul>
<li>
<p><code>import</code> &amp; <code>export</code></p>
<ul>
<li>
<p>Module import with <code>require()</code></p>
<pre><code class="language-jsx">// sayHi.js
function sayHi(user) {
	return `Hello ${user}`;
}

module.exports = { sayHi };
</code></pre>
<pre><code class="language-jsx">// main.js

let hi = require('./say');

console.log(hi.sayHi(&quot;AAV&quot;));
</code></pre>
</li>
<li>
<p>Normal module</p>
<pre><code class="language-jsx">// 📁 sayHi.js
export function sayHi(user) {
  alert(`Hello, ${user}!`);
}
</code></pre>
<pre><code class="language-jsx">// 📁 main.js
import {sayHi} from './sayHi.js';

alert(sayHi); // function...
sayHi('John'); // Hello, John!
</code></pre>
</li>
<li>
<p>HTML file Module</p>
<pre><code class="language-jsx">// main.js

export function sayHi(user) {
	return `Hello ${user}`;
}
</code></pre>
<pre><code class="language-html">&lt;!Doctype HTML&gt;
&lt;body&gt;
	&lt;script type=&quot;module&quot;&gt;
		import { sayHi } from './main.js'

		document.body.innerHTML = sayHi(&quot;AAV&quot;);
	&lt;/script&gt;
&lt;/body&gt;
</code></pre>
</li>
<li>
<p>if a module script is fetched from another origin, the remote server must supply a header <code>Access-Control-Allow-Origin</code> allowing the fetch.</p>
</li>
<li>
<p>The <code>import.meta</code> object exposes context-specific metadata to a JavaScript module. It contains information about the module.</p>
<pre><code class="language-html">&lt;!--index.html--&gt;

&lt;script type=&quot;module&quot; src=&quot;my-module.js&quot;&gt;&lt;/script&gt;
</code></pre>
<pre><code class="language-jsx">// my-module.js

console.log(import.meta);
</code></pre>
</li>
<li>
<p><code>import.meta.url</code> for showing URL.</p>
<pre><code class="language-html">&lt;script type=&quot;module&quot;&gt;
  alert(import.meta.url); // script url (url of the html page for an inline script)
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>export</code>and <code>import</code>multipule module.</p>
<pre><code class="language-jsx">// export.js

function sayHi(name) {
	console.log(`Hello ${name}`);
}

let days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

let user = {
	name: 'Peater Sons',
	year: 2003
}

export { sayHi, days, user }
</code></pre>
<pre><code class="language-jsx">// import.js

import { sayHi, days, user } from './export.js';

sayHi(user.name);

console.log(`This is ${days[3]}day of the month.`)
</code></pre>
</li>
<li>
<p><code>import *</code> for importing as object <strong>Note</strong>: This is preferred method to import the module.</p>
<pre><code class="language-jsx">// export.js

function sayHi(name) {
	console.log(`Hello ${name}`);
}

let days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

let user = {
	name: 'Peater Sons',
	year: 2003
}

export { sayHi, days, user }
</code></pre>
<pre><code class="language-jsx">// import.js

import * as data from './export.js';

data.sayHi(data.user.name);

console.log(`This is ${data.days[3]}day of the month.`);
</code></pre>
</li>
<li>
<p><strong>Note</strong>: To avoid that and keep the code consistent, there’s a rule that imported variables should correspond to file names.</p>
<pre><code class="language-jsx">import User from './user.js';
import LoginForm from './loginForm.js';
import func from '/path/to/func.js';
</code></pre>
</li>
<li>
<p>Change name with <code>as</code></p>
<pre><code class="language-jsx">// export.js

export class User {
	constructor(name) {
		this.name = name;
	}
}

export function sayHi(user) {
	console.log(`Hello, ${user}!`);
}
</code></pre>
<pre><code class="language-jsx">// import.js

import { User as user, sayHi as hi } from './export.js';

let id = new user('John');

hi(id.name);
</code></pre>
</li>
<li>
<p><code>import</code> anywhere in the script with Dynamic imports</p>
<pre><code class="language-jsx">// export.js

function hello() {
	console.log(`Hello`);
}

function bye() {
	console.log(`Bye`);
}

export { hello, bye };
</code></pre>
<pre><code class="language-jsx">// import .js

let { hello, bye } = await import('./export.js');

hello();
bye();
</code></pre>
</li>
</ul>
</li>
<li>
<p>Generator functions with <code>function*</code> &amp; <code>yield</code></p>
<ul>
<li>
<p>How to Generator looks?</p>
<pre><code class="language-jsx">function* generatorSequence() {
    yield 1;
    yield 2;
    return 3;
}

let generator = generatorSequence(); // Important to declare or not work

let one = generator.next();
console.log(one);
// {value: 1, done: false}

let two = generator.next();
console.log(two);
// {value: 2, done: false}

let three = generator.next();
console.log(three);
// {value: 3, done: true}
</code></pre>
</li>
<li>
<p>Generator with loop.</p>
<pre><code class="language-jsx">function* foo(index) {
    let loop = 0;
    for ( ; loop &lt; index; loop++ ) {
        yield loop;
    }
    return loop;
}

let runner = foo(3);

console.log(runner.next());
console.log(runner.next());
console.log(runner.next());
console.log(runner.next());
</code></pre>
</li>
<li>
<p>Generator with loop with <code>for...of</code></p>
<pre><code class="language-jsx">function foo(index) {

	let loop = 0;

	for ( ; loop &lt; index ; loop++ ) {
		yield loop;
	}

	return loop;
}

for ( let value of foo(5) ) {
	console.log(value);
}
/*
1
2
3
4
Don't reutrn `done: true`
*/
</code></pre>
</li>
<li>
<p>Generator with spread syntax.</p>
<pre><code class="language-jsx">function* foo(index) {

	let loop = 0;

	for ( ; loop &lt; index ; loop++ ) {
		yield loop;
	}

	return loop;
}

console.log(...foo(5));

// 0, 1, 3, 4
</code></pre>
</li>
<li>
<p>The composed generator:</p>
<pre><code class="language-jsx">function* generatePasswordCodes() {
    for ( let start = 48; start &lt;= 57; start++) yield start;
    for ( let start = 65; start &lt;= 90; start++) yield start;
    for ( let start = 97; start &lt;= 122; start++) yield start;
}

let str = ''

for ( let code of generatePasswordCodes() ) {
    str += String.fromCharCode(code);
}

console.log(str);
// 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
</code></pre>
</li>
<li>
<p>Show <code>console.log</code>first and then answer.</p>
<pre><code class="language-jsx">function* gen() {
    console.log(&quot;Slove&quot;);

    let ask1 = yield &quot;2 + 2 = ?&quot;;

    console.log(ask1);

    let ask2 = yield &quot;3 + 3 = ?&quot;;

    console.log(ask2);
}

let generator = gen();

console.log(generator.next().value);
// Slove
// 2 + 2 = ?
console.log(generator.next(4).value);
// 4
// 3 + 3 = ?
console.log(generator.next(9).done);
// 9
// true
</code></pre>
</li>
<li>
<p><code>*[Symbol.iterator]</code></p>
<pre><code class="language-jsx">let range = {
	from: 1,
	to: 5,

	*[Symbol.iterator]() {
		for( let value = this.from; value &lt;= this.to; value++ ) {
			yield value;
        }
    }
}

console.log(...range);
// 1, 2, 3, 4, 5
</code></pre>
</li>
<li>
<p><code>generator.throw</code>for Error</p>
<pre><code class="language-jsx">function* gen() {
  try {
    let result = yield &quot;2 + 2 = ?&quot;; // (1)

    alert(&quot;The execution does not reach here, because the exception is thrown above&quot;);
  } catch(e) {
    alert(e); // shows the error
  }
}

let generator = gen();

let question = generator.next().value;

generator.throw(new Error(&quot;The answer is not found in my database&quot;)); // (2)
</code></pre>
</li>
<li>
<p>Generator for random number.</p>
<pre><code class="language-jsx">function* pseudoRandom(value) {
    while(true) {
        value = value * 16807 % 2147483647;
        yield value;
    }
}

let generator = pseudoRandom(1);

alert(generator.next().value); // 16807
alert(generator.next().value); // 282475249
alert(generator.next().value); // 1622650073
</code></pre>
</li>
<li>
<p><code>async</code>Async iterable range iterable range</p>
<pre><code class="language-jsx">let range = {
	from: 1,
	to: 5,

	async *[Symbol.asyncIterator]() {
		for ( let value = this.from; value &lt;= this.to; value++ ) {
			await new Promise(reslove =&gt; setTimeout(reslove, 1000));
			yield value;
        }
	}
};

(async () =&gt; {
	for await ( let value of range ) console.log(value);
})()
/*
1
2
3
4
5
Prints ever 1s
*/
</code></pre>
</li>
</ul>
</li>
<li>
<p>#<code>await</code>&amp; <code>async</code></p>
<ul>
<li>
<p><code>async</code> a function always returns a promise.</p>
<pre><code class="language-jsx">async function f() {
    return 1;
}

f().then(message =&gt; console.log(message));
</code></pre>
</li>
<li>
<p>It can also use with <code>class</code>.</p>
<pre><code class="language-jsx">class fuc {
	async f() {
		return await Promise.resolve(1);
	}
}

new fuc()
	.f()
	.then(reslove =&gt; console.log(reslove));
</code></pre>
</li>
<li>
<p><code>await</code> makes JavaScript wait until that promise settles and returns its result.</p>
<pre><code class="language-jsx">async function f() {

    let promise = new Promise((reslove, reject) =&gt; reslove(1));

    let fun = await promise;

    return fun;
}

f().then(reslove =&gt; console.log(reslove));
// 1
</code></pre>
</li>
<li>
<p><code>await</code>can’t work without <code>async</code></p>
<pre><code class="language-jsx">function f() {
  let promise = Promise.resolve(1);
  let result = await promise; // Syntax error
}
</code></pre>
</li>
<li>
<p>Error handling</p>
<pre><code class="language-jsx">async function f() {
    let response = await fetch(&quot;https://it-is-error&quot;);
}

f().catch(console.log);
</code></pre>
</li>
<li>
<p>❓ <code>async/await</code>instad of <code>Promise</code></p>
<pre><code class="language-jsx">async function info(username, ...data_type) {

    console.log(data_type);
    let response = await fetch(`https://api.github.com/users/${username}`);
    let user = await response.json();

    if (data_type.includes(&quot;name&quot;)) console.log(`Name: ${user.name}`);
    if (data_type.includes(&quot;repo&quot;)) console.log(`Repos: ${user.public_repos}`);
    if (data_type.includes(&quot;url&quot;)) console.log(`URL: ${user.url}`);

}
</code></pre>
</li>
<li>
<p>❓ Rewrite this example code from the chapter Promises chaining using async/await instead of .then/catch.</p>
<pre><code class="language-jsx">async function loadJson(url) {
    let response = await fetch(url);
    if ( response.status == 200 ) {
        return response.json();
    } else {
        throw new Error(response.status);
    }
}

loadJson('no-such-user.json')
  .catch(alert);
</code></pre>
</li>
<li>
<p>❓ Rewrite “rethrow” with async/await</p>
<pre><code class="language-jsx">async function loadJson() {

    let name = prompt(&quot;Enter a name?&quot;);

    let response = await fetch(`https://api.github.com/users/${name}`);
    let user = await response.json()

    if (response.status == 404) {
        alert(&quot;No such user, please reenter.&quot;);
        return loadJson();
    }

    alert(`Full name: ${user.name}.`);
    return user;
}

</code></pre>
</li>
</ul>
</li>
<li>
<p><code>throw</code>catches error.</p>
<pre><code class="language-jsx">new Promise((reslove, reject) =&gt; {
	throw new SyntaxError(&quot;Nothing&quot;)
})
	.catch(error =&gt; console.log(error.name));
</code></pre>
</li>
<li>
<p>#<code>try...catch</code></p>
<ul>
<li>
<p><code>try...catch</code> that allows us to “catch” errors so the script can, instead of dying, do something more reasonable.</p>
<pre><code class="language-jsx">try {
    console.log(&quot;run&quot;);
    try {
        NotDefine();
    } catch (error) {
        console.log(&quot;Error the function is not define.&quot;);
    }
} catch (err) {
    console.log(&quot;I don't know why error is here.&quot;);
}
// run
// Error the function is not define.

</code></pre>
</li>
<li>
<p><code>try...catch</code>expression can compare with <code>instaceOf</code>.</p>
<pre><code class="language-jsx">try {
    NotDefine();
} catch(err) {
    if ( err instanceof ReferenceError ) {
        console.log(err.name);
    }
}
</code></pre>
</li>
<li>
<p>Show error message in <code>catch</code>.</p>
<pre><code class="language-jsx">try {
	NotAFunction();
} catch (e) {
	console.log(`${e} \n\t is not a function`);
}
</code></pre>
</li>
<li>
<p>#<code>try…catch…finally</code>finally will always run even there was no error.</p>
<pre><code class="language-jsx">function func() {

  try {
    if (confirm(&quot;Do you want error?&quot;)) error();
    return &quot;No Error&quot;
  } catch (err) {
    return &quot;Error&quot;;
  } finally {
    console.log(&quot;Completed and Resual is:&quot;);
  }
}

console.log( func() );

// true
/*
Completed and Resual is:
Error
*/

// false
/*
Completed and Resual is:
No Error
*/
</code></pre>
</li>
<li>
<p><code>try...finally</code>you can also run.</p>
<pre><code class="language-jsx">function func() {

  try {
    if (confirm(&quot;Do you want error?&quot;)) error();
    return &quot;No Error&quot;
  } finally {
    console.log(&quot;Completed and Resual is:&quot;);
  }
}

// true
/*
Completed and Resual is:
*/

// false
/*
Completed and Resual is:
No Error
*/
</code></pre>
</li>
<li>
<p>Error object</p>
<ul>
<li>
<p>Error <code>name</code>shows the name of the error.</p>
<pre><code class="language-jsx">try {
	NoAObject()
} catch (e) {
	console.log(e.name);
}
// ReferenceError
</code></pre>
</li>
<li>
<p>Error <code>message</code>textual message about error details.</p>
<pre><code class="language-jsx">try {
	NotAObject();
} catch (e) {
	console.log(e.message);
}
// NotAObject is not defined
</code></pre>
</li>
<li>
<p>Error <code>stack</code>: a string with information about the sequence of nested calls that led to the error. Used for debugging purposes.</p>
<pre><code class="language-jsx">try {
	NotAObject();
} catch (e) {
	console.log(e.stack);
}

/*
	ReferenceError: NotAObject is not defined
	    at &lt;anonymous&gt;:2:2
*/
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1>Web APIs</h1>
<h2>Fetch</h2>
<ul>
<li>
<p><code>fetch</code>use web api in json.</p>
<pre><code class="language-jsx">let userName = prompt(&quot;What is your username?&quot;, &quot;aav&quot;);

fetch(`https://api.github.com/users/${userName}`)
    .then(github =&gt; github.json())
    .then(github =&gt; console.log(github.public_repos));
</code></pre>
</li>
</ul>
<h2>GlobalEventHandlers</h2>
<ul>
<li>
<p>The <code>onerror</code> property of the <code>GlobalEventHandlers</code> mixin is an <code>EventHandler</code> that processes error events.</p>
<pre><code class="language-jsx">&lt;script&gt;
  window.onerror = function(message, url, line, col, error) {
    alert(`${message}\n At ${line}:${col} of ${url}`);
  };

  function readData() {
    badFunc(); // Whoops, something went wrong!
  }

  readData();
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h2>Window Or WorkerGlobalScope</h2>
<ul>
<li>
<p>❓ Write a function printNumbers(from, to) that outputs a number every second, starting from and ending with to. Using <code>setTimeout</code> &amp; <code>setInterval</code>.</p>
<ul>
<li><code>setTimeout</code></li>
</ul>
<pre><code class="language-jsx">function printNumbers(from, to) {
    setTimeout(function get() {
        console.log(from++);
        if(from &lt; to) setTimeout(get(), 1000);
    }, 5000);
}

printNumbers(1, 5);
/*
1
2
3
4
5
*/
</code></pre>
<ul>
<li><code>setInterval</code></li>
</ul>
<pre><code class="language-jsx">function printNumbers(from, to) {
    timeId = setInterval(() =&gt; {
        console.log(from++);
        if(from &gt; to) clearInterval(timeId);
    }, 1000);
}
/*
1
2
3
4
5
*/
</code></pre>
</li>
<li>
<p>❓ Display Time Every 3 Second</p>
<pre><code class="language-jsx">function showTime() {

    // return new date and time
    let dateTime= new Date();

    // returns the current local time
    let time = dateTime.toLocaleTimeString();

    console.log(time)

    // display the time after 3 seconds
     setTimeout(showTime, 3000);
}

// calling the function
showTime(); // Shows the output every 3 seconds
</code></pre>
</li>
<li>
<p>The #<code>setInterval()</code> method calls a function or evaluates an expression at specified intervals (in milliseconds).</p>
<pre><code class="language-jsx">// repeat with the interval of 2 seconds
let timerId = setInterval(() =&gt; alert('tick'), 2000);

// after 5 seconds stop
setTimeout(() =&gt; { clearInterval(timerId); alert('stop'); }, 5000);
</code></pre>
</li>
<li>
<p><code>clearInterval()</code> clear the <code>setInterval()</code> execution.</p>
<pre><code class="language-jsx">// repeat with the interval of 2 seconds
let timerId = setInterval(() =&gt; alert('tick'), 2000);

// after 5 seconds stop
setTimeout(() =&gt; { clearInterval(timerId); alert('stop'); }, 5000);
</code></pre>
</li>
<li>
<p>#<code>setTimeout</code> allows us to run a function once after the interval of time.</p>
<ul>
<li>
<p>What will setTimeout show?</p>
<pre><code class="language-jsx">let i = 0;

setTimeout(() =&gt; alert(i), 100); // ?

// assume that the time to execute this function is &gt;100ms
for(let j = 0; j &lt; 100000000; j++) {
  i++;
}
</code></pre>
<p>▶️ Answer</p>
<pre><code class="language-jsx">let i = 0;

setTimeout(() =&gt; alert(i), 100); // 100000000

// assume that the time to execute this function is &gt;100ms
for(let j = 0; j &lt; 100000000; j++) {
  i++;
}
</code></pre>
</li>
<li>
<p><code>setTimeout()</code> don’t work with <code>this</code></p>
<pre><code class="language-jsx">let user = {
  firstName: &quot;John&quot;,
  sayHi() {
    alert(`Hello, ${this.firstName}!`);
  }
};

setTimeout(user.sayHi, 1000); // Hello, undefined!
</code></pre>
<ul>
<li>Solution</li>
</ul>
<pre><code class="language-jsx">let user = {
  firstName: &quot;John&quot;,
  sayHi() {
    alert(`Hello, ${this.firstName}!`);
  }
};

setTimeout(function() {
  user.sayHi(); // Hello, John!
}, 1000);
</code></pre>
</li>
</ul>
</li>
<li>
<p><code>clearTimeout()</code> clears the <code>setTimout()</code> execution.</p>
<pre><code class="language-jsx">for (let run = 1; run &lt; 5; run++) {
    if (run &lt; 3 ) {
        const runTime = setTimeout(() =&gt; {
            console.log(`Running ${run}`);
        }, 10);
    } else {
        clearTimeout(runTime);
    }
}

// Running 1
// Running 2
</code></pre>
</li>
<li>
<p><code>setImmediate()</code> will always execute before setTimeout and setImmediate. It is same as <code>setTimeout(callback,0)</code>.</p>
<pre><code class="language-jsx">eEmitter.on(&quot;event1&quot;, (a, b) =&gt; {
  setImmediate(() =&gt; {
    console.log(`${a} ${b}`);
  });
});
eEmitter.on(&quot;event2&quot;, (a, b) =&gt; {
  console.log(`${a} ${b}`);
});

for (let x = 0; x &lt; 4; x++) {
  eEmitter.emit(&quot;event1&quot;, x, &quot;b1&quot;);
  eEmitter.emit(&quot;event2&quot;, x, &quot;b2&quot;);
}

// 0 b2
// 1 b2
// 2 b2
// 3 b2
// 0 b1
// 1 b1
// 2 b1
// 3 b1
</code></pre>
</li>
</ul>
<h2>Console</h2>
<ul>
<li>
<p>The <code>console.dir()</code> displays an interactive list of the properties of the specified JavaScript object.</p>
<pre><code class="language-jsx">console.dir(Number);
/*
ƒ Number()
	EPSILON:
	2.220446049250313
	e-16
	MAX_SAFE_INTEGER: 9007199254740991
	MAX_VALUE:
	1.7976931348623157
	e+308
	MIN_SAFE_INTEGER: -9007199254740991
	MIN_VALUE:
	5
	e-324
	NEGATIVE_INFINITY: -Infinity
	NaN: NaN
	POSITIVE_INFINITY: Infinity
	arguments: (...)
	caller: (...)
	isFinite: ƒ isFinite()
	isInteger: ƒ isInteger()
	isNaN: ƒ isNaN()
	isSafeInteger: ƒ isSafeInteger()
	length: 1
	name: &quot;Number&quot;
	parseFloat: ƒ parseFloat()
	parseInt: ƒ parseInt()
	prototype: Number {0, constructor: ƒ, toExponential: ƒ, toFixed: ƒ, toPrecision: ƒ, …}
	__proto__: ƒ ()
	[[Scopes]]: Scopes[0]
*/
</code></pre>
</li>
<li>
<p>The <code>console.log()</code>shows the output in console.</p>
<pre><code class="language-jsx">cosnole.log(&quot;Hello World&quot;);
// Hello World
</code></pre>
</li>
<li>
<p>The <code>console.log()</code> shows object in table.</p>
<pre><code class="language-jsx">console.table({
  aman: {
    age: 18,
    location: &quot;Mumbai&quot;,
    country: &quot;India&quot;,
  },
  shile: {
    age: 15,
    location: &quot;punjab&quot;,
    country: &quot;India&quot;,
    dateOfYear: 2015,
  },
});
// ┌─────────┬─────┬──────────┬─────────┬────────────┐
// │ (index) │ age │ location │ country │ dateOfYear │
// ├─────────┼─────┼──────────┼─────────┼────────────┤
// │  aman   │ 18  │ 'Mumbai' │ 'India' │            │
// │  shile  │ 15  │ 'punjab' │ 'India' │    2015    │
// └─────────┴─────┴──────────┴─────────┴────────────┘
</code></pre>
</li>
<li>
<p>The <code>console.clear()</code> clears the output in the console.</p>
<pre><code class="language-jsx">console.log(&quot;Hello World&quot;);
console.clear();
console.log(&quot;Bye World&quot;);

// Bye World
</code></pre>
</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Browser</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/javascript/browser.html" />
    <updated>2022-12-18T06:08:20.187Z</updated>
    <id>/notes/programming/languages/javascript/browser.html</id>
    <content type="html"><![CDATA[<h1>Browser: Document, Events, Interfaces</h1>
<h1>Document</h1>
<h2>document.documentElement</h2>
<h2>document.body</h2>
<ul>
<li>
<p>You can only but document.body in <body> tag.</p>
<pre><code class="language-html">&lt;html&gt;

&lt;head&gt;
  &lt;script&gt;
    alert( &quot;From HEAD: &quot; + document.body ); // null, there's no &lt;body&gt; yet
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;script&gt;
    alert( &quot;From BODY: &quot; + document.body ); // HTMLBodyElement, now it exists
  &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>document.body.style</code></p>
<pre><code class="language-jsx">// change the background color to red
document.body.style.background = &quot;red&quot;;

// change it back after 1 second
setTimeout(() =&gt; document.body.style.background = &quot;&quot;, 1000);
</code></pre>
</li>
</ul>
<h2>document.head</h2>
<h2>Searching:</h2>
<ul>
<li>
<p>Live collections of <strong>getElementsBy</strong>* &amp; <strong>querySelector</strong>*</p>
<ul>
<li>All methods “getElementsBy*” return a live collection. Such collections always reflect the current state of the document and “auto-update” when it changes.</li>
</ul>
<pre><code class="language-html">&lt;div&gt;First div&lt;/div&gt;

&lt;script&gt;
  let divs = document.getElementsByTagName('div');
  alert(divs.length); // 1
&lt;/script&gt;

&lt;div&gt;Second div&lt;/div&gt;

&lt;script&gt;
  alert(divs.length); // 2
&lt;/script&gt;
</code></pre>
<ul>
<li>In contrast, querySelectorAll returns a static collection. It’s like a fixed array of elements.</li>
</ul>
<pre><code class="language-html">&lt;div&gt;First div&lt;/div&gt;

&lt;script&gt;
  let divs = document.querySelectorAll('div');
  alert(divs.length); // 1
&lt;/script&gt;

&lt;div&gt;Second div&lt;/div&gt;

&lt;script&gt;
  alert(divs.length); // 1
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>There are 6 main methods to search for nodes in DOM:</p>
<p><a href="/notes/Browser%20Document,%20Events,%20Interfaces%205b1ea1234a324530a62e17f0aecee387/Methods%20to%20Search%20bae8734b53c44a51833cba491564ef97.csv">Methods to Search</a></p>
</li>
<li>
<p>❓ Search for elements</p>
<pre><code class="language-jsx">// 1. The table with `id=&quot;age-table&quot;`.
let table = document.getElementById('age-table')

// 2. All label elements inside that table
table.getElementsByTagName('label')
// or
document.querySelectorAll('#age-table label')

// 3. The first td in that table (with the word &quot;Age&quot;)
table.rows[0].cells[0]
// or
table.getElementsByTagName('td')[0]
// or
table.querySelector('td')

// 4. The form with the name &quot;search&quot;
// assuming there's only one element with name=&quot;search&quot; in the document
let form = document.getElementsByName('search')[0]
// or, form specifically
document.querySelector('form[name=&quot;search&quot;]')

// 5. The first input in that form.
form.getElementsByTagName('input')[0]
// or
form.querySelector('input')

// 6. The last input in that form
let inputs = form.querySelectorAll('input') // find all inputs
inputs[inputs.length-1] // take the last one
</code></pre>
</li>
</ul>
<h3>getElement*</h3>
<ul>
<li>
<p>We can get id of the element using the method <code>document.getElementById(id)</code>.</p>
<pre><code class="language-html">&lt;div id=&quot;elem&quot;&gt;
	&lt;p&gt;Hello&lt;/p&gt;
	&lt;div id=&quot;elem-content&quot;&gt;World&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
document.getElementById(&quot;elem&quot;).style.background = &quot;green&quot;;
document.getElementById(&quot;elem-content&quot;).style.color = &quot;white&quot;;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>getElementsByTagName</code> method of Document interface returns an HTMLCollection of elements with the given tag name.</p>
<pre><code class="language-html">&lt;ul id=&quot;birds&quot;&gt;
  &lt;li&gt;Orange-winged parrot&lt;/li&gt;
  &lt;li class=&quot;endangered&quot;&gt;Philippine eagle&lt;/li&gt;
  &lt;li&gt;Great white pelican&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
console.log(document.getElementsByTagName(&quot;li&quot;).length);
// 3
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>getElementsByClassName</code>for finding element with class name.</p>
<pre><code class="language-html">&lt;form name=&quot;my-form&quot;&gt;
  &lt;div class=&quot;article&quot;&gt;Article&lt;/div&gt;
  &lt;div class=&quot;long article&quot;&gt;Long article&lt;/div&gt;
&lt;/form&gt;

&lt;script&gt;
	let form = document.getElementsByName('my-form')[0];

	let articles = form.getElementsByClassName('article').length;

	console.log(articles);
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h3>querySelector*</h3>
<ul>
<li>
<p><code>document.querySelectorAll(css)</code> returns all elements inside matching the given CSS selector.</p>
<pre><code class="language-html">&lt;ul&gt;
  &lt;li&gt;The&lt;/li&gt;
  &lt;li&gt;test&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;has&lt;/li&gt;
  &lt;li&gt;passed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hello World&lt;/p&gt;
&lt;script&gt;
  let elements = document.querySelectorAll('li:last-child, p');

  for (let elem of elements) {
    console.log(elem.innerHTML); // &quot;test&quot;, &quot;passed&quot;
  }
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The call to <code>document.querySelector(css)</code> returns the first element for the given CSS selector.</p>
<pre><code class="language-html">&lt;h1&gt;Contents&lt;/h1&gt;

&lt;div class=&quot;contents&quot;&gt;
  &lt;ul class=&quot;book&quot;&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;script&gt;
  let chapter = document.querySelector('.chapter'); // LI

  alert(chapter.closest('.book')); // UL
  alert(chapter.closest('.contents')); // DIV

  alert(chapter.closest('h1')); // null (because h1 is not an ancestor)
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Make external links orange</p>
<pre><code class="language-html">&lt;a name=&quot;list&quot;&gt;the list&lt;/a&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tutorial&quot;&gt;/tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;local/path&quot;&gt;local/path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;ftp://ftp.com/my.zip&quot;&gt;ftp://ftp.com/my.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org&quot;&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://internal.com/test&quot;&gt;http://internal.com/test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let link = document.querySelectorAll('a');
		for ( let links of link ) {
			if( String(links.getAttribute('href')).includes('http')) {
			  links.style.color = 'orange';
			};
		}
&lt;/script&gt;
</code></pre>
<pre><code class="language-html">&lt;a name=&quot;list&quot;&gt;the list&lt;/a&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tutorial&quot;&gt;/tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;local/path&quot;&gt;local/path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;ftp://ftp.com/my.zip&quot;&gt;ftp://ftp.com/my.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org&quot;&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://internal.com/test&quot;&gt;http://internal.com/test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let links = document.querySelectorAll('a');

	for (let link of links) {
	  let href = link.getAttribute('href');
	  if (!href) continue; // no attribute

	  if (!href.includes('://')) continue; // no protocol

	  if (href.startsWith('http://internal.com')) continue; // internal

	  link.style.color = 'orange';
	}
&lt;/script&gt;
</code></pre>
<pre><code class="language-html">&lt;a name=&quot;list&quot;&gt;the list&lt;/a&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tutorial&quot;&gt;/tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;local/path&quot;&gt;local/path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;ftp://ftp.com/my.zip&quot;&gt;ftp://ftp.com/my.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org&quot;&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://internal.com/test&quot;&gt;http://internal.com/test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let selector = 'a[href*=&quot;://&quot;]:not([href^=&quot;http://internal.com&quot;])';
	let links = document.querySelectorAll(selector);

	links.forEach(link =&gt; link.style.color = 'orange');
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h2>Table</h2>
<ul>
<li>
<p>The <table> element supports (in addition to the given above) these properties.</p>
<ul>
<li>
<p>An example of usage:</p>
<pre><code class="language-html">&lt;table id=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;one&lt;/td&gt;&lt;td&gt;two&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;three&lt;/td&gt;&lt;td&gt;four&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
  // get td with &quot;two&quot; (first row, second column)
  let td = table.rows[0].cells[1];
  td.style.backgroundColor = &quot;red&quot;; // highlight it
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>table.rows</code> – the collection of <tr> elements of the table.</p>
</li>
<li>
<p><code>table.caption/tHead/tFoot</code> – references to elements <caption>, <thead>, <tfoot>.</p>
</li>
<li>
<p><code>table.tBodies</code> – the collection of <tbody> elements.</p>
</li>
<li>
<p><code>tr.cells</code> – the collection of <td> and <th> cells inside the given <tr>.</p>
</li>
<li>
<p><code>tr.sectionRowIndex</code> – the position (index) of the given <tr> inside the enclosing <thead>/<tbody>/<tfoot>.</p>
</li>
<li>
<p><code>tr.rowIndex</code> – the number of the <tr> in the table as a whole (including all table rows).</p>
</li>
<li>
<p><code>td.cellIndex</code> – the number of the cell inside the enclosing <tr>.</p>
</li>
</ul>
</li>
<li>
<p>❓ Select all diagonal cells</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;style&gt;
    table {
      border-collapse: collapse;
    }

    td {
      border: 1px solid black;
      padding: 3px 5px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;1:1&lt;/td&gt;
      &lt;td&gt;2:1&lt;/td&gt;
      &lt;td&gt;3:1&lt;/td&gt;
      &lt;td&gt;4:1&lt;/td&gt;
      &lt;td&gt;5:1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:2&lt;/td&gt;
      &lt;td&gt;2:2&lt;/td&gt;
      &lt;td&gt;3:2&lt;/td&gt;
      &lt;td&gt;4:2&lt;/td&gt;
      &lt;td&gt;5:2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:3&lt;/td&gt;
      &lt;td&gt;2:3&lt;/td&gt;
      &lt;td&gt;3:3&lt;/td&gt;
      &lt;td&gt;4:3&lt;/td&gt;
      &lt;td&gt;5:3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:4&lt;/td&gt;
      &lt;td&gt;2:4&lt;/td&gt;
      &lt;td&gt;3:4&lt;/td&gt;
      &lt;td&gt;4:4&lt;/td&gt;
      &lt;td&gt;5:4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:5&lt;/td&gt;
      &lt;td&gt;2:5&lt;/td&gt;
      &lt;td&gt;3:5&lt;/td&gt;
      &lt;td&gt;4:5&lt;/td&gt;
      &lt;td&gt;5:5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  &lt;script&gt;
    let table = document.body.firstElementChild;
    for(let i = 0; i &lt; table.rows.length; i++) {
      table.rows[i].cells[i].style.background = 'red'
    }
    // your code
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
</ul>
<h2>Methods</h2>
<ul>
<li>
<p><code>Document.createElement()</code> Creates a new element with the given tag name.</p>
<pre><code class="language-html">&lt;style&gt;
.alert {
  padding: 15px;
  border: 1px solid #d6e9c6;
  border-radius: 4px;
  color: #3c763d;
  background-color: #dff0d8;
}
&lt;/style&gt;

&lt;script&gt;
  let div = document.createElement('div');
  div.className = &quot;alert&quot;;
  div.innerHTML = &quot;&lt;strong&gt;Hi there!&lt;/strong&gt; You've read an important message.&quot;;

  document.body.append(div);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Document.createTextNode()</code> Creates a new Text node. This method can be used to escape HTML characters.</p>
<pre><code class="language-jsx">function clicked(word) {
	let printWord = document.createTextNode(word);
	document.body.append(printWord);
}

let button = document.createElement('button');
button.setAttribute('onclick', 'clicked(&quot;Yes &quot;)');
button.innerHTML = 'Click Me!'
document.body.append(button)
</code></pre>
</li>
</ul>
<h1>DocumentFragment</h1>
<ul>
<li>
<p>The <code>DocumentFragment interface</code> represents a minimal document object that has no parent.</p>
<pre><code class="language-jsx">let ul = document.createElement(&quot;ul&quot;);
document.body.append(ul);

let fargment = new DocumentFragment();

function getListContent() {

	for ( let i = 1; i &lt;= 5; i++ ) {
		let li = document.createElement(&quot;li&quot;);
		li.append(i);
		fargment.append(li);
	}

	console.log(fargment);
	return fargment;
}

ul.append(getListContent());
</code></pre>
</li>
</ul>
<h1>Node</h1>
<ul>
<li>
<p>Child nodes (or children) – elements that are direct children. In other words, they are nested exactly in the given one. For instance, <head> and <body> are children of <html> element.</p>
<ul>
<li>
<p><code>childNodes</code> read-only property returns a live NodeList of child nodes of the given element where the first child node is assigned index 0.</p>
<pre><code class="language-html">&lt;html&gt;
&lt;body&gt;
  &lt;div&gt;Begin&lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;Information&lt;/li&gt;
  &lt;/ul&gt;

  &lt;div&gt;End&lt;/div&gt;

  &lt;script&gt;
    for (let i = 0; i &lt; document.body.childNodes.length; i++) {
      alert( document.body.childNodes[i] ); // Text, DIV, Text, UL, ..., SCRIPT
    }
  &lt;/script&gt;
  ...more stuff...
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>firstChild</code> read-only property returns the node’s first child in the tree, or null if the node has no children.</p>
<pre><code class="language-html">&lt;p id=&quot;para-01&quot;&gt;
  &lt;span&gt;First span&lt;/span&gt;
&lt;/p&gt;

&lt;script&gt;
  var p01 = document.getElementById('para-01');
  alert(p01.firstChild.nodeName);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>lastChild</code> read-only property returns the last child of the node.</p>
<pre><code class="language-html">var tr = document.getElementById(&quot;row1&quot;);
var corner_td = tr.lastChild;
</code></pre>
</li>
</ul>
</li>
<li>
<p>Siblings are nodes that are children of the same parent.</p>
<ul>
<li>
<p>The next sibling is in<code>nextSibling</code>.</p>
<pre><code class="language-jsx">alert( document.body.parentNode === document.documentElement ); // true
</code></pre>
</li>
<li>
<p>the previous one in<code>previousSibling</code>.</p>
<pre><code class="language-jsx">alert( document.head.nextSibling ); // HTMLBodyElement
</code></pre>
</li>
<li>
<p>The parent is available as <code>parentNode</code>.</p>
<pre><code class="language-jsx">alert( document.body.previousSibling ); // HTMLHeadElement
</code></pre>
</li>
</ul>
</li>
<li>
<p><code>nodeName</code> to show the element name.</p>
<pre><code class="language-jsx">&lt;p id=&quot;word&quot;&gt;Hello World&lt;/p&gt;
&lt;script&gt;
	let elem = document.getElementById('word');
	console.log(elem.nodeName); // P
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Node.textContent</code> Pure text.</p>
<pre><code class="language-jsx">&lt;div id=&quot;elem1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;elem2&quot;&gt;&lt;/div&gt;

&lt;script&gt;
  let name = prompt(&quot;What's your name?&quot;, &quot;&lt;b&gt;Winnie-the-Pooh!&lt;/b&gt;&quot;);

  elem1.innerHTML = name; // Winnie-the-Pooh!
  elem2.textContent = name; // &lt;b&gt;Winnie-the-Pooh!&lt;/b&gt;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓Count descendants</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;ul&gt;
    &lt;li&gt;Animals
      &lt;ul&gt;
        &lt;li&gt;Mammals
          &lt;ul&gt;
            &lt;li&gt;Cows&lt;/li&gt;
            &lt;li&gt;Donkeys&lt;/li&gt;
            &lt;li&gt;Dogs&lt;/li&gt;
            &lt;li&gt;Tigers&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Other
          &lt;ul&gt;
            &lt;li&gt;Snakes&lt;/li&gt;
            &lt;li&gt;Birds&lt;/li&gt;
            &lt;li&gt;Lizards&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Fishes
      &lt;ul&gt;
        &lt;li&gt;Aquarium
          &lt;ul&gt;
            &lt;li&gt;Guppy&lt;/li&gt;
            &lt;li&gt;Angelfish&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Sea
          &lt;ul&gt;
            &lt;li&gt;Sea trout&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
	&lt;script&gt;
		let lists = document.getElementsByTagName('li');
		for (let list of lists) {
			console.log(list.textContent);
		}
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>node.append(...nodes or strings)</code> – append nodes or strings at the end of node.</p>
<pre><code class="language-jsx">function clicked(word) {
	let printWord = document.createTextNode(word);
	document.body.append(printWord);
}

let button = document.createElement('button');
button.setAttribute('onclick', 'clicked(&quot; Yes&quot;)');
button.innerHTML = 'Click Me!'
document.body.append(button)
</code></pre>
</li>
<li>
<p><code>node.prepend(...nodes or strings)</code> – insert nodes or strings at the beginning of node.</p>
<pre><code class="language-jsx">function clicked(word) {
	let printWord = document.createTextNode(word);
	let button = document.querySelector('button');
	button.prepend(printWord);
}

let button = document.createElement('button');
button.setAttribute('onclick', 'clicked(&quot;----&gt;&quot;)');
button.innerHTML = 'Click Me!'
document.body.append(button)
</code></pre>
</li>
<li>
<p><code>node.before()</code> &amp; <code>node.after()</code>–- insert nodes or strings before &amp; after node.</p>
<pre><code class="language-html">&lt;ol id=&quot;ol&quot;&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
&lt;/ol&gt;

&lt;script&gt;
	ol.before(&quot;&lt;p&gt;&quot;);
	ol.after(&quot;&lt;/p&gt;&quot;);
	console.log(document.body.outerHTML);
	/*
	&amp;lt;p&amp;gt;&lt;ol id=&quot;ol&quot;&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
	&lt;/ol&gt;&amp;lt;/p&amp;gt;
  */
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>node.replaceWith(...nodes or strings)</code> –- replaces node with the given nodes or strings.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;ClickMe&lt;/button&gt;

&lt;p&gt;&lt;b&gt;Hello World&lt;/b&gt;&lt;/p&gt;

&lt;script&gt;
	let b = document.querySelector('b');
	function clicked() {
		b.replaceWith(&quot;Bye World&quot;);
	}
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>ParentNode</h1>
<ul>
<li>
<p>❓Show descendants in a tree.</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;ul&gt;
    &lt;li&gt;Animals
      &lt;ul&gt;
        &lt;li&gt;Mammals
          &lt;ul&gt;
            &lt;li&gt;Cows&lt;/li&gt;
            &lt;li&gt;Donkeys&lt;/li&gt;
            &lt;li&gt;Dogs&lt;/li&gt;
            &lt;li&gt;Tigers&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Other
          &lt;ul&gt;
            &lt;li&gt;Snakes&lt;/li&gt;
            &lt;li&gt;Birds&lt;/li&gt;
            &lt;li&gt;Lizards&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Fishes
      &lt;ul&gt;
        &lt;li&gt;Aquarium
          &lt;ul&gt;
            &lt;li&gt;Guppy&lt;/li&gt;
            &lt;li&gt;Angelfish&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Sea
          &lt;ul&gt;
            &lt;li&gt;Sea trout&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;script&gt;
		let li = document.getElementsByTagName('li');

		for ( let lis of li ) {
			let lisLength = lis.getElementsByTagName('li').length;

			if(!lisLength) continue;

			lis.firstChild.data += `[${lisLength}]`;
		}
	&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p>❓ Colored clock with setInterval</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;div id=&quot;clock&quot;&gt;
  &lt;span class=&quot;hour&quot;&gt;hh&lt;/span&gt;:&lt;span class=&quot;min&quot;&gt;mm&lt;/span&gt;:&lt;span class=&quot;sec&quot;&gt;ss&lt;/span&gt;
  &lt;/div&gt;

  &lt;input type=&quot;button&quot; onclick=&quot;clockStart()&quot; value=&quot;Start&quot;&gt;
  &lt;input type=&quot;button&quot; onclick=&quot;clockStop()&quot; value=&quot;Stop&quot;&gt;

	&lt;script&gt;
		function update() {
	  let clock = document.getElementById('clock');
	  let date = new Date();
	  let hours = date.getHours();
	  let minutes = date.getMinutes();
	  let seconds = date.getSeconds();

	  clock.children[0].innerHTML = hours;
	  clock.children[1].innerHTML = minutes;
	  clock.children[2].innerHTML = seconds;
	}

	let timerId;

	function clockStart() { // run the clock
	  if (!timerId) { // only set a new interval if the clock is not running
	    timerId = setInterval(update, 1000);
	  }
	  update(); // (*)
	}

	function clockStop() {
	  clearInterval(timerId);
	  timerId = null; // (**)
	}
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p>Element-only navigation:- Navigation properties listed above refer to all nodes.</p>
<ul>
<li>
<p><code>children</code> – only those children that are element nodes.</p>
<pre><code class="language-html">&lt;html&gt;
&lt;body&gt;
  &lt;div&gt;Begin&lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;Information&lt;/li&gt;
  &lt;/ul&gt;

  &lt;div&gt;End&lt;/div&gt;

  &lt;script&gt;
    for (let elem of document.body.children) {
      alert(elem); // DIV, UL, DIV, SCRIPT
    }
  &lt;/script&gt;
  ...
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>firstElementChild</code>, <code>lastElementChild</code> – first and last element children.</p>
<pre><code class="language-jsx">alert( document.documentElement.parentNode ); // document
</code></pre>
</li>
<li>
<p><code>previousElementSibling</code>, <code>nextElementSibling</code> – neighbor elements.</p>
<pre><code class="language-html">&lt;div id=&quot;div-01&quot;&gt;Here is div-01&lt;/div&gt;
&lt;div id=&quot;div-02&quot;&gt;Here is div-02&lt;/div&gt;
&lt;li&gt;This is a list item&lt;/li&gt;
&lt;li&gt;This is another list item&lt;/li&gt;
&lt;div id=&quot;div-03&quot;&gt;Here is div-03&lt;/div&gt;

&lt;script&gt;
  let el = document.getElementById('div-03').previousElementSibling;
  document.write('&lt;p&gt;Siblings of div-03&lt;/p&gt;&lt;ol&gt;');
  while (el) {
    document.write('&lt;li&gt;' + el.nodeName + '&lt;/li&gt;');
    el = el.previousElementSibling;
  }
  document.write('&lt;/ol&gt;');
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>parentElement</code> – parent element.</p>
<pre><code class="language-jsx">console.log(document.head.parentElement);
/*
&lt;html lang=&quot;en&quot; class=&quot;working-hover&quot;&gt;
&lt;head&gt;…&lt;/head&gt;
&lt;body class&gt;…&lt;/body&gt;
&lt;/html&gt;
*/
</code></pre>
</li>
</ul>
</li>
</ul>
<h2>ChildNode</h2>
<ul>
<li>
<p><code>ChildNode.remove()</code> method removes the object from the tree it belongs to.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;Destroy !!!&lt;/button&gt;

&lt;p&gt;Hello World&lt;/p&gt;

&lt;script&gt;
	let button = document.querySelector('button'),
	p = document.querySelector('p');

	button.style.background = &quot;red&quot;;
	button.style.color = &quot;white&quot;;

	function clicked() {
		p.remove();
	}
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Clear the element</p>
<pre><code class="language-html">&lt;ol id=&quot;elem&quot;&gt;
  &lt;li&gt;Hello&lt;/li&gt;
  &lt;li&gt;World&lt;/li&gt;
&lt;/ol&gt;

&lt;script&gt;
	function clear(ele) {
		while (ele.firstChild) {
			ele.childNodes[1].remove();
		}
	}

	clear(document.querySelector(&quot;ol&quot;));
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Add a closing button</p>
<p><a href="https://codepen.io/fillyagioro/pen/jOydryr">https://codepen.io/fillyagioro/pen/jOydryr</a></p>
</li>
<li>
<p>The most deeply nested element that caused the event is called a target element, accessible as <code>event.target</code>.</p>
<p><a href="https://codepen.io/fillyagioro/pen/eYgxzBR">https://codepen.io/fillyagioro/pen/eYgxzBR</a></p>
</li>
<li>
<p>Stopping bubbling</p>
<p><a href="https://codepen.io/fillyagioro/pen/eYgxzBR">https://codepen.io/fillyagioro/pen/eYgxzBR</a></p>
</li>
<li>
<p>❓ Hide messages with delegation</p>
<p><a href="https://codepen.io/fillyagioro/pen/vYgPbVe">https://codepen.io/fillyagioro/pen/vYgPbVe</a></p>
</li>
</ul>
<h1>Element</h1>
<ul>
<li>
<p>The <code>matches(css)</code> method checks to see if the Element would be selected by the provided selectorString.</p>
<pre><code class="language-html">&lt;ul id=&quot;birds&quot;&gt;
  &lt;li&gt;Orange-winged parrot&lt;/li&gt;
  &lt;li class=&quot;endangered&quot;&gt;Philippine eagle&lt;/li&gt;
  &lt;li&gt;Great white pelican&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let list = document.getElementsByTagName('li');
  for(let elem of list) {
    if(elem.matches('.endangered')) {
      console.log(elem.innerHTML);
    }
  }
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>closest()</code> method traverses the Element and its parents  until it finds a node that matches the provided selector string.</p>
<pre><code class="language-html">&lt;h1&gt;Contents&lt;/h1&gt;

&lt;div class=&quot;contents&quot;&gt;
  &lt;ul class=&quot;book&quot;&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;script&gt;
	let chapter = document.querySelector('.chapter');
	console.log(chapter.closest('.book').innerHTML);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Element.tagName</code> to show the element name.</p>
<pre><code class="language-jsx">&lt;p id=&quot;word&quot;&gt;Hello World&lt;/p&gt;
&lt;script&gt;
	let elem = document.getElementById('word');
	console.log(elem.tagName); // P
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>innerHTML</code> property allows to get the HTML inside the element as a string.</p>
<pre><code class="language-jsx">&lt;body&gt;
  &lt;p&gt;A paragraph&lt;/p&gt;
  &lt;div&gt;A div&lt;/div&gt;

  &lt;script&gt;
    alert( document.body.innerHTML ); // read the current contents
    document.body.innerHTML = 'The new BODY!'; // replace it
  &lt;/script&gt;

&lt;/body&gt;
</code></pre>
</li>
<li>
<p>The <code>outerHTML</code> property contains the full HTML of the element. That’s like innerHTML plus the element itself.</p>
<pre><code class="language-jsx">&lt;div id=&quot;elem&quot;&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;

&lt;script&gt;
  console.log(elem.outerHTML); // &lt;div id=&quot;elem&quot;&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;
	console.log(elem.innerHTML); // Hello &lt;b&gt;World&lt;/b&gt;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>getAttribute()</code> returns the elements attribute which is called.</p>
<pre><code class="language-html">&lt;div id=&quot;elem&quot; something-data=&quot;yes&quot;&gt;&lt;/div&gt;

&lt;script&gt;
	console.log(elem.getAttribute('something-data'));
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>setAttribute()</code> sets the attribute value.</p>
<pre><code class="language-html">&lt;input&gt;

&lt;script&gt;
	let input = document.querySelector('input');
	input.setAttribute('id', 'into')
	console.log(input.outerHTML);
	console.log(input.id)
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>Get attribute and there value with <code>attribute</code>.</p>
<pre><code class="language-html">&lt;input id=&quot;hello&quot; something=&quot;yes&quot;&gt;

&lt;script&gt;
	let link = document.querySelector('input');

	for ( let links of link.attributes ) {
		console.log(links.name + ' ' + links.value);
	}
	// id hello
	// something yes
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Element.insertAdjacent*</code></p>
<ul>
<li>
<p><code>Element.insertAdjacentHTML()</code> method inserts a text as HTML, into a specified position.</p>
<pre><code class="language-jsx">let ulist = document.createElement('ul');
document.body.append(ulist);

let list = document.createElement('li');

while(true) {
	let ans = String(prompt(&quot;What you wnat inside the list?&quot;));

	if (!ans) {
		break;
	}
	list.innerHTML = ans;
	ulist.insertAdjacentHTML(&quot;afterBegin&quot;, `&lt;li&gt;${ans}&lt;/li&gt;`);
}
</code></pre>
<pre><code class="language-jsx">let li = document.createElement(&quot;li&quot;);
let ul = document.querySelector(&quot;ul&quot;)
function getListContent() {
	for (let i = 5; i &gt;= 1; i--) {
	ul.insertAdjacentHTML(&quot;afterBegin&quot;, `&lt;li&gt;${i}&lt;/li&gt;`);
	}
}

getListContent();
</code></pre>
</li>
<li>
<p><code>Element.insertAdjacentText()</code> – the same syntax, but a string of text is inserted “as text” instead of HTML.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;ClickMe&lt;/button&gt;

&lt;p&gt;Hello World&lt;/p&gt;

&lt;script&gt;
	let p = document.querySelector('p');
	function clicked() {
		p.insertAdjacentText(&quot;beforeend&quot;, &quot;Bye World&quot;);
	}
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Element.insertAdjacentElement()</code> – the same syntax, but inserts an element.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;ClickMe&lt;/button&gt;

&lt;p&gt;&lt;b&gt;Hello World&lt;/b&gt;&lt;/p&gt;

&lt;script&gt;
	let p = document.querySelector('p');
	let i = document.createElement('i')
	function clicked() {
		p.insertAdjacentElement(&quot;afterEnd&quot;, i);
	}
	i.innerHTML = &quot;Bye World&quot;;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>&quot;beforebegin&quot;</code> – insert <code>html</code> immediately before <code>elem</code>,</p>
</li>
<li>
<p><code>&quot;afterbegin&quot;</code> – insert <code>html</code> into <code>elem</code>, at the beginning,</p>
</li>
<li>
<p><code>&quot;beforeend&quot;</code> – insert <code>html</code> into <code>elem</code>, at the end,</p>
</li>
<li>
<p><code>&quot;afterend&quot;</code> – insert <code>html</code> immediately after <code>elem</code>.</p>
</li>
</ul>
</li>
<li>
<p>❓ Insert the HTML in the list</p>
<pre><code class="language-html">&lt;ul id=&quot;ul&quot;&gt;
  &lt;li id=&quot;one&quot;&gt;1&lt;/li&gt;
  &lt;li id=&quot;two&quot;&gt;4&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	one.insertAdjacentHTML(&quot;afterend&quot;, &quot;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&quot;);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>className</code> property of the Element interface gets and sets the value of the class attribute of the specified element.</p>
<pre><code class="language-jsx">let div = document.createElement('div');
div.className = &quot;hello&quot;;
div.innerHTML = div.className;

document.body.append(div);
</code></pre>
</li>
<li>
<p>Window sizes</p>
<ul>
<li>
<p><code>clientWidth</code> / <code>clientHeight</code> Width/height of the window.</p>
<pre><code class="language-jsx">console.log(document.documentElement.clientWidth);
console.log(document.documentElement.clientHeight);
</code></pre>
</li>
<li>
<p><code>document.documentElement.scrollWidth/scrollHeight</code> Width/height of the document.</p>
</li>
</ul>
</li>
<li>
<p>If there are no paddings, then <code>clientWidth/Height</code> is exactly the content area, inside the borders and the scrollbar (if any).</p>
<pre><code class="language-jsx">let h1 = document.body.querySelector('h1');
h1.clientHeight;
</code></pre>
</li>
<li>
<p><code>Element.scrollIntoView()</code>scroll into the view of line.</p>
<pre><code class="language-jsx">let h1 = document.body.querySelector('h1');

h1.scrollIntoView()
</code></pre>
</li>
<li>
<p><code>Element.getBoundingClientRect()</code> returns information about left, top, right, bottom, x, y, width, and height.</p>
</li>
<li>
<p><code>onmouseover</code> change element when you hover over element &amp; <code>onmouseout</code> change element when hover out over element.</p>
<p><a href="https://codepen.io/fillyagioro/pen/RwKzzxg">https://codepen.io/fillyagioro/pen/RwKzzxg</a></p>
</li>
<li>
<p><code>onmousedown</code> change element when you click over element &amp; <code>onmouseup</code> change element when click done.</p>
<p><a href="https://codepen.io/fillyagioro/pen/JjEQgRJ">https://codepen.io/fillyagioro/pen/JjEQgRJ</a></p>
</li>
<li>
<p>❓ Catch links in the element</p>
<p><a href="https://codepen.io/fillyagioro/pen/PoWrMeg">https://codepen.io/fillyagioro/pen/PoWrMeg</a></p>
</li>
</ul>
<h1>Event</h1>
<ul>
<li>
<p>The <code>preventDefault()</code> method cancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur.</p>
<p><a href="https://codepen.io/fillyagioro/pen/GRrbVBe">https://codepen.io/fillyagioro/pen/GRrbVBe</a></p>
</li>
</ul>
<h1>EventTarget</h1>
<ul>
<li>
<p>The <code>addEventListener()</code> method attaches an event handler to the specified element.</p>
<pre><code class="language-html">&lt;table id=&quot;outside&quot;&gt;
  &lt;tr&gt;&lt;td id=&quot;t1&quot;&gt;one&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td id=&quot;t2&quot;&gt;two&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;script&gt;
	let elem = document.querySelector('table');

	function change() {
		let td = document.getElementsByTagName('td');
		if (td[1].innerHTML == &quot;two&quot;) {
			td[1].innerHTML = &quot;three&quot;;
		} else {
			td[1].innerHTML = &quot;two&quot;
		}
	}

	elem.addEventListener('click', change, false)
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>Window</h1>
<ul>
<li>
<p>The method <code>scrollBy(x,y)</code> scrolls the page relative to its current position. For instance, scrollBy(0,10) scrolls the page 10px down.</p>
<pre><code class="language-jsx">window.scrollBy(0,10)
</code></pre>
</li>
<li>
<p><code>Window.scrollTo()</code> scrolls to a particular set of coordinates in the document.</p>
<pre><code class="language-jsx">window.scrollTo()
</code></pre>
</li>
</ul>
<h1>CSSStyleDeclaration.cssText</h1>
<ul>
<li>
<p>The <code>cssText</code> property of the CSSStyleDeclaration interface returns or sets the text of the element’s inline style declaration only.</p>
<pre><code class="language-jsx">let message = document.createElement('div');

message.style.cssText = &quot;background: red; color: white&quot;;

message.innerHTML = &quot;Hello, World&quot;;

document.body.append(message);
</code></pre>
</li>
</ul>
<h1>HTMLElement</h1>
<ul>
<li>
<p>Hide the element with <code>HTMLElement.hidden</code>.</p>
<pre><code class="language-jsx">&lt;div id=&quot;elem&quot;&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;
&lt;script&gt;
	let bold = elem.getElementsByTagName('b')[0];
	setInterval(() =&gt; bold.hidden = !bold.hidden, 500);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Hide on click</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;input type=&quot;button&quot; id=&quot;hider&quot; value=&quot;Click to hide the text&quot; /&gt;

  &lt;div id=&quot;text&quot;&gt;Text&lt;/div&gt;

  &lt;script&gt;
    hider.onclick = () =&gt; {
      let text = document.getElementById('text');
      text.hidden = true;
    }
  &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p>The style attribute is a string, but the style property is an object.</p>
<pre><code class="language-html">&lt;div id=&quot;div&quot; style=&quot;color:red;font-size:120%,al&quot;&gt;Hello&lt;/div&gt;

&lt;script&gt;
	console.log(div.style.color);
	// red
	div.style.background = &quot;green&quot;;

	console.log(div.style);
	// empty
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>HTMLElement.offsetWidth/Height</code> read-only property returns the layout width of an element as an integer.</p>
<pre><code class="language-jsx">h1 = document.body.querySelector('h1');
// h1.offsetHeight
</code></pre>
</li>
</ul>
<h1>HTMLInputElement</h1>
<ul>
<li>
<p>DOM elements also have additional properties, in particular those that depend on the class.</p>
<pre><code class="language-jsx">&lt;input type=&quot;text&quot; id=&quot;elem&quot; value=&quot;value&quot;&gt;

&lt;script&gt;
	let elem = document.getElementById('elem');
	console.log(elem.value);
	console.log(elem.type);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>Accessing the element: this</p>
<pre><code class="language-html">&lt;button onclick=&quot;alert(this.innerHTML)&quot;&gt;Click me&lt;/button&gt;
</code></pre>
</li>
</ul>
<h1>HTMLOrForeignElement</h1>
<ul>
<li>
<p>Non-standard attributes are used to pass custom data from HTML to JavaScript, or to “mark” HTML-elements for JavaScript.</p>
<pre><code class="language-html">&lt;!-- mark the div to show &quot;name&quot; here --&gt;
&lt;div show-info=&quot;name&quot;&gt;&lt;/div&gt;
&lt;!-- and age here --&gt;
&lt;div show-info=&quot;age&quot;&gt;&lt;/div&gt;

&lt;script&gt;
	let user = {
		name: &quot;Pete&quot;,
		age: 25
	};

	 for(let div of document.querySelectorAll('[show-info]')) {
	 	let text = div.getAttribute('show-info');
		div.innerHTML = user[text];
	}
&lt;/script&gt;

</code></pre>
</li>
<li>
<p>All attributes starting with “data-” are reserved for programmers’ use. They are available in the dataset property.</p>
<pre><code class="language-html">&lt;style&gt;
  .order[data-order-state=&quot;new&quot;] {
    color: green;
  }

  .order[data-order-state=&quot;pending&quot;] {
    color: blue;
  }

  .order[data-order-state=&quot;canceled&quot;] {
    color: red;
  }
&lt;/style&gt;

&lt;div id=&quot;order&quot; class=&quot;order&quot; data-order-state=&quot;new&quot;&gt;
  A new order.
&lt;/div&gt;

&lt;script&gt;
	order.dataset.orderState = 'padding';

	console.log(order.outerHTML);
	// &lt;div id=&quot;order&quot; class=&quot;order&quot; data-order-state=&quot;padding&quot;&gt;A new order.&lt;/div&gt;
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>GlobalEventHandlers.onclick</h1>
<ul>
<li>
<p>The <code>onclick</code> event occurs when the user clicks on an element.</p>
<pre><code class="language-html">&lt;button&gt;Click Me&lt;/button&gt;

&lt;script&gt;
  let button = document.querySelector('button');

  button.onclick = () =&gt; alert(&quot;Hello World&quot;)
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>Location</h1>
<ul>
<li><code>location</code> interface represents the location (URL) of the object it is linked to.
<ul>
<li>
<p><code>location.href</code> shows URL.</p>
<pre><code class="language-jsx">alert(location.href); // shows current URL
if (confirm(&quot;Go to Wikipedia?&quot;)) {
  location.href = &quot;https://wikipedia.org&quot;; // redirect the browser to another URL
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h1>Web Console Helpers</h1>
<ul>
<li><code>$0</code> The currently-inspected element in the page. <code>$0.style.background = 'red'</code></li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Pratical Sem6</title>
    <link href="https://anzenkodo.github.io/notes/programming/languages/php/pratical-sem6.html" />
    <updated>2022-12-18T06:08:20.187Z</updated>
    <id>/notes/programming/languages/php/pratical-sem6.html</id>
    <content type="html"><![CDATA[<h2>1. Write a PHP program using expressions and operator (ternary operator, arithmetic operators and comparison operators)</h2>
<pre><code class="language-php">&lt;?php
  echo 1 &gt; 2 ? 1 : 2;
  echo &quot;&lt;br&gt;&quot;;
  echo 1 + 2;
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>2
3
</code></pre>
<h2>2. Write a PHP program to the use of decision making and control structures using:</h2>
<h3><code>if</code> statement</h3>
<pre><code class="language-php">&lt;?php
$x = 1;
if ($x &gt; 0) {
  echo &quot;The number is positive&quot;;
}
</code></pre>
<p>O/P</p>
<pre><code>The number is positive
</code></pre>
<h3><code>if else</code> statement</h3>
<pre><code class="language-php">&lt;?php
$x = &quot;August&quot;;

if ($x &gt; 0) {
  echo &quot;The number is positive&quot;;
} else {
  echo &quot;The number is negative&quot;;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Happy Independence Day!!!
</code></pre>
<h3><code>if elseif if</code> statement</h3>
<pre><code class="language-php">&lt;?php
$x = &quot;August&quot;;

if ($x &gt; 0) {
  echo &quot;The number is positive&quot;;
} elseif ( $x &lt; 0 ) {
  echo &quot;The number is negative&quot;;
} else {
  echo &quot;The value is not number&quot;;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>The number is positive
</code></pre>
<h3><code>switch case</code> statement</h3>
<pre><code class="language-php">&lt;?php
$n = &quot;Monday&quot;;

switch($n) {
  case &quot;Monday&quot;:
    echo &quot;Its Monday&quot;;
    break;
  case &quot;Tuesday&quot;:
    echo &quot;Its Tuesday&quot;;
    break;
  case &quot;Wednesday&quot;:
    echo &quot;Its Wednesday&quot;;
    break;
  case &quot;Thuesday&quot;:
    echo &quot;Its Thuesday&quot;;
    break;
  case &quot;Friday&quot;:
    echo &quot;Its Friday&quot;;
    break;
  case &quot;Saturday&quot;:
    echo &quot;Its Saturday&quot;;
    break;
  case &quot;Sunday&quot;:
    echo &quot;Its Suday&quot;;
    break;
  default:
    echo &quot;Doesn't exist&quot;;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Its Monday
</code></pre>
<h2>3. Write a PHP program to the use of looping structure using:</h2>
<h3><code>while</code> statement</h3>
<pre><code class="language-php">&lt;?php
$num = 0;

while ($num &lt;= 10) {
  echo $num;
  $num++;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>012345678910
</code></pre>
<h3><code>do while</code> statement</h3>
<pre><code class="language-php">&lt;?php
$x = 1;
do {
  echo $x;
  $x++;
} while ($x &lt;= 5);
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>12345
</code></pre>
<h3><code>for</code> statement</h3>
<pre><code class="language-php">&lt;?php
for ($i = 1; $i &lt;= 10; $i++) {
  echo $i;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>12345678910
</code></pre>
<h2>4. Write a PHP program to the use of looping structure using for statement, for each statement.</h2>
<h3><code>for</code> statement</h3>
<pre><code class="language-php">&lt;?php
for ($x = 0; $x &lt;= 5; $x++) {
  echo $x;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>012345
</code></pre>
<h3><code>foreach</code> statement</h3>
<pre><code class="language-php">&lt;?php
$a = array(&quot;Hello&quot;, &quot;World&quot;);

foreach ($a as $b) {
  echo $b.&quot; &quot;;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Hello World
</code></pre>
<h2>5. Write a PHP program for creating and manipulating , associative array and multidimensional array.</h2>
<h3>Indexed array</h3>
<pre><code class="language-php">&lt;?php
$a = array(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;);
echo &quot;My fav color is: &quot;.$a[0];
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>My fav color is: Red
</code></pre>
<h3>Associative arrays</h3>
<pre><code class="language-php">&lt;?php
$a = array(&quot;Red&quot;=&gt;1, &quot;Blue&quot;=&gt;2, &quot;Green&quot;=&gt;3);
echo $a[&quot;Red&quot;].$a[&quot;Blue&quot;],$a[&quot;Green&quot;];
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>123
</code></pre>
<h3>Multidimensional array</h3>
<pre><code class="language-php">&lt;?php
$a = array(array(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;));
echo &quot;My fav color is: &quot;.$a[0][1];
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>My fav color is: Blue
</code></pre>
<h2>6. Write a PHP program to calculate</h2>
<h3>Length of string</h3>
<pre><code class="language-php">&lt;?php
  echo strlen(&quot;Hello world!&quot;);
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>12
</code></pre>
<h3>Count the no of words in string</h3>
<pre><code class="language-php">&lt;?php
  echo str_word_count(&quot;Hello world!&quot;);
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>2
</code></pre>
<h3>Compare two string using string function.</h3>
<pre><code class="language-php">&lt;?php
  echo strcmp(&quot;Hello world!&quot;, &quot;Hello world&quot;);
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>0
</code></pre>
<h2>7. Write a PHP program using following string function:</h2>
<ul>
<li>strrev()</li>
<li>strpos()</li>
<li>strrpos()</li>
<li>str_replace()</li>
<li>ucwords()</li>
<li>strtoupper()</li>
<li>strtolower()</li>
</ul>
<pre><code class="language-php">&lt;?php
  echo strrev(&quot;Hello world!&quot;).&quot;&lt;/br&gt;&quot;;
  echo strpos(&quot;Hello world!&quot;, &quot;world&quot;).&quot;&lt;/br&gt;&quot;;
  echo strrpos(&quot;I love php, I love php too!&quot;,&quot;php&quot;).&quot;&lt;/br&gt;&quot;;
  echo str_replace(&quot;world&quot;, &quot;bvit&quot;, &quot;Hello world!&quot;).&quot;&lt;/br&gt;&quot;;
  echo ucwords(&quot;Welcome to php world&quot;).&quot;&lt;/br&gt;&quot;;
  echo strtoupper(&quot;Information Technology&quot;).&quot;&lt;/br&gt;&quot;;
  echo strtolower(&quot;INFORMATION TECHNOLOGY&quot;).&quot;&lt;/br&gt;&quot;;
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>!dlrow olleH
6
19
Hello bvit!
Welcome To Php World
INFORMATION TECHNOLOGY
information technology
</code></pre>
<h2>8. Write a PHP program to use: and anonymous function.</h2>
<h3>User define function</h3>
<pre><code class="language-php">&lt;?php
  function writeMessage() {
    echo &quot;Welcome to PHP world&quot;;
  }
  writeMessage();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Welcome to PHP world
</code></pre>
<h3>Variable function</h3>
<pre><code class="language-php">&lt;?php
  function writeMessage() {
    echo &quot;Welcome to PHP world&quot;;
  }

  $w = &quot;writeMessage&quot;;
  $w();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Welcome to PHP world
</code></pre>
<h3>Anonymous function</h3>
<pre><code class="language-php">&lt;?php
  $a=function() { echo &quot;Anonymous function&quot;; };
  $a();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Anonymous function
</code></pre>
<h2>9. Write a PHP program to create PDF document by using graphics concept.</h2>
<pre><code class="language-php">&lt;?php
  require('fpdf.php');
  $pdf = new FPDF();
  $pdf-&gt;AddPage();
  $pdf-&gt;SetFont('Arial','B',16);
  $pdf-&gt;Cell(40,10,'Hello World!');
  $pdf-&gt;Output();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Hello World
</code></pre>
<h2>10. Write a PHP program</h2>
<h3>a) To inherit member of superclass in subclass</h3>
<pre><code class="language-php">&lt;?php
class Class1 {
  function func() {
    echo &quot;Hello World&quot;;
  }
}

class Class2 extends Class1 {
  function echo() {
    echo &quot;Bye World&quot;;
  }
}

$o = new Class2;
$o-&gt;func();
$o-&gt;echo();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Hello World
Bye World
</code></pre>
<h3>b) Create constructor to initialize object of class by using object oriented concept.</h3>
<pre><code class="language-php">&lt;?php
class Obj {
  public function __construct($name, $surname) {
    $this-&gt;name=$name;
    $this-&gt;surname=$surname;
  }
  public function showName() {
    echo &quot;My name is &quot;.$this-&gt;name.&quot; &quot;.$this-&gt;surname;
  }
}

$sid=new Obj(&quot;Aman&quot;,&quot;Varma&quot;);
$sid-&gt;showName();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>My name is Aman Varma
</code></pre>
<h2>11. Write a PHP program on</h2>
<h3>Introspection</h3>
<pre><code class="language-php">&lt;?php
if (!class_exists(&quot;Obj&quot;)) {
  echo &quot;Class don't exists.&quot;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Class don't exists
</code></pre>
<h3>Serialization.</h3>
<pre><code class="language-php">&lt;?php
echo serialize(array(&quot;Red&quot;));
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>a:1:{i:0;s:3:&quot;Red&quot;;}
</code></pre>
<h2>12. Design a web page using following form controls:</h2>
<ul>
<li>a) Textbox</li>
<li>b) Radio button</li>
<li>c) Check box</li>
<li>d) Button</li>
</ul>
<pre><code class="language-php">&lt;form action=&quot;&lt;?php 1_SELF_PHP ?&gt;&quot; method=&quot;post&quot;&gt;
  Name:
  &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;
  Sex:
  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;Male&lt;/input&gt;
  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;Female&lt;/input&gt;
  Vehical:
  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;bike&quot;&gt;Bike&lt;/input&gt;
  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;car&quot;&gt;Car&lt;/input&gt;
  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;scooter&quot;&gt;Scooter&lt;/input&gt;
  &lt;button name=&quot;submit&quot;&gt;Submit&lt;/button&gt;
&lt;/form&gt;

&lt;?php
if ( isset($_POST[&quot;submit&quot;]) ) {
  echo $_POST[&quot;name&quot;].&quot; is &quot;.$_POST[&quot;sex&quot;].&quot; will travel by &quot;;
  foreach ($_POST[&quot;vehicle&quot;] as $selected) {
    echo $selected.&quot; &quot;;
  }
}
?&gt;
</code></pre>
<h2>13. Design a web page using following form controls:</h2>
<ul>
<li>a) List box</li>
<li>b) Hidden field box</li>
</ul>
<pre><code class="language-php">&lt;form action=&quot;&lt;? $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;name&quot; value=&quot;Jone&quot;&gt;
  &lt;select name=&quot;foods&quot;&gt;
    &lt;option value=&quot;Tomatoes&quot;&gt;Tomatoes&lt;/option&gt;
    &lt;option value=&quot;Cucumbers&quot;&gt;Cucumbers&lt;/option&gt;
    &lt;option value=&quot;Celery&quot;&gt;Celery&lt;/option&gt;
  &lt;/select&gt;
  &lt;br&gt;
  &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot;/&gt;
&lt;/form&gt;

&lt;?php
  if( isset($_POST[&quot;foods&quot;]) ) {
    echo $_POST[&quot;name&quot;].&quot; have chosen &quot;.$_POST[&quot;foods&quot;];
  }
?&gt;
</code></pre>
<h2>14. Develop a web page with data validation.</h2>
<pre><code class="language-php">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;
  Name:&lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;
  &lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;

&lt;?php
  if (!preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;])) {
    echo &quot;Only letter and whitespace is allowed&quot;;
  }
?&gt;
</code></pre>
<h2>15. Write a PHP program to:</h2>
<h3>Create cookies</h3>
<pre><code class="language-php">&lt;?php
setcookie(&quot;name&quot;, &quot;Jone&quot;, time() + (86400 * 30), &quot;/&quot;);
?&gt;
&lt;?php
if (isset($_COOKIE[&quot;name&quot;])) {
  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Name: Jone
</code></pre>
<ul>
<li>
<p>Modify cookies value
Set cookie agien with setcookie function.</p>
</li>
<li>
<p>Delete cookies</p>
</li>
</ul>
<pre><code class="language-php">&lt;?php
setcookie(&quot;name&quot;, &quot;&quot;, time() - 3600, &quot;/&quot;);
?&gt;
&lt;?php
if (isset($_COOKIE[&quot;name&quot;])) {
  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];
} else {
  echo &quot;Cookie is not set.&quot;;
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Cookie is not set.
</code></pre>
<h2>16. Write a PHP program to:</h2>
<ul>
<li>Start session</li>
<li>Get session variable</li>
<li>Destroy session</li>
</ul>
<pre><code class="language-php">&lt;?php
  session_start();

  $_SESSION[&quot;color&quot;] = &quot;Red&quot;;
  $_SESSION[&quot;animal&quot;] = &quot;Lion&quot;;

  echo $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];

  session_unset();
  session_destroy();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Red Lion
</code></pre>
<h2>17. Write a PHP program for sending and receiving plain text message (sending email).</h2>
<pre><code class="language-php">&lt;?php
  $status = mail(&quot;AnzenKodo@altmail.com&quot;, &quot;Title&quot;, &quot;Hello World&quot;);
  if ($status) {
    echo &quot;Mail is sent.&quot;;
  } else {
    echo &quot;Mail can't be sent&quot;;
  }
?&gt;
</code></pre>
<h2>18. Write a PHP program to</h2>
<h3>Create database</h3>
<pre><code class="language-php">&lt;?php
// Create connection
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
// Check connection
if ($conn-&gt;connect_error) {
  die(&quot;Connection failed.&quot;);
}

// Create database
$sql = &quot;CREATE DATABASE myDB&quot;;
if (mysqli_query($conn, $sql)) {
  echo &quot;Database created successfully&quot;;
} else {
  echo &quot;Error creating database&quot;;
}

mysqli_close($conn);
?&gt;
</code></pre>
<h3>Creation of table.</h3>
<pre><code class="language-php">&lt;?php
// Create connection
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
// Check connection
if (!$conn) {
  die(&quot;Connection failed&quot;);
}

// sql to create table
$sql = &quot;CREATE TABLE MyGuests(id INT(6))&quot;;

if (mysqli_query($conn, $sql)) {
  echo &quot;Table MyGuests created successfully&quot;;
} else {
  echo &quot;Error creating table: &quot; . $conn-&gt;error;
}

$conn-&gt;close();
?&gt;
</code></pre>
<h2>19. Write a PHP program to Inserting and retrieving the query result operations and Update ,Delete operations on table data.</h2>
<pre><code class="language-php">&lt;?php
// Connecting to MySQL
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
if (!$conn) {
  die(&quot;Error: &quot;.mysqli_error($conn));
}

// Inserting data
$sql = &quot;INSERT INTO my_table(id, name) VALUES (1, 'Jone'), (2, 'Jonney)&quot;;
if (!mysqli_query($conn, $sql)) {
  die(&quot;Error&quot;);
}

// Retrieving data
$sql = &quot;SELECT * FROM my_table&quot;;
if ($result = mysqli_query($conn, $sql)) {
  if (mysqli_num_rows($result) &gt; 0) {
    while ($row = mysqli_fetch_array($result)) {
      echo &quot;ID: &quot;.$row[&quot;id&quot;].&quot;, Name: &quot;.$row[&quot;name&quot;];
    }
  } else {
    echo &quot;Rows can't be zero&quot;;
  }
} else {
  die(&quot;Error: &quot;.mysqli_error($conn));
}

// Update data
$sql = &quot;UPDATE my_table SET name='tim' WHERE id=2&quot;;
if (!mysqli_query($conn, $sql) {
  die(&quot;Error&quot;);
}

// Delete data
$sql = &quot;DELETE FROM my_table WHERE id=1&quot;;
if (!mysqli_query($conn, $sql) {
  die(&quot;Error&quot;));
}

mysqli_close();
?&gt;
</code></pre>]]></content>
  </entry>
</feed>
