<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AK#Notes</title>
  <subtitle>This my personal website where I post my notes about thing that I have learn.</subtitle>
  <link href="https://anzenkodo.github.io/notes/" />
  <link href="https://anzenkodo.github.io/notes/" rel="self" />
	<id>https://anzenkodo.github.io/notes/</id>
  <updated>2023-01-09T10:08:04.993Z</updated>
  <author>
    <name>Axel</name>
    <email>AnzenKodo@altmails.com</email>
  </author>
    <entry>
    <title>Home</title>
    <link href="https://anzenkodo.github.io/notes/" />
    <updated>2023-01-09T10:08:04.993Z</updated>
    <id>/notes/</id>
    <content type="html"><![CDATA[<p>This my personal website where I post my notes about thing that I have learn.</p>
<h2>Features</h2>
<ul>
<li>Easy to:
<ul>
<li>Setup</li>
<li>Configure</li>
<li>Write</li>
</ul>
</li>
<li>Supports:
<ul>
<li>Tags</li>
<li>Search (Power by <a href="https://duckduckgo.com/">DuckDuckGo</a>)</li>
<li>Canonical</li>
<li><a href="https://ogp.me/">Open Graph</a></li>
<li>Analytics</li>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
</ul>
</li>
<li>Auto generate:
<ul>
<li>GitHub Pages Actions file</li>
<li>Favicon</li>
<li>Sitemap</li>
<li>404 page</li>
<li>CSS</li>
<li><code>mainfest.json</code> file</li>
<li>Feeds
<ul>
<li>RSS</li>
<li>JSON</li>
<li>Atom</li>
</ul>
</li>
</ul>
</li>
<li>No Client side JavaScript</li>
<li>Minified HTML &amp; Inline CSS</li>
<li>Lightweight</li>
</ul>
<h2>Getting Started</h2>
<h3>Installing</h3>
<ul>
<li>Download deno from <a href="https://deno.land/">https://deno.land/</a> and install it.</li>
<li>After installing deno run following commands.</li>
</ul>
<pre><code class="language-sh"># Install the dblog
deno run https://deno.land/x/dblog/install.js # Add deno to path, if you didn't already.

# See all the options that are available
dblog --help

# Setup the your blog (Skip this if already your blog setup)
dblog --setup

# Make your blog and Run on localhost
dblog --serve
</code></pre>
<h3>Update</h3>
<p>To update dblog, rerun the installation command.</p>
<pre><code class="language-sh">deno run https://deno.land/x/dblog/install.js
</code></pre>
<h3>Run dblog without installing dblog</h3>
<pre><code class="language-sh">deno run -A https://deno.land/x/dblog/mod.js --help
</code></pre>
<h2>Live Demo &amp; Folder</h2>
<ul>
<li><a href="https://anzenkodo.github.io/dblog">Live Demo</a></li>
<li><a href="https://github.com/AnzenKodo/dblog/tree/gh-pages">Generated Files</a></li>
</ul>
<h2>Configuration</h2>
<p>Place <code>config.json</code> in root folder to edit default configuration. The
<code>config.json</code> is optional.</p>
<p><strong>The <code>config.json</code> with default configuration:</strong></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;dblog&quot;,
  &quot;start_url&quot;: &quot;https://AnzenKodo.github.io/dblog/&quot;,
  &quot;description&quot;: &quot;dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.&quot;,
  &quot;email&quot;: &quot;&quot;,
  &quot;author&quot;: &quot;AnzenKodo&quot;,
  &quot;posts&quot;: &quot;./posts&quot;,
  &quot;output&quot;: &quot;./site&quot;,
  &quot;favicon&quot;: &quot;favicon.svg&quot;,
  &quot;lang&quot;: &quot;en-US&quot;,
  &quot;port&quot;: 8000,
  &quot;background&quot;: &quot;#ffffff&quot;,
  &quot;foreground&quot;: &quot;#000000&quot;,
  &quot;theme&quot;: &quot;#01a252&quot;,
  &quot;footer&quot;: &quot;&lt;p&gt;Made by &lt;a href=\&quot;https://AnzenKodo.github.io/AnzenKodo\&quot;&gt;AnzenKodo&lt;/a&gt; under &lt;a href=\&quot;https://anzenkodo.github.io/dblog/LICENSE\&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;\n&quot;,
  &quot;page404&quot;: &quot;404 Page Not Found, Sorry :(&quot;,
  &quot;backup&quot;: false,
  &quot;exclude&quot;: [
    &quot;config.json&quot;,
    &quot;backup.json&quot;
  ],
  &quot;nav&quot;: {},
  &quot;head&quot;: &quot;&quot;
}
</code></pre>
<p><strong>Note:</strong> Every option is optional.</p>
<ul>
<li><strong>name</strong> - Name of your blog.</li>
<li><strong>start_url</strong> - Start URL of your site. <em>Example:</em> ‘<a href="https://example.com/">https://example.com/</a>’,
‘<a href="https://blog.example.com/">https://blog.example.com/</a>’, ‘<a href="https://example.com/blog/">https://example.com/blog/</a>’</li>
<li><strong>email</strong> - Your email address. This will enable ‘Reply with Email’ button in
posts.</li>
<li><strong>author</strong> - Your name or username.</li>
<li><strong>posts</strong> - Path of posts.</li>
<li><strong>output</strong> - Folder where your blog build will be placed. <em>Example:</em> ‘./blog’,
‘…/site/blog’, ‘site/blog’.</li>
<li><strong>favicon</strong> - <em><strong>Recommended 500x500px</strong></em>. Favicon location. <em>If empty,
generated favicon will be used</em>. <em>Example:</em> ‘./favicon.png’,
‘./static/favicon.icon’, ‘…/favicon.jpg’.</li>
<li><strong>lang</strong> - Blog language in ‘RFC 5646’ format. Example: ‘ja’ for Japanese,
‘sv’ for Swedish, ‘it’ for Italian. See
<a href="https://wikipedia.org/wiki/IETF_language_tag#List_of_common_primary_language_subtags">List of common primary language subtags in Wikipedia</a></li>
<li><strong>footer</strong> - Footer of your website. <em>Supports CommonMark Markdown format</em>.
<em>Example:</em>
<code>Made by [AnzenKodo](https://AnzenKodo.github.io/AnzenKodo) uder [MIT License](https://anzenkodo.github.io/dblog/LICENSE.html)</code>.</li>
<li><strong>port</strong> - Port of your blog on localhost. <em>Example</em>: ‘8080’, ‘8300’, ‘8400’.</li>
<li><strong>background</strong> - Background color in light mode. Becomes foreground color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>foreground</strong> - Foreground color in light mode. Becomes background color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>theme</strong> - Blog theme color. <em>Example:</em> ‘#0583f2’, ‘#f20544’, ‘#f2b705’.</li>
<li><strong>page404</strong> - 404 page message. <em>Example:</em> ‘Sorry, page not found :(’.</li>
<li><strong>backup</strong> - Backup file location. <em>Example:</em> <code>false</code> to don’t generate
<code>backup.json</code> file, ‘./backup.json’, ‘./site/backup.json’, ‘…/backup.json’.</li>
<li><strong>exclude</strong> - Exclude files or folder. <em>Example:</em><pre><code class="language-json">&quot;exclude&quot;: [ &quot;.env&quot;, &quot;todo.md&quot;, &quot;drafts&quot; ],
</code></pre>
</li>
<li><strong>nav</strong> - Nav bar item list. Example:<pre><code class="language-json">&quot;nav&quot;: {
  &quot;about&quot;: &quot;./about.md&quot;,
  &quot;stie&quot;: &quot;https://anzenkodo.github.io/AnzenKodo&quot;
}
</code></pre>
</li>
<li><strong>head</strong> - If you analytics or any other tags you want to put on head tag.
<em>Example:</em>
<code>&lt;link rel=&quot;preconnect&quot; href=&quot;//www.google-analytics.com&quot; crossorigin=&quot;&quot;&gt;</code>.</li>
</ul>
<h2>CLI Options</h2>
<pre><code class="language-sh">dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.

Website: https://anzenkodo.github.io/dblog
Package: https://deno.land/x/dblog
Repo: https://github.com/AnzenKodo/dblog
Docs: https://anzenkodo.github.io/dblog/posts/dblog-Docs.html

USAGE:
  dblog [OPTIONS]

OPTIONS:
  --serve   Build blog and Start localhost.
    --noopen  Don't open browser, when starting localhost.
  --build   Build blog without starting localhost.
  --setup   Setup new blog.
  --backup  Restore blog if 'backup.json' file available.
  --readme  Generate 'README.md' file.
  --help    Print help information.
</code></pre>
<h2>File Options</h2>
<pre><code>---
title: If empty the file name will be used
description: If empty the first paragraph will be used.
tags: [ &quot;tag1&quot;, &quot;tag2&quot; ]
date: 20/08/2020
canonical:
---
</code></pre>
<ul>
<li><strong>date</strong> - If empty, the file date will be used. <em>Note:</em> The file <code>date</code> might
not always right. So always give you own date.</li>
<li><strong>canonical</strong> - Share content between multiple sites without impacting SEO.
Just put canonical URL. Know more about
<a href="https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls">canonical url</a>.</li>
</ul>
<h3>If file name start with underscore “_” it will be consider as draft.</h3>
<p><strong>Example:</strong> <code>posts/_This is draft.md</code></p>
<h2>Markdown Guide</h2>
<h3><a href="https://commonmark.org/help/">CommonMark</a> Syntex</h3>
<h4>Heading</h4>
<pre><code class="language-md"># H1

## H2

### H3

#### H4

##### H5

###### H6
</code></pre>
<h1>H1</h1>
<h2>H2</h2>
<h3>H3</h3>
<h4>H4</h4>
<h5>H5</h5>
<h6>H6</h6>
<h4>Inline style</h4>
<pre><code class="language-md">**Bold** _Italic_ ~~Strikethrough~~
</code></pre>
<p><strong>Bold</strong> <em>Italic</em> <s>Strikethrough</s></p>
<h4>Link and Image</h4>
<pre><code class="language-md">[website](https://anzenkodo.github.io/dblog)
![Jurassic Deno by Samip Poudel](https://deno.land/images/artwork/jurassicDeno.jpg)
</code></pre>
<p><a href="https://anzenkodo.github.io/dblog">website</a>
<img src="https://deno.land/images/artwork/jurassicDeno.jpg" alt="Jurassic Deno by Samip Poudel"></p>
<h4>Blockquote</h4>
<pre><code class="language-md">&gt; 'The road to hell is paved with good intentions' by Abbot Bernard
</code></pre>
<blockquote>
<p>‘The road to hell is paved with good intentions’ by Abbot Bernard</p>
</blockquote>
<h4>List</h4>
<pre><code class="language-md">- List
  - List
- List

1. One
2. Two
3. Three
</code></pre>
<ul>
<li>List
<ul>
<li>List</li>
</ul>
</li>
<li>List</li>
</ul>
<ol>
<li>One</li>
<li>Two</li>
<li>Three</li>
</ol>
<h4>Horizontal rule</h4>
<pre><code class="language-md">---
</code></pre>
<hr>
<h4>Code block</h4>
<div class="highlight highlight-source-lisp notranslate position-relative overflow-auto">
<pre>
`Inline code` with backticks
```js
  console.log("Code Blog in JavaScript");
```
</pre>
</div>
<p><code>Inline code</code> with backticks</p>
<pre><code class="language-js">console.log(&quot;Code Blog in JavaScript&quot;);
</code></pre>
<h3>Additional Markdown syntax</h3>
<h4>Checkbox</h4>
<pre><code class="language-md">- [ ] Checkbox
- [x] Checkbox with tick
</code></pre>
<ul class="task-list">
<li class="task-list-item"><input type="checkbox" id="cbx_0" disabled="true"><label for="cbx_0"> Checkbox</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> Checkbox with tick</label></li>
</ul>
<h4>Image with caption</h4>
<pre><code class="language-md">![Deno](https://deno.land/images/artwork/deno_matrix.png &quot;Matrix by bramaudi&quot;)
</code></pre>
<figure data-type="image"><img src="https://deno.land/images/artwork/deno_matrix.png" alt="Deno" loading="lazy" decoding="async"><figcaption>Matrix by bramaudi</figcaption></figure>
<h4>Footer</h4>
<pre><code class="language-md">Here is a footnote reference[^1]. [^1]: Here is the footnote.
</code></pre>
<p>Here is a footnote reference[^1]. [^1]: Here is the footnote.</p>
<h4>Additional inline syntax</h4>
<pre><code class="language-md">~sub~ ^sup^ ==mark== [[kbd]] _underline_ ++insert++ ~~delete~~
</code></pre>
<p><sub>sub</sub>
<sup>sup</sup>
<mark>mark</mark>
<kbd>kbd</kbd>
<u>underline</u>
<ins>insert</ins>
<del>delete</del></p>
<h4>Description list</h4>
<pre><code class="language-md">: Definition 1 Term 2 with _inline markup_ : Definition 2 Third paragraph of
definition 2.
</code></pre>
<dl>
  <dt>Definition 1</dt>
  <dd>Term 2 with inline.</dd>
  <dt>Definition 2</dt>
  <dd>Third paragraph of definition 2.</dd>
</dl>
<h4>Abbreviation</h4>
<pre><code class="language-md">*[abbr]: Abbreviation
</code></pre>
<p><abbr title="Abbreviation">abbr</abbr></p>
<h4>Table</h4>
<h5>Normal</h5>
<pre><code class="language-md">| Syntax    | Description |
| --------- | ----------- |
| Header    | Title       |
| Paragraph | Text        |
</code></pre>
<table>
<thead>
<tr>
<th>Syntax</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Header</td>
<td>Title</td>
</tr>
<tr>
<td>Paragraph</td>
<td>Text</td>
</tr>
</tbody>
</table>
<h5>Multiline</h5>
<pre><code class="language-md">| Markdown  | Rendered HTML |
| --------- | ------------- |
| _Italic_  | _Italic_      |
|           |               |
| - Item 1  | - Item 1      |
| - Item 2  | - Item 2      |
| ```python | ```python \   |
| .1 + .2   | .1 + .2       |
</code></pre>
<table><thead><tr><th>Markdown</th><th>Rendered HTML</th></tr></thead> <tbody>
  <tr> <td> <pre><code>*Italic* </code></pre> </td> <td> <p><em>Italic</em></p>
  </td> </tr> <tr> <td> <pre><code>- Item 1 - Item 2</code></pre> </td> <td>
  <ul> <li>Item 1</li> <li>Item 2</li> </ul> </td> </tr> <tr> <td>
<pre><code>
```python
.1 + .2
```
</code></pre> </td> <td> <pre><code class="language-python">.1 + .2
  </code></pre> </td> </tr> </tbody> </table>
<h5>Rowspan</h5>
<pre><code class="language-md">|                       Stage | Direct Products | ATP Yields |
| --------------------------: | --------------: | ---------: |
|                  Glycolysis |           2 ATP |            |
|                          ^^ |          2 NADH |   3--5 ATP |
|          Pyruvaye oxidation |          2 NADH |      5 ATP |
|           Citric acid cycle |           2 ATP |            |
|                          ^^ |          6 NADH |     15 ATP |
|                          ^^ |         2 FADH2 |      3 ATP |
|              **30--32** ATP |                 |            |
| [Net ATP yields per hexose] |                 |            |
</code></pre>
<table> <caption id="netatpyieldsperhexose">Net ATP yields per hexose</caption>
  <thead> <tr> <th align="right">Stage</th> <th align="right">Direct
Products</th> <th align="right">ATP Yields</th> </tr> </thead> <tbody> <tr> <td
align="right" rowspan="2">Glycolysis</td> <td align="right" colspan="2">2
ATP</td> </tr> <tr> <td align="right">2 NADH</td> <td align="right">3–5
ATP</td> </tr> <tr> <td align="right">Pyruvaye oxidation</td> <td
align="right">2 NADH</td> <td align="right">5 ATP</td> </tr> <tr> <td
align="right" rowspan="3">Citric acid cycle</td> <td align="right"
colspan="2">2 ATP</td> </tr> <tr> <td align="right">6 NADH</td> <td
align="right">15 ATP</td> </tr> <tr> <td align="right">2 FADH2</td> <td
align="right">3 ATP</td> </tr> <tr> <td align="right"
colspan="3"><strong>30–32</strong> ATP</td> </tr> </tbody> </table>
<h4>Headerless</h4>
<pre><code class="language-md">|--|--|--|--|--|--|--|--| |♜| |♝|♛|♚|♝|♞|♜| | |♟|♟|♟| |♟|♟|♟| |♟| |♞| | | | | |
| |♗| | |♟| | | | | | | | |♙| | | | | | | | | |♘| | | |♙|♙|♙|♙| |♙|♙|♙|
|♖|♘|♗|♕|♔| | |♖|
</code></pre>
<table> <tbody> <tr> <td>♜</td> <td></td> <td>♝</td> <td>♛</td> <td>♚</td>
  <td>♝</td> <td>♞</td> <td>♜</td> </tr> <tr> <td></td> <td>♟</td> <td>♟</td>
  <td>♟</td> <td></td> <td>♟</td> <td>♟</td> <td>♟</td> </tr> <tr> <td>♟</td>
  <td></td> <td>♞</td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr>
  <tr> <td></td> <td>♗</td> <td></td> <td></td> <td>♟</td> <td></td> <td></td>
  <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td>♙</td>
  <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td>
  <td></td> <td></td> <td>♘</td> <td></td> <td></td> </tr> <tr> <td>♙</td>
  <td>♙</td> <td>♙</td> <td>♙</td> <td></td> <td>♙</td> <td>♙</td> <td>♙</td>
  </tr> <tr> <td>♖</td> <td>♘</td> <td>♗</td> <td>♕</td> <td>♔</td> <td></td>
  <td></td> <td>♖</td> </tr> </tbody> </table>]]></content>
  </entry>
  <entry>
    <title>keys</title>
    <link href="https://anzenkodo.github.io/notes/Programming/database/keys.html" />
    <updated>2023-01-09T10:08:04.993Z</updated>
    <id>/notes/Programming/database/keys.html</id>
    <content type="html"><![CDATA[<p>Keys are used to uniquely identify any record or row of data from the table. It
is also used to establish and identify relationships between tables.</p>
<p><strong>Example:</strong> ID is used as a key in the “student” table because it is unique for
each student.</p>
<h2>Primary Key</h2>
<ul>
<li>It is the first key.</li>
<li>Used to identify one and only one instance of an entity uniquely.</li>
</ul>
<h2>Candidate Key</h2>
<ul>
<li>A candidate key is an attribute or set of attributes that can uiquely identify
a tuple.</li>
<li>The candidate keys are as strong as the primary key.</li>
<li>Example: “employee” table, id is best suited for the primary key. The rest of
the attributes like SSN, Passport_Number, License_Number are considered a
candidate key.</li>
</ul>
<h2>Super Key</h2>
<ul>
<li>Super Key is an attribute set that can uniquely identify a tuple.</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>question bank</title>
    <link href="https://anzenkodo.github.io/notes/Programming/database/question-bank.html" />
    <updated>2023-01-09T10:08:04.993Z</updated>
    <id>/notes/Programming/database/question-bank.html</id>
    <content type="html"><![CDATA[<h2>Question bank for 2 Marks.</h2>
<h3>1. Define Entity Set?</h3>
<ul>
<li>An entity set is a collection of similar entites.</li>
<li>An entity is an object or concept in the real world that can be identified and
tracked, such as a person, a place or a thing.</li>
<li>An entity set is a set of entities of the same type that share common
properties.</li>
<li>Example:
<ul>
<li>A “customer” entity set might include all of the customer records in a
customer database, with each record repesenting a single customer. The
entity set would include attributes such as the customer’s name, address,
and phone number, as well as any other relevant information.</li>
</ul>
</li>
<li>Entity sets represent as tables in a database, with each row representing a
single entity and each column representing an attribute of that entity.</li>
</ul>
<h3>2. Define Generalization?</h3>
<h3>3. Define Specialization?</h3>
<h3>4. Explain referential integrity constraints with example?</h3>
<h3>5. Explain Primary key constraint with example?</h3>
<h2>Question bank for 3 Marks.</h2>
<h3>1. Write notes on types of attributes?</h3>
<h3>2. Explain different types of Keys in DBMS?</h3>
<h3>3. List out and explain mapping Cardinalities in ER Diagram?</h3>
<h3>4. Write notes on the following constraints: i) Not NULL ii) Unique</h3>
<h3>5. Write notes on the following</h3>
<h4>1. Left Outer Join</h4>
<h4>2. Right Outer Join</h4>
<h2>Question bank for 5 Marks.</h2>
<h3>1. Construct an ER diagram for a car insurance company that has a set of customers each of whom owns one or more cars, Each car has associated with it zero to any number of recorded accidents?</h3>
<h3>2. Explain Unary operations in relational algebra?</h3>
<h3>3. Explain Set Theory operation in relational algebra?</h3>
<h3>4. Define generalization and specialization hierarchy for a motor vehicle sales company. The Company sells motorcycles, passenger cars, vans and buses. Justify your placement of attributes at each level of hierarchy. Explain why they should not be placed at higher or lower level.</h3>]]></content>
  </entry>
  <entry>
    <title>er diagram</title>
    <link href="https://anzenkodo.github.io/notes/Programming/database/er-diagram/" />
    <updated>2023-01-09T10:08:04.993Z</updated>
    <id>/notes/Programming/database/er-diagram/</id>
    <content type="html"><![CDATA[<p>An Entity Relationship Diagram (ERD) is a visual representation of different
data using conventions that describe how these data are related to each other.</p>
<p>Example of ER Diagram:</p>
<figure data-type="image"><img src="./ER.svg" alt="ER Diagram" loading="lazy" decoding="async"></figure>
<p>In the diagram, the elements inside rectangles are called entities while the
items inside diamonds denote the relationships between entities.</p>
<p>In the diagram, the elements inside rectangles are called entities while the
items inside diamonds denote the relationships between entities.</p>
<h2>Features</h2>
<h3>Entity</h3>
<ul>
<li>An entity can be a person, place, event, or object that is relevant to given
system.</li>
<li>For Example, a school system may include student, teacher, major courses,
subject, fees, and other items.</li>
<li>Entites are represented in ER diagrams by a rectangles and named using
singular nouns.</li>
</ul>
<h3>Weak Entity</h3>
<ul>
<li>A weak entity is an entity that depends on teh existence of another entity.</li>
<li>A weak entity is represented in a database by a separated table, but it does
not have a primary key of its own.</li>
<li>It relies on the primary key of the entity on which it depends.</li>
<li>Example:
<ul>
<li>Consider a databse of orders placed by customers at a retail store.
“customer” entity might be the identifying entity, while the “order” entity
is the weak entity. Each order is associated with specific customer, and the
customer’s primary key (e.g. a customer ID) is used as the primary key for
the order as well. This means that the order cannot be uniquely identified
without also specifying the customer to which it belongs.</li>
</ul>
</li>
<li>The single identifying entity can have multiple weak entities associated with
it.</li>
<li>Diagram:<pre><code>+---------+      +--------------+
|         |      |+------------+|
| Orders  |------||Orders Items||
|         |      |+------------+|
+---------+      +--------------+
</code></pre>
</li>
</ul>
<h3>Attribute</h3>
<ul>
<li>An attributes is a characterstic or property of an entity.</li>
<li>Attributes are represented as columns in a database table, with each row
representing a single entity and each column representing an attribute of that
entity.</li>
<li>Example: A “customer” table might include attributes such as “name”,
“address,” and “phone number,” with each attribute storing information about a
perticular customer.</li>
<li>There are two types of attributes:
<ul>
<li>Multivalued Attribute</li>
<li>Derived Attribute</li>
</ul>
</li>
</ul>
<h4>Multivalued Attribute</h4>
<ul>
<li>If an attribute can have more than one value it is called an multivalued
attribute.</li>
<li>It is important to note that this is different to an attribute having it own
attributes.</li>
<li>Example: A “customer” entity can have multiple “phone_numbers” values.</li>
<li>Diagram: <img src="./Multivalued-Attribute.svg" alt="Multivalued Attribute Diagram"></li>
</ul>
<h4>Derived Attribute</h4>
<ul>
<li>An attribute based on another attribute.</li>
<li>Example: “Age” can be derived from “Date of birth”.</li>
<li>Diagram: <img src="./Derived-Attribute.svg" alt="Derived Attribute Diagram"></li>
</ul>
<h3>Relationship</h3>
<ul>
<li>A relationship describes how entities interact.</li>
<li>Example: The entity “carpenter” may be related to the entity “table” by the
relationship “builds” or “makes”.</li>
<li>Relationships are represented by diamond shapes and are labeled using verbs.</li>
</ul>
<h4>Recursive Relationship</h4>
<ul>
<li>The same entity participates more than once in the relationship.</li>
<li>Example: An employee can be a supervisor and be supervised, so there is a
recursive relationship.</li>
</ul>
<h2>Extended Features</h2>
<h3>Generalization</h3>
<ul>
<li>A generalization hierarchy is a form of abstraction that specifies that two or
more entities that share common attributes can be generalized into a
higher-level entity type called a super type or generic entity.</li>
<li>The lower level of entities becomes the subtypes, or categories, to the super
type. Subtypes are dependent entities.</li>
<li>Example: Account is the higher-level entity set and saving account and current
account are lower-level entity sets.</li>
<li>Diagram: <img src="./Generalization.webp" alt="Generalization Diagram"></li>
</ul>
<h3>Specialization</h3>
<ul>
<li>Specialization is the process of taking subsets of the higher-level entity set
to form lower-level entity sets.</li>
<li>It is a process of defining a set of subclasses of an entity type, which is
called the super class of the specialization.</li>
<li>The process of defining subclass is based on the basis of some distinguish
characteristics of the entities in the super class.</li>
<li>Diagram: <img src="./Specialization.webp" alt="Specialization Diagram"></li>
</ul>
<h3>Aggregration</h3>
<ul>
<li>Aggregration is a process when relation between two entities is treated as a
single entity.</li>
<li>Example: The relationship between Center and Course together, is acting as an
Entity, which is in relationship with another entity Visitor.</li>
<li>Diagram: <img src="./Aggregration.webp" alt="Aggregration Diagram"></li>
</ul>
<h2>Resources</h2>
<ul>
<li><a href="https://www.lucidchart.com/pages/er-diagrams">What is an Entity Relationship Diagram (ERD)?</a></li>
<li><a href="https://www.studytonight.com/dbms/generalization-and-specialization.php">The Enhanced ER Model</a></li>
</ul>]]></content>
  </entry>
  <entry>
    <title>threaded binary tree</title>
    <link href="https://anzenkodo.github.io/notes/Programming/data-structure/tree/threaded-binary-tree.html" />
    <updated>2023-01-09T10:08:04.993Z</updated>
    <id>/notes/Programming/data-structure/tree/threaded-binary-tree.html</id>
    <content type="html"><![CDATA[<p>A threaded binary tree is a binary tree in which the nodes are threaded, or
connected, in a way that allows them to be traversed efficiently. In a threaded
binary tree, each node has a left and right pointer, just like in a regular
binary tree. However, if the left or right pointer of a node is null, it is
replaced with a thread that points to the in-order predecessor or successor of
the node, respectively. This allows the tree to be traversed in-order without
the need to follow a null pointer and backtrack, making the traversal more
efficient.</p>
<p>Threaded binary trees have several advantages over regular binary trees. They
use less memory, as the threads take up less space than full pointers. They also
allow for faster in-order traversal, as there is no need to follow null pointers
and backtrack. However, they are more difficult to modify than regular binary
trees, as the threads must be updated whenever the tree is modified.</p>
<p>Overall, threaded binary trees are a useful data structure for certain types of
tree traversal, but they may not be the best choice for all applications.</p>
<h2>Resources</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=1E95XJd5bS0">Threaded binary tree | data structure</a></li>
</ul>]]></content>
  </entry>
  <entry>
    <title>decision tree</title>
    <link href="https://anzenkodo.github.io/notes/Programming/data-structure/tree/decision-tree.html" />
    <updated>2023-01-09T10:08:04.993Z</updated>
    <id>/notes/Programming/data-structure/tree/decision-tree.html</id>
    <content type="html"><![CDATA[<p>A decision tree is a flowchart-like tree structure that is used to make a
decision or prediction based on multiple conditions. It is a supervised learning
algorithm, which means that it is trained on a labeled dataset, where the
correct output is already known.</p>
<p>The decision tree algorithm works by starting at the root node and asking a
series of questions based on the features of the data. Each question splits the
data into two branches, and the algorithm continues to ask questions and split
the data until it reaches a leaf node, which represents a prediction or
decision.</p>
<p>The goal of the decision tree algorithm is to create a tree that accurately
predicts the target variable based on the features of the data. The accuracy of
the prediction is determined by how well the tree is able to classify the
training data.</p>
<p>Decision trees are often used for classification tasks, such as determining
whether a given email is spam or not, or for regression tasks, such as
predicting the price of a house based on its features. They are also commonly
used in data mining and machine learning applications.</p>]]></content>
  </entry>
  <entry>
    <title>linked list</title>
    <link href="https://anzenkodo.github.io/notes/Programming/data-structure/linked-list/" />
    <updated>2023-01-09T10:08:04.993Z</updated>
    <id>/notes/Programming/data-structure/linked-list/</id>
    <content type="html"><![CDATA[<h2>What is traverse?</h2>
<ol>
<li>To traverse a data structure means to visit each element in the structure,
usually in a systematic way. In the context of a linked list, traversing the
list means visiting each node in the list, usually by following the next
pointers from one node to the next.</li>
<li>For example, if you have a linked list with nodes A, B, C, and D, and you
want to traverse the list, you might start at node A and follow the next
pointer to node B, then follow the next pointer to node C, and so on, until
you reach the end of the list.</li>
<li>Traversing a linked list can be useful for a variety of purposes, such as
searching for a specific element, updating the values of certain elements, or
simply printing out all the elements in the list.</li>
</ol>
<h2>What is queue?</h2>
<ol>
<li>A queue is a linear data structure that allows for the insertion of elements
at one end (called the back or rear of the queue) and the deletion of
elements at the other end (called the front or head of the queue). This is
known as a First-In, First-Out (FIFO) structure, as the elements that are
inserted first are also the first to be removed.</li>
<li>Queues are often used to store data that needs to be processed in a specific
order, or to store data that will be used by multiple consumers. For example,
a printer queue might store print jobs that need to be printed in the order
they were received, or a task queue might store tasks that need to be
completed by a set of worker threads.</li>
<li>Queues are useful for storing and managing data in a way that ensures that
elements are processed in a specific order, and that no element is processed
more than once. They can be implemented using a variety of data structures,
such as arrays, linked lists, or circular linked lists.</li>
</ol>]]></content>
  </entry>
  <entry>
    <title>doubly linked list</title>
    <link href="https://anzenkodo.github.io/notes/Programming/data-structure/linked-list/doubly-linked-list.html" />
    <updated>2023-01-09T10:08:04.993Z</updated>
    <id>/notes/Programming/data-structure/linked-list/doubly-linked-list.html</id>
    <content type="html"><![CDATA[<p>A doubly linked list is a linear data structure that consists of a sequence of
nodes, where each node stores a value and pointers to the previous and next
nodes in the list. The first node in the list is called the head, and the last
node in the list is called the tail. The head node typically has a NULL prev
pointer, and the tail node typically has a NULL next pointer, to indicate the
beginning and end of the list, respectively.</p>
<p>Doubly linked lists are useful for storing and manipulating sequences of data,
as they allow for efficient insertion and deletion of elements at any position
in the list. They also allow for efficient access to both the next and previous
elements in the list, as each node stores pointers to both its neighbors.</p>
<h2>Difference between Doubly and Singly Linked List?</h2>
<h3>Number of pointers</h3>
<p>A singly linked list stores a single pointer per node, which points to the next
node in the list. In contrast, a doubly linked list stores two pointers per
node, which point to the next and previous nodes in the list.</p>
<h3>Accessibility</h3>
<p>A singly linked list allows for efficient insertion and deletion of elements at
any position in the list, but does not allow for efficient access to elements at
arbitrary positions. In contrast, a doubly linked list allows for efficient
insertion and deletion of elements at any position in the list, as well as
efficient access to both the next and previous elements in the list.</p>
<h3>Memory usage</h3>
<p>A doubly linked list uses more memory than a singly linked list, as it stores
two pointers per node instead of just one. This can make it less efficient in
situations where memory usage is a concern.</p>
<h2>Agorithm to create doubly linked list and display the list.</h2>
<ol>
<li>Declare a head pointer and make it as NULL. This will be used to keep track
of the first node in the list.</li>
<li>Declare a tail pointer and make it as NULL. This will be used to keep track
of the last node in the list.</li>
<li>Read in the values for the nodes in the list.</li>
<li>For each value, create a new node with the value and set its next and prev
pointers to NULL.</li>
<li>If the list is empty, set the head and tail pointers to the new node.</li>
<li>If the list is not empty, set the next pointer of the tail node to the new
node, and the prev pointer of the new node to the tail node. Then, update the
tail pointer to point to the new node.</li>
<li>Repeat steps 4-6 until all values have been read in.</li>
<li>Traverse the list from the head and print the values of the nodes. To do
this, set a pointer to the head of the list and follow the next pointers
until you reach the end of the list.</li>
</ol>
<h2>Resources</h2>
<ol>
<li><a href="https://www.youtube.com/watch?v=e9NG_a6Z0mg">Introduction to Doubly Linked List</a></li>
</ol>]]></content>
  </entry>
  <entry>
    <title>singly linked list</title>
    <link href="https://anzenkodo.github.io/notes/Programming/data-structure/linked-list/singly-linked-list.html" />
    <updated>2023-01-09T10:08:04.993Z</updated>
    <id>/notes/Programming/data-structure/linked-list/singly-linked-list.html</id>
    <content type="html"><![CDATA[<p>A singly linked list is a linear data structure that consists of a sequence of
nodes, where each node stores a value and a pointer to the next node in the
list. The first node in the list is called the head, and the last node in the
list is called the tail. The tail node typically has a NULL next pointer to
indicate the end of the list.</p>
<p>Singly linked lists are useful for storing and manipulating sequences of data,
as they allow for efficient insertion and deletion of elements at any position
in the list. However, they do not allow for efficient access to elements at
arbitrary positions, as you have to traverse the list from the beginning to
access elements further down the list.</p>
<p>For example, to access the third element in a singly linked list with four
nodes, you would have to start at the head of the list and follow the next
pointers twice to reach the third node. This requires you to traverse the list
from the beginning, which can be inefficient if the list is large and you need
to access elements towards the end of the list.</p>
<p>In contrast, data structures like arrays or random-access lists allow for
efficient access to elements at arbitrary positions, as you can directly access
any element by its index. However, they may not be as efficient for inserting or
deleting elements at specific positions, as this may require shifting elements
around in the data structure.</p>
<p>Singly linked lists are efficient for inserting or deleting elements at specific
positions because they only require a single pointer per node, which makes it
easy to update the next pointers of the nodes around the insertion or deletion
point. Example:</p>
<ol>
<li>Create a new node with the desired value.</li>
<li>Set the next pointer of the new node to point to the current fourth node in
the list.</li>
<li>Set the next pointer of the second node in the list to point to the new node.</li>
</ol>
<h2>Example:</h2>
<pre><code>  head                                      tail
+------+    +------+    +------+    +------+
| data |    | data |    | data |    | data |
+------+    +------+    +------+    +------+
| next |---&gt;| next |---&gt;| next |---&gt;| next |---&gt; NULL
+------+    +------+    +------+    +------+
</code></pre>
<h2>Algorithm to insert new nodes at the beginning of singly Linked list</h2>
<ol>
<li><strong>Declare a head pointer and make it as NULL:</strong> The head pointer is a pointer
that points to the first node in the list. By initializing it to NULL, you
create an empty list with no nodes.</li>
<li><strong>Create a new node with the given data:</strong> To insert a new node at the
beginning of the list, you first need to create a new node with the desired
data. This can be done using a function that allocates memory for the new
node and sets its data field to the given value.</li>
<li><strong>Make the new node points to the head node:</strong> After creating the new node,
you need to update its next pointer to point to the current head node. This
will make the new node the first node in the list, with the head node as the
second node.</li>
<li><strong>Finally, make the new node as the head node:</strong> To complete the insertion,
you need to update the head pointer to point to the new node. This will make
the new node the first node in the list and the head of the list.</li>
</ol>
<h2>Resources</h2>
<ol>
<li><a href="https://youtu.be/HB7TcYklBHY">Singly Linked Lists Tutorial - What is a Linked List?</a></li>
</ol>]]></content>
  </entry>
  <entry>
    <title>circular linked list</title>
    <link href="https://anzenkodo.github.io/notes/Programming/data-structure/linked-list/circular-linked-list.html" />
    <updated>2023-01-09T10:08:04.993Z</updated>
    <id>/notes/Programming/data-structure/linked-list/circular-linked-list.html</id>
    <content type="html"><![CDATA[<p>A circular linked list is a type of linked list in which the last node points to
the first node, creating a circular chain. This structure has several advantages
over a traditional linear linked list:</p>
<ol>
<li>It allows for easier traversal: In a circular linked list, you can traverse
the entire list by starting at any node and following the next pointers until
you reach the starting node again. In a linear linked list, you would have to
check whether you have reached the end of the list at each step.</li>
<li>It allows for efficient insertion and deletion at the beginning or end of the
list: In a circular linked list, the last node is always adjacent to the
first node, so you can easily insert or delete nodes at either end of the
list without having to traverse the entire list.</li>
<li>It allows for efficient implementation of queue data structures: A queue is a
data structure that allows for insertion at one end (the back of the queue)
and deletion at the other end (the front of the queue). In a circular linked
list, you can implement a queue by keeping a pointer to both the front and
back of the queue and using the next pointers to move between nodes. This
allows for efficient insertion and deletion operations.</li>
</ol>
<p>Overall, the use of a circular linked list can make certain operations more
efficient compared to a linear linked list, particularly when it comes to
inserting and deleting nodes at the beginning or end of the list, or when
implementing queue data structures.</p>]]></content>
  </entry>
</feed>
