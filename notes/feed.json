{
  "version": "https://jsonfeed.org/version/1",
  "title": "AK#Notes",
  "home_page_url": "https://anzenkodo.github.io/notes",
  "feed_url": "https://anzenkodo.github.io/notes/feed.json",
  "description": "This my personal website where I post my notes about thing that I have learn.",
  "favicon": "https://anzenkodo.github.io/notes/favicon.png",
  "icon": "https://anzenkodo.github.io/notes/favicon.png",
  "author": {
    "name": "Axel",
    "url": "https://AnzenKodo.github.io/"
  },
  "items": [
    {
      "id": "https://anzenkodo.github.io/notes/",
      "url": "https://anzenkodo.github.io/notes/",
      "title": "Home",
      "content_html": "<p>This my personal website where I post my notes about thing that I have learn.</p>\n<h2>Features</h2>\n<ul>\n<li>Easy to:\n<ul>\n<li>Setup</li>\n<li>Configure</li>\n<li>Write</li>\n</ul>\n</li>\n<li>Supports:\n<ul>\n<li>Tags</li>\n<li>Search (Power by <a href=\"https://duckduckgo.com/\">DuckDuckGo</a>)</li>\n<li>Canonical</li>\n<li><a href=\"https://ogp.me/\">Open Graph</a></li>\n<li>Analytics</li>\n<li><a href=\"https://pages.github.com/\">GitHub Pages</a></li>\n</ul>\n</li>\n<li>Auto generate:\n<ul>\n<li>GitHub Pages Actions file</li>\n<li>Favicon</li>\n<li>Sitemap</li>\n<li>404 page</li>\n<li>CSS</li>\n<li><code>mainfest.json</code> file</li>\n<li>Feeds\n<ul>\n<li>RSS</li>\n<li>JSON</li>\n<li>Atom</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>No Client side JavaScript</li>\n<li>Minified HTML &amp; Inline CSS</li>\n<li>Lightweight</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installing</h3>\n<ul>\n<li>Download deno from <a href=\"https://deno.land/\">https://deno.land/</a> and install it.</li>\n<li>After installing deno run following commands.</li>\n</ul>\n<pre><code class=\"language-sh\"># Install the dblog\ndeno run https://deno.land/x/dblog/install.js # Add deno to path, if you didn't already.\n\n# See all the options that are available\ndblog --help\n\n# Setup the your blog (Skip this if already your blog setup)\ndblog --setup\n\n# Make your blog and Run on localhost\ndblog --serve\n</code></pre>\n<h3>Update</h3>\n<p>To update dblog, rerun the installation command.</p>\n<pre><code class=\"language-sh\">deno run https://deno.land/x/dblog/install.js\n</code></pre>\n<h3>Run dblog without installing dblog</h3>\n<pre><code class=\"language-sh\">deno run -A https://deno.land/x/dblog/mod.js --help\n</code></pre>\n<h2>Live Demo &amp; Folder</h2>\n<ul>\n<li><a href=\"https://anzenkodo.github.io/dblog\">Live Demo</a></li>\n<li><a href=\"https://github.com/AnzenKodo/dblog/tree/gh-pages\">Generated Files</a></li>\n</ul>\n<h2>Configuration</h2>\n<p>Place <code>config.json</code> in root folder to edit default configuration. The\n<code>config.json</code> is optional.</p>\n<p><strong>The <code>config.json</code> with default configuration:</strong></p>\n<pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;dblog&quot;,\n  &quot;start_url&quot;: &quot;https://AnzenKodo.github.io/dblog/&quot;,\n  &quot;description&quot;: &quot;dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.&quot;,\n  &quot;email&quot;: &quot;&quot;,\n  &quot;author&quot;: &quot;AnzenKodo&quot;,\n  &quot;posts&quot;: &quot;./posts&quot;,\n  &quot;output&quot;: &quot;./site&quot;,\n  &quot;favicon&quot;: &quot;favicon.svg&quot;,\n  &quot;lang&quot;: &quot;en-US&quot;,\n  &quot;port&quot;: 8000,\n  &quot;background&quot;: &quot;#ffffff&quot;,\n  &quot;foreground&quot;: &quot;#000000&quot;,\n  &quot;theme&quot;: &quot;#01a252&quot;,\n  &quot;footer&quot;: &quot;&lt;p&gt;Made by &lt;a href=\\&quot;https://AnzenKodo.github.io/AnzenKodo\\&quot;&gt;AnzenKodo&lt;/a&gt; under &lt;a href=\\&quot;https://anzenkodo.github.io/dblog/LICENSE\\&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;\\n&quot;,\n  &quot;page404&quot;: &quot;404 Page Not Found, Sorry :(&quot;,\n  &quot;backup&quot;: false,\n  &quot;exclude&quot;: [\n    &quot;config.json&quot;,\n    &quot;backup.json&quot;\n  ],\n  &quot;nav&quot;: {},\n  &quot;head&quot;: &quot;&quot;\n}\n</code></pre>\n<p><strong>Note:</strong> Every option is optional.</p>\n<ul>\n<li><strong>name</strong> - Name of your blog.</li>\n<li><strong>start_url</strong> - Start URL of your site. <em>Example:</em> ‘<a href=\"https://example.com/\">https://example.com/</a>’,\n‘<a href=\"https://blog.example.com/\">https://blog.example.com/</a>’, ‘<a href=\"https://example.com/blog/\">https://example.com/blog/</a>’</li>\n<li><strong>email</strong> - Your email address. This will enable ‘Reply with Email’ button in\nposts.</li>\n<li><strong>author</strong> - Your name or username.</li>\n<li><strong>posts</strong> - Path of posts.</li>\n<li><strong>output</strong> - Folder where your blog build will be placed. <em>Example:</em> ‘./blog’,\n‘…/site/blog’, ‘site/blog’.</li>\n<li><strong>favicon</strong> - <em><strong>Recommended 500x500px</strong></em>. Favicon location. <em>If empty,\ngenerated favicon will be used</em>. <em>Example:</em> ‘./favicon.png’,\n‘./static/favicon.icon’, ‘…/favicon.jpg’.</li>\n<li><strong>lang</strong> - Blog language in ‘RFC 5646’ format. Example: ‘ja’ for Japanese,\n‘sv’ for Swedish, ‘it’ for Italian. See\n<a href=\"https://wikipedia.org/wiki/IETF_language_tag#List_of_common_primary_language_subtags\">List of common primary language subtags in Wikipedia</a></li>\n<li><strong>footer</strong> - Footer of your website. <em>Supports CommonMark Markdown format</em>.\n<em>Example:</em>\n<code>Made by [AnzenKodo](https://AnzenKodo.github.io/AnzenKodo) uder [MIT License](https://anzenkodo.github.io/dblog/LICENSE.html)</code>.</li>\n<li><strong>port</strong> - Port of your blog on localhost. <em>Example</em>: ‘8080’, ‘8300’, ‘8400’.</li>\n<li><strong>background</strong> - Background color in light mode. Becomes foreground color in\nlight mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>\n<li><strong>foreground</strong> - Foreground color in light mode. Becomes background color in\nlight mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>\n<li><strong>theme</strong> - Blog theme color. <em>Example:</em> ‘#0583f2’, ‘#f20544’, ‘#f2b705’.</li>\n<li><strong>page404</strong> - 404 page message. <em>Example:</em> ‘Sorry, page not found :(’.</li>\n<li><strong>backup</strong> - Backup file location. <em>Example:</em> <code>false</code> to don’t generate\n<code>backup.json</code> file, ‘./backup.json’, ‘./site/backup.json’, ‘…/backup.json’.</li>\n<li><strong>exclude</strong> - Exclude files or folder. <em>Example:</em><pre><code class=\"language-json\">&quot;exclude&quot;: [ &quot;.env&quot;, &quot;todo.md&quot;, &quot;drafts&quot; ],\n</code></pre>\n</li>\n<li><strong>nav</strong> - Nav bar item list. Example:<pre><code class=\"language-json\">&quot;nav&quot;: {\n  &quot;about&quot;: &quot;./about.md&quot;,\n  &quot;stie&quot;: &quot;https://anzenkodo.github.io/AnzenKodo&quot;\n}\n</code></pre>\n</li>\n<li><strong>head</strong> - If you analytics or any other tags you want to put on head tag.\n<em>Example:</em>\n<code>&lt;link rel=&quot;preconnect&quot; href=&quot;//www.google-analytics.com&quot; crossorigin=&quot;&quot;&gt;</code>.</li>\n</ul>\n<h2>CLI Options</h2>\n<pre><code class=\"language-sh\">dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.\n\nWebsite: https://anzenkodo.github.io/dblog\nPackage: https://deno.land/x/dblog\nRepo: https://github.com/AnzenKodo/dblog\nDocs: https://anzenkodo.github.io/dblog/posts/dblog-Docs.html\n\nUSAGE:\n  dblog [OPTIONS]\n\nOPTIONS:\n  --serve   Build blog and Start localhost.\n    --noopen  Don't open browser, when starting localhost.\n  --build   Build blog without starting localhost.\n  --setup   Setup new blog.\n  --backup  Restore blog if 'backup.json' file available.\n  --readme  Generate 'README.md' file.\n  --help    Print help information.\n</code></pre>\n<h2>File Options</h2>\n<pre><code>---\ntitle: If empty the file name will be used\ndescription: If empty the first paragraph will be used.\ntags: [ &quot;tag1&quot;, &quot;tag2&quot; ]\ndate: 20/08/2020\ncanonical:\n---\n</code></pre>\n<ul>\n<li><strong>date</strong> - If empty, the file date will be used. <em>Note:</em> The file <code>date</code> might\nnot always right. So always give you own date.</li>\n<li><strong>canonical</strong> - Share content between multiple sites without impacting SEO.\nJust put canonical URL. Know more about\n<a href=\"https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls\">canonical url</a>.</li>\n</ul>\n<h3>If file name start with underscore “_” it will be consider as draft.</h3>\n<p><strong>Example:</strong> <code>posts/_This is draft.md</code></p>\n<h2>Markdown Guide</h2>\n<h3><a href=\"https://commonmark.org/help/\">CommonMark</a> Syntex</h3>\n<h4>Heading</h4>\n<pre><code class=\"language-md\"># H1\n\n## H2\n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n</code></pre>\n<h1>H1</h1>\n<h2>H2</h2>\n<h3>H3</h3>\n<h4>H4</h4>\n<h5>H5</h5>\n<h6>H6</h6>\n<h4>Inline style</h4>\n<pre><code class=\"language-md\">**Bold** _Italic_ ~~Strikethrough~~\n</code></pre>\n<p><strong>Bold</strong> <em>Italic</em> <s>Strikethrough</s></p>\n<h4>Link and Image</h4>\n<pre><code class=\"language-md\">[website](https://anzenkodo.github.io/dblog)\n![Jurassic Deno by Samip Poudel](https://deno.land/images/artwork/jurassicDeno.jpg)\n</code></pre>\n<p><a href=\"https://anzenkodo.github.io/dblog\">website</a>\n<img src=\"https://deno.land/images/artwork/jurassicDeno.jpg\" alt=\"Jurassic Deno by Samip Poudel\"></p>\n<h4>Blockquote</h4>\n<pre><code class=\"language-md\">&gt; 'The road to hell is paved with good intentions' by Abbot Bernard\n</code></pre>\n<blockquote>\n<p>‘The road to hell is paved with good intentions’ by Abbot Bernard</p>\n</blockquote>\n<h4>List</h4>\n<pre><code class=\"language-md\">- List\n  - List\n- List\n\n1. One\n2. Two\n3. Three\n</code></pre>\n<ul>\n<li>List\n<ul>\n<li>List</li>\n</ul>\n</li>\n<li>List</li>\n</ul>\n<ol>\n<li>One</li>\n<li>Two</li>\n<li>Three</li>\n</ol>\n<h4>Horizontal rule</h4>\n<pre><code class=\"language-md\">---\n</code></pre>\n<hr>\n<h4>Code block</h4>\n<div class=\"highlight highlight-source-lisp notranslate position-relative overflow-auto\">\n<pre>\n`Inline code` with backticks\n```js\n  console.log(\"Code Blog in JavaScript\");\n```\n</pre>\n</div>\n<p><code>Inline code</code> with backticks</p>\n<pre><code class=\"language-js\">console.log(&quot;Code Blog in JavaScript&quot;);\n</code></pre>\n<h3>Additional Markdown syntax</h3>\n<h4>Checkbox</h4>\n<pre><code class=\"language-md\">- [ ] Checkbox\n- [x] Checkbox with tick\n</code></pre>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\"> Checkbox</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> Checkbox with tick</label></li>\n</ul>\n<h4>Image with caption</h4>\n<pre><code class=\"language-md\">![Deno](https://deno.land/images/artwork/deno_matrix.png &quot;Matrix by bramaudi&quot;)\n</code></pre>\n<figure data-type=\"image\"><img src=\"https://deno.land/images/artwork/deno_matrix.png\" alt=\"Deno\" loading=\"lazy\" decoding=\"async\"><figcaption>Matrix by bramaudi</figcaption></figure>\n<h4>Footer</h4>\n<pre><code class=\"language-md\">Here is a footnote reference[^1]. [^1]: Here is the footnote.\n</code></pre>\n<p>Here is a footnote reference[^1]. [^1]: Here is the footnote.</p>\n<h4>Additional inline syntax</h4>\n<pre><code class=\"language-md\">~sub~ ^sup^ ==mark== [[kbd]] _underline_ ++insert++ ~~delete~~\n</code></pre>\n<p><sub>sub</sub>\n<sup>sup</sup>\n<mark>mark</mark>\n<kbd>kbd</kbd>\n<u>underline</u>\n<ins>insert</ins>\n<del>delete</del></p>\n<h4>Description list</h4>\n<pre><code class=\"language-md\">: Definition 1 Term 2 with _inline markup_ : Definition 2 Third paragraph of\ndefinition 2.\n</code></pre>\n<dl>\n  <dt>Definition 1</dt>\n  <dd>Term 2 with inline.</dd>\n  <dt>Definition 2</dt>\n  <dd>Third paragraph of definition 2.</dd>\n</dl>\n<h4>Abbreviation</h4>\n<pre><code class=\"language-md\">*[abbr]: Abbreviation\n</code></pre>\n<p><abbr title=\"Abbreviation\">abbr</abbr></p>\n<h4>Table</h4>\n<h5>Normal</h5>\n<pre><code class=\"language-md\">| Syntax    | Description |\n| --------- | ----------- |\n| Header    | Title       |\n| Paragraph | Text        |\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Syntax</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Header</td>\n<td>Title</td>\n</tr>\n<tr>\n<td>Paragraph</td>\n<td>Text</td>\n</tr>\n</tbody>\n</table>\n<h5>Multiline</h5>\n<pre><code class=\"language-md\">| Markdown  | Rendered HTML |\n| --------- | ------------- |\n| _Italic_  | _Italic_      |\n|           |               |\n| - Item 1  | - Item 1      |\n| - Item 2  | - Item 2      |\n| ```python | ```python \\   |\n| .1 + .2   | .1 + .2       |\n</code></pre>\n<table><thead><tr><th>Markdown</th><th>Rendered HTML</th></tr></thead> <tbody>\n  <tr> <td> <pre><code>*Italic* </code></pre> </td> <td> <p><em>Italic</em></p>\n  </td> </tr> <tr> <td> <pre><code>- Item 1 - Item 2</code></pre> </td> <td>\n  <ul> <li>Item 1</li> <li>Item 2</li> </ul> </td> </tr> <tr> <td>\n<pre><code>\n```python\n.1 + .2\n```\n</code></pre> </td> <td> <pre><code class=\"language-python\">.1 + .2\n  </code></pre> </td> </tr> </tbody> </table>\n<h5>Rowspan</h5>\n<pre><code class=\"language-md\">|                       Stage | Direct Products | ATP Yields |\n| --------------------------: | --------------: | ---------: |\n|                  Glycolysis |           2 ATP |            |\n|                          ^^ |          2 NADH |   3--5 ATP |\n|          Pyruvaye oxidation |          2 NADH |      5 ATP |\n|           Citric acid cycle |           2 ATP |            |\n|                          ^^ |          6 NADH |     15 ATP |\n|                          ^^ |         2 FADH2 |      3 ATP |\n|              **30--32** ATP |                 |            |\n| [Net ATP yields per hexose] |                 |            |\n</code></pre>\n<table> <caption id=\"netatpyieldsperhexose\">Net ATP yields per hexose</caption>\n  <thead> <tr> <th align=\"right\">Stage</th> <th align=\"right\">Direct\nProducts</th> <th align=\"right\">ATP Yields</th> </tr> </thead> <tbody> <tr> <td\nalign=\"right\" rowspan=\"2\">Glycolysis</td> <td align=\"right\" colspan=\"2\">2\nATP</td> </tr> <tr> <td align=\"right\">2 NADH</td> <td align=\"right\">3–5\nATP</td> </tr> <tr> <td align=\"right\">Pyruvaye oxidation</td> <td\nalign=\"right\">2 NADH</td> <td align=\"right\">5 ATP</td> </tr> <tr> <td\nalign=\"right\" rowspan=\"3\">Citric acid cycle</td> <td align=\"right\"\ncolspan=\"2\">2 ATP</td> </tr> <tr> <td align=\"right\">6 NADH</td> <td\nalign=\"right\">15 ATP</td> </tr> <tr> <td align=\"right\">2 FADH2</td> <td\nalign=\"right\">3 ATP</td> </tr> <tr> <td align=\"right\"\ncolspan=\"3\"><strong>30–32</strong> ATP</td> </tr> </tbody> </table>\n<h4>Headerless</h4>\n<pre><code class=\"language-md\">|--|--|--|--|--|--|--|--| |♜| |♝|♛|♚|♝|♞|♜| | |♟|♟|♟| |♟|♟|♟| |♟| |♞| | | | | |\n| |♗| | |♟| | | | | | | | |♙| | | | | | | | | |♘| | | |♙|♙|♙|♙| |♙|♙|♙|\n|♖|♘|♗|♕|♔| | |♖|\n</code></pre>\n<table> <tbody> <tr> <td>♜</td> <td></td> <td>♝</td> <td>♛</td> <td>♚</td>\n  <td>♝</td> <td>♞</td> <td>♜</td> </tr> <tr> <td></td> <td>♟</td> <td>♟</td>\n  <td>♟</td> <td></td> <td>♟</td> <td>♟</td> <td>♟</td> </tr> <tr> <td>♟</td>\n  <td></td> <td>♞</td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr>\n  <tr> <td></td> <td>♗</td> <td></td> <td></td> <td>♟</td> <td></td> <td></td>\n  <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td>♙</td>\n  <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td>\n  <td></td> <td></td> <td>♘</td> <td></td> <td></td> </tr> <tr> <td>♙</td>\n  <td>♙</td> <td>♙</td> <td>♙</td> <td></td> <td>♙</td> <td>♙</td> <td>♙</td>\n  </tr> <tr> <td>♖</td> <td>♘</td> <td>♗</td> <td>♕</td> <td>♔</td> <td></td>\n  <td></td> <td>♖</td> </tr> </tbody> </table>",
      "date_published": "2022-12-20T20:07:22.703Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=AK%23Notes&description=This%20my%20personal%20website%20where%20I%20post%20my%20notes%20about%20thing%20that%20I%20have%20learn.%20Features%20%20Easy%20to:%20%20Setup%20Configure%20Write%20%20%20Supports:%20%20Tags%20Search%20(Power%20by%20DuckDuckGo)%20Canonical%20Open%20Graph%20Analytics%20GitHub%20Pages%20%20%20Auto%20generate:%20%20GitHub%20Pages%20Actions%20file%20Favicon%20Sitemap%20404%20page%20&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/javascript/react.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/javascript/react.html",
      "title": "React",
      "content_html": "<h1>React</h1>\n<ul>\n<li>Function VS Class Component\n<ul>\n<li>A functional component is just a plain JavaScript function that accepts props as an argument and returns a React element.</li>\n<li>A class component requires you to extend from React. Component and create a render function which returns a React element.</li>\n</ul>\n</li>\n<li></li>\n</ul>",
      "date_published": "2022-12-20T20:07:22.703Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=React&description=React%20%20Function%20VS%20Class%20Component%20%20A%20functional%20component%20is%20just%20a%20plain%20JavaScript%20function%20that%20accepts%20props%20as%20an%20argument%20and%20returns%20a%20React%20element.%20A%20class%20component%20requires%20you%20to%20extend%20from%20React.%20Component%20and%20create%20a%20render%20function%20which%20returns%20a%20React%20element.&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/javascript/nodejs.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/javascript/nodejs.html",
      "title": "NodeJS",
      "content_html": "<h1>NodeJS</h1>\n<p>From <a href=\"https://trainings.internshala.com/nodejs-training\">Internshala Training NodeJS Course</a></p>\n<h1>Require</h1>\n<ul>\n<li>\n<p>Import node module</p>\n<pre><code class=\"language-jsx\">const { readFs } = require(&quot;fs&quot;);\nconst { readHttps } = require(&quot;https&quot;);\n</code></pre>\n</li>\n<li>\n<p>Input the string in <code>console.log</code>.</p>\n<pre><code class=\"language-jsx\">st readLine = require(&quot;readline&quot;).createInterface({\n  output: process.stdout,\n  input: process.stdin,\n});\n\nreadLine.question(&quot;What is your name?\\n&quot;, (name) =&gt; {\n  console.log(`Welcome ${name}`);\n  readLine.close();\n});\n\n// What is your name?\n// Jimmin &lt;= Ask to input here\n// Welcome Jimmin\n</code></pre>\n</li>\n</ul>\n<h1>Module</h1>\n<ul>\n<li>\n<p>Process</p>\n<p>The <code>process</code> object in Node.js is a global object that can be accessed inside any module without requiring it.</p>\n<ul>\n<li>\n<p><code>process.on</code></p>\n<pre><code class=\"language-jsx\">process.on('beforeExit', (code) =&gt; {\nconsole.log('Process beforeExit event with code: ', code);\n});\n// Process beforeExit event with code:  0                                                                                             /0.3s\n</code></pre>\n</li>\n<li>\n<p>Process expressions</p>\n<pre><code class=\"language-jsx\">console.log(process.ppid);\n// 21321\nconsole.log(process.argv);\n// [\n//  '/snap/node/5148/bin/node',\n//  '/home/kurama/Documents/Projects/Node JS/app.js'\n//]\nconsole.log(`Reports are compact? ${process.report.compact}`);\n// Reports are compact? false                                                                                                         /0.3s\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Module</p>\n<p>The <code>module</code> is same as process but you can only access within the file information.</p>\n</li>\n<li>\n<p>Event</p>\n<ul>\n<li>\n<p>EventEmitter</p>\n<pre><code class=\"language-jsx\">const events = require(&quot;events&quot;);\nconst eEmitter = new events.EventEmitter();\n\nconst getParty = function () {\n  console.log(&quot;Time to party&quot;);\n  const ran = Math.ceil(Math.random() * 10);\n  console.log(`Party starts in ${ran}`);\n  tester(ran);\n};\n\neEmitter.on(&quot;music&quot;, getParty);\n\ntester(2);\n\nfunction tester(val) {\n  setTimeout((e) =&gt; {\n    eEmitter.emit(&quot;music&quot;);\n  }, val * 1000);\n}\n\n// Time to party\n// Party starts in 5\n// Time to party\n// Party starts in 8\n// Time to party\n// Party starts in 3\n// Time to party\n// Party starts in 9\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>",
      "date_published": "2022-12-20T20:07:22.703Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=NodeJS&description=NodeJS%20From%20Internshala%20Training%20NodeJS%20Course%20Require%20%20%20Import%20node%20module%20const%20{%20readFs%20}%20=%20require(&quot;fs&quot;);%20const%20{%20readHttps%20}%20=%20require(&quot;https&quot;);%20%20%20%20Input%20the%20string%20in%20console.log.%20st%20readLine%20=%20require(&quot;readline&quot;).createInterface({%20%20%20output:%20pr&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/javascript/js.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/javascript/js.html",
      "title": "JS",
      "content_html": "<h1>The JavaScript language</h1>\n<h1>Standard built-in objects</h1>\n<h2>Proxy</h2>\n<ul>\n<li>\n<p>The <code>new Proxy</code> object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.</p>\n<pre><code class=\"language-jsx\">let numbers = {\n    'Hello': 'Hi',\n    'YoYo': 'Yo',\n    'Going': 'Go'\n}\n\nlet proxy = new Proxy(numbers, {\n    get(target, prop) {\n        if(prop in target) {\n            return target[prop];\n        } else {\n            return `${prop} is not found`;\n        }\n    }\n});\n\nproxy['Going'];\n// Go\n</code></pre>\n</li>\n<li>\n<p>Proxy with <code>set</code> <strong>Note</strong>: For set, it must return true for a successful write.</p>\n<pre><code class=\"language-jsx\">let users = {};\n\nlet dataStorage = new Proxy(users, {\n    set(target, prop, val) {\n        if(typeof val == 'string') {\n            target[prop] = val;\n        } else {\n            throw new Error(`Only string allowed`);\n        }\n    }\n});\n\ndataStorage.name = &quot;Jone&quot;\n// Jone\n\ndataStorage.age = 12\n// Error: Only string allowed\n</code></pre>\n</li>\n<li>\n<p>Proxy with <code>has</code></p>\n<pre><code class=\"language-jsx\">let range = {\n    start: 1,\n    end: 10\n};\n\nlet range = new Proxy(range, {\n    has(target, prop) {\n        return target.start &lt; prop &amp;&amp; target.end &gt; prop;\n    }\n});\n\nalert(5 in range); // true\nalert(50 in range); // false\n</code></pre>\n</li>\n</ul>\n<h2>Reflect</h2>\n<ul>\n<li>\n<p><code>Reflect.ownKeys()</code> returns an array of the target object’s own property keys.</p>\n<pre><code class=\"language-jsx\">let user = {\n  name: &quot;John&quot;,\n  age: 30,\n  _password: &quot;***&quot;\n};\n\nlet user = new Proxy(user, {\n    ownKey(target) {\n        return Object.keys(target).filter(obj =&gt; !obj.startsWith('_'));\n    }\n});\n\nfor(let key in user) alert(key);\n// name, age\n</code></pre>\n</li>\n<li>\n<p><code>Reflect.set()</code></p>\n<pre><code class=\"language-jsx\">user = {\n\tage: 32\n}\nReflect.set(user, 'name', 'Jone');\nReflect.set(user, 'age', '53');\n\nconsole.log(user);\n\n{age: &quot;53&quot;, name: &quot;Jone&quot;}\n</code></pre>\n</li>\n<li>\n<p>Proxying a getter with <code>Reflect.get()</code>.</p>\n<pre><code class=\"language-jsx\">let user = {\n    _name: &quot;Guest&quot;,\n    get name() {\n        return this._name;\n    }\n}\n\nlet userProxy = new Proxy(user, {\n    get(target, prop, receiver) {\n        return Reflect.get(target, prop, receiver);\n    }\n});\n\nlet admin = {\n    __proto__: userProxy,\n    _name: &quot;Admin&quot;\n};\n\nadmin.name;\n// Admin\n</code></pre>\n</li>\n</ul>\n<h2>Promise</h2>\n<ul>\n<li>\n<p>Return value if fail or pass.</p>\n<pre><code class=\"language-jsx\">let passPromise = new Promise((reslove, reject) =&gt; {\n\ttry {\n\t\tif (false) throw NotDefine();\n\t\treslove(&quot;Pass&quot;);\n\t} catch(err) {\n\t\treject(err.message);\n\t}\n});\n\npassPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))\n// Pass\n\nlet failPromise = new Promise((reslove, reject) =&gt; {\n\ttry {\n\t\tif (true) throw NotDefine();\n\t\treslove(&quot;Pass&quot;);\n\t} catch(err) {\n\t\treject(err.message);\n\t}\n});\n\nfailPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))\n// NotDefine is not defined\n</code></pre>\n</li>\n<li>\n<p>Promise with <code>finally</code>.</p>\n<pre><code class=\"language-jsx\">let failPromise = new Promise((reslove, reject) =&gt; {\n\ttry {\n\t\tif (true) throw NotDefine();\n\t\treslove(&quot;Pass&quot;);\n\t} catch(err) {\n\t\treject(&quot;Fail: &quot; + err.message);\n\t}\n})\n\t.finally(() =&gt; console.log(&quot;The result is:&quot;));\n\nfailPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))\n// The result is\n// NotDefine is not defined\n</code></pre>\n</li>\n<li>\n<p>Promise with <code>catch</code>.</p>\n<pre><code class=\"language-jsx\">let failPromise = new Promise((reslove, reject) =&gt; {\n\ttry {\n\t\tif (true) throw NotDefine();\n\t\treslove(&quot;Pass&quot;);\n\t} catch(err) {\n\t\treject(&quot;Fail: &quot; + err.message);\n\t}\n})\n\t.finally(() =&gt; console.log(&quot;The result is:&quot;)\n\t.catch((err) =&gt; console.log(err.name + &quot;: This error is catch.&quot;));\n\nfailPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))\n// The result is\n// undefined: This error is catch.\n</code></pre>\n</li>\n<li>\n<p>❓Delay with a promise.</p>\n<pre><code class=\"language-jsx\">function delay(ms) {\n    return new Promise((reslove) =&gt; setTimeout(reslove, ms));\n}\n\ndelay(3000).then(() =&gt; alert('runs after 3 seconds'));\n// runs after 3 seconds\n</code></pre>\n</li>\n<li>\n<p>Promises chaining with <code>then</code></p>\n<pre><code class=\"language-jsx\">new Promise((reslove, reject) =&gt; {\n    reslove(&quot;Hello&quot;);\n}).then((result) =&gt; {\n    console.log(result);\n    return &quot;how&quot;;\n}).then((result) =&gt; {\n    console.log(result);\n    return &quot;are&quot;;\n}).then((result) =&gt; {\n    console.log(result);\n}).finally(() =&gt; {\n    console.log(&quot;you?&quot;);\n});\n</code></pre>\n</li>\n<li>\n<p>Promises chaining with numbers</p>\n<pre><code class=\"language-jsx\">new Promise((reslove) =&gt; {\n    reslove(1);\n}).then((result) =&gt; {\n    console.log(result);\n    return result + 1;\n}).then((result) =&gt; {\n    console.log(result);\n    return result + 1;\n}).then((result) =&gt; {\n    console.log(result);\n});\n\n/*\n1\n2\n3\n*/\n</code></pre>\n</li>\n<li>\n<p><code>Promise.all</code>you can use multiple Promise</p>\n<pre><code class=\"language-jsx\">let username = []\n\nfor ( loop = 0; loop &lt; 2; loop++ ) username.push(prompt(&quot;What is your Username&quot;));\n\nlet githubAPI = username.map(user =&gt; &quot;https://api.github.com/users/&quot; + user);\n\nPromise.all(githubAPI)\n\t.then(apiJSON =&gt; Promise.all(apiJSON.map(aj =&gt; aj.json())))\n\t.then(check =&gt; {\n\tif (check == null) {\n\t\tconsole.log(`No result found`)\n\t\texit();\n\t\t}\n\treturn check;\n})\n\t.then(github =&gt; console.log(`Name: ${github.name}, Repo: ${github.public_repos}`));\n</code></pre>\n</li>\n<li>\n<p>#<code>Promise.allSettled</code>the <code>Promise.all</code>can’t error this function can.</p>\n<ul>\n<li><code>Promise.allSettled</code> just waits for all promises to settle, regardless of the result. The resulting array has:\n<ul>\n<li><code>{status:&quot;fulfilled&quot;, value:result}</code> for successful responses,</li>\n<li><code>{status:&quot;rejected&quot;, reason:error}</code> for errors.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-jsx\">let urls = [\n\t`https://api.github.com/users/aav`,\n\t`https://api.github.com/users/hello`,\n\t`https://no-such-url`\n];\n\nPromise.allSettled(urls.map(url =&gt; fetch(url)))\n\t.then(url =&gt; url.forEach((urlLoop, num) =&gt; {\n\t\tif ( urlLoop.status == &quot;fulfilled&quot; ) {\n\t\t\tfetch(urls[num])\n                .then(urlJSON =&gt; urlJSON.json())\n                .then(data =&gt; console.log(`${data.name}`));\n\t\t}\n\t\tif ( urlLoop.status == &quot;rejected&quot; ) {\n\t\t\tconsole.log(`Error: Failed to fetch. Error code: 3234`);\n\t\t}\n\t}));\n</code></pre>\n</li>\n<li>\n<p><code>Promise.race</code></p>\n<ul>\n<li>\n<p><code>reject</code> or <code>error</code> can’t come first.</p>\n<pre><code class=\"language-jsx\">Promise.race([\n  new Promise((resolve, reject) =&gt; reject(1)),\n  new Promise((resolve, reject) =&gt; resolve(2)),\n  new Promise((resolve, reject) =&gt; reject(3)),\n  new Promise((resolve, reject) =&gt; resolve(4))\n]).then(alert);\n\n// Uncaught (in promise) 1\n</code></pre>\n</li>\n<li>\n<p>Only shows the promise which executes first.</p>\n<pre><code class=\"language-jsx\">Promise.race([\n  new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(2), 200)),\n  new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(4), 100))\n]).then(alert);\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><code>Promise.any</code></p>\n<pre><code class=\"language-jsx\">Promise.any([\n    new Promise((reslove, reject) =&gt; reject(1)),\n    new Promise((reslove, reject) =&gt; setTimeout(() =&gt; reslove(2), 200)),\n    new Promise((reslove, reject) =&gt; reject(3)),\n    new Promise((reslove, reject) =&gt; setTimeout(() =&gt; reslove(4), 100))\n]).then(word =&gt; console.log(word));\n</code></pre>\n</li>\n</ul>\n<h2>Date</h2>\n<ul>\n<li>\n<p>To Get the <code>Date</code></p>\n<ul>\n<li><code>getFullYear()</code> Get the year (4 digits).</li>\n<li><code>getMonth()</code> Get the month, from 0 to 11.</li>\n<li><code>getDate()</code> Get the day of month, from 1 to 31, the name of the method does look a little bit strange.</li>\n<li><code>getHours()</code>, <code>getMinutes()</code>, <code>getSeconds()</code>, <code>getMilliseconds()</code> Get the corresponding time components.</li>\n<li><code>getDay()</code> Get the day of week, from 0 (Sunday) to 6 (Saturday). The first day is always Sunday, in some countries that’s not so, but can’t be changed.</li>\n<li><code>getTime()</code> Returns the timestamp for the date – a number of milliseconds passed from the January 1st of 1970 UTC+0.</li>\n<li><code>getTimezoneOffset()</code> Returns the difference between UTC and the local time zone, in minutes.</li>\n</ul>\n</li>\n<li>\n<p>To Set the <code>Date</code></p>\n<ul>\n<li><code>setFullYear(year, [month], [date])</code></li>\n<li><code>setMonth(month, [date])</code></li>\n<li><code>setDate(date)</code></li>\n<li><code>setHours(hour, [min], [sec], [ms])</code></li>\n<li><code>setMinutes(min, [sec], [ms])</code></li>\n<li><code>setSeconds(sec, [ms])</code></li>\n<li><code>setMilliseconds(ms)</code></li>\n<li><code>setTime(milliseconds)</code></li>\n</ul>\n</li>\n<li>\n<p>#<code>Date()</code> constructor.</p>\n<pre><code class=\"language-jsx\">const date1 = new Date('December 17, 1995 03:24:00');\nconsole.log(date1);\n// Sun Dec 17 1995 03:24:00 GMT+0530 (India Standard Time)\n</code></pre>\n</li>\n<li>\n<p>#<code>Date.now()</code> for now date.</p>\n<pre><code class=\"language-jsx\">let start = Date.now();\nfor (let i = 0; i &lt; 100000; i++) {\n  let doSomething = i * i * i;\n}\nlet end = Date.now();\nconsole.log( `The loop took ${end - start} ms` );\n// The loop took 2 ms\n</code></pre>\n</li>\n<li>\n<p><code>Date.parse</code> from a string.</p>\n<pre><code class=\"language-jsx\">let ms = Date.parse('2012-01-26T13:51:50.417-07:00');\nalert(ms);\n// 1327611110417\n</code></pre>\n</li>\n</ul>\n<h2>Function</h2>\n<ul>\n<li>\n<p>IIFE (Immediately Invoked Function Expression)</p>\n<pre><code class=\"language-jsx\">((name, surname) =&gt; {\n\tconsole.log(`Hello ${name} ${surname}`);\n})('Jummy', 'Vinchoco');\n\n// Hello Jummy Vinchoco\n</code></pre>\n</li>\n<li>\n<p>❓ Fix a function that loses “this”</p>\n<pre><code class=\"language-jsx\">function askPassword(ok, fail) {\n  let password = prompt(&quot;Password?&quot;, '');\n  if (password == &quot;rockstar&quot;) ok();\n  else fail();\n}\n\nlet user = {\n  name: 'John',\n\n  loginOk() {\n    alert(`${this.name} logged in`);\n  },\n\n  loginFail() {\n    alert(`${this.name} failed to log in`);\n  },\n\n};\n\naskPassword(user.loginOk.bind(user), user.loginFail.bind(user));\n</code></pre>\n</li>\n<li>\n<p>Arrow don’t have <code>this</code>, <code>argument</code>, <code>new</code> &amp; <code>super</code></p>\n</li>\n<li>\n<p>#<code>Function.name</code>to show variable name</p>\n<pre><code class=\"language-jsx\">function sayHi() {\n  alert(&quot;Hi&quot;);\n}\n\nalert(sayHi.name); // sayHi\n</code></pre>\n</li>\n<li>\n<p>#<code>setter</code>&amp; #<code>getter</code>. #<code>set</code> you can change the value like <code>let</code>&amp; <code>const</code>. #<code>get</code>syntax binds an object property to a function that will be called when that property is looked up.</p>\n<ul>\n<li>\n<p>This can also work with <code>defineProperty</code> &amp; <code>defineProperties</code></p>\n<pre><code class=\"language-jsx\">let user = {\n  name: &quot;John&quot;,\n  surname: &quot;Smith&quot;\n};\n\nObject.defineProperty(user, 'fullName', {\n  get() {\n    return `${this.name} ${this.surname}`;\n  },\n\n  set(value) {\n    [this.name, this.surname] = value.split(&quot; &quot;);\n  }\n});\n\nconsole.log(user.fullName); // John Smith\n\nfor(let key in user) console.log(user); // name, surname\n</code></pre>\n</li>\n<li>\n<p><code>getters</code>/<code>setters</code> can be used as wrappers over “real” property values to gain more control over operations with them.</p>\n<pre><code class=\"language-jsx\">let user = {\n  get name() {\n    return this._name;\n  },\n\n  set name(value) {\n    if (value.length &lt; 4) {\n      alert(&quot;Name is too short, need at least 4 characters&quot;);\n      return;\n    }\n    this._name = value;\n  }\n};\n\nuser.name = &quot;Pete&quot;;\nalert(user.name); // Pete\n\nuser.name = &quot;&quot;; // Name is too short...\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Binding object with function with #<code>bind</code>.</p>\n<ul>\n<li>\n<p>Joined other function <code>this</code> with bind.</p>\n<pre><code class=\"language-jsx\">let user = {\n    firstName: &quot;John&quot;\n};\n\nfunction func(word) {\n    console.log(word + ' ' + this.firstName);\n};\n\nsay(&quot;Hi&quot;);\n// Hi John\n</code></pre>\n</li>\n<li>\n<p>You can solve <code>this</code> problem with #<code>bind</code>.</p>\n<pre><code class=\"language-jsx\">let user = {\n    firstName: &quot;Jonn&quot;,\n    sayHi() {\n        console.log(`Hi ${this.firstName}`);\n    }\n}\n\nuser.bind(user.sayHi);\n// Hi Jonn\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Sort with #<code>sort()</code>.</p>\n<pre><code class=\"language-jsx\">let arr = [ 1, 15, 2 ];\nconsole.log(arr.sort((a, b) =&gt; a - b);\n// [1, 2, 15]\n</code></pre>\n</li>\n<li>\n<p>Sort string #<code>localeCompare()</code>.</p>\n<pre><code class=\"language-jsx\">let countries = ['Österreich', 'Andorra', 'Vietnam'];\nconsole.log(countries.sort((a, b) =&gt; a.localeCompare(b)))\n// Andorra, Österreich, Vietnam\n</code></pre>\n</li>\n<li>\n<p>Reverse the array with #<code>reverse()</code></p>\n<pre><code class=\"language-jsx\">let arr = [1, 2, 3, 4, 5];\narr.reverse();\nalert( arr );\n// 5,4,3,2,1\n</code></pre>\n</li>\n<li>\n<p>Checks is it Array or Not with #<code>isArray()</code>.</p>\n<pre><code class=\"language-jsx\">console.log(Array.isArray({}));\n// false\nconsole.log(Array.isArray([]));\n// true\n</code></pre>\n</li>\n<li>\n<p>Make array with words with <code>Array.from()</code>.</p>\n<pre><code class=\"language-jsx\">console.log(Array.from(&quot;HELLO&quot;));\n// [&quot;H&quot;, &quot;E&quot;, &quot;L&quot;, &quot;L&quot;, &quot;O&quot;]\n</code></pre>\n</li>\n<li>\n<p>You can function as a variable in function.</p>\n<pre><code class=\"language-jsx\">function f() {\n  let value = Math.random();\n\n  return function() { alert(value); };\n}\n\n// 3 functions in array, every one of them links to Lexical Environment\n// from the corresponding f() run\nlet arr = [f(), f(), f()];\n</code></pre>\n</li>\n<li>\n<p>Both nested functions are created within the same outer Lexical Environment, so they share access to the same count variable.</p>\n<pre><code class=\"language-jsx\">function Counter() {\n  let count = 0;\n\n  this.up = function() {\n    return ++count;\n  };\n\n  this.down = function() {\n    return --count;\n  };\n}\n\nlet counter = new Counter();\n\nalert( counter.up() ); // 1\nalert( counter.up() ); // 2\nalert( counter.down() ); // 1\n</code></pre>\n</li>\n<li>\n<p>The function that created inside the function is stay inside the function.</p>\n<pre><code class=\"language-jsx\">let phrase = &quot;Hello&quot;;\n\nif (true) {\n  let user = &quot;John&quot;;\n\n  function sayHi() {\n    alert(`${phrase}, ${user}`);\n  }\n}\n\nsayHi(); // error\n</code></pre>\n</li>\n<li>\n<p>Length of String with <code>length()</code>.</p>\n</li>\n<li>\n<p>Named Function Expression, or NFE, is a term for Function Expressions that have a name.</p>\n<ul>\n<li>It allows the function to reference itself internally.</li>\n<li>It is not visible outside of the function.</li>\n</ul>\n<pre><code class=\"language-jsx\">let sayHi = function func(who) {\n  if (who) {\n    alert(`Hello, ${who}`);\n  } else {\n    **func(&quot;Guest&quot;);**\n  }\n};\n\nlet welcome = sayHi;\nsayHi = null;\n\nwelcome(); // Hello, Guest\n</code></pre>\n<ul>\n<li><code>func</code> is function-local. It is not taken from outside (and not visible there). The specification guarantees that it will always reference the current function.</li>\n</ul>\n</li>\n<li>\n<p>Sum with an arbitrary amount of brackets.</p>\n<pre><code class=\"language-jsx\">function sum(a) {\n\n  let currentSum = a;\n\n  function f(b) {\n    currentSum += b;\n    return f;\n  }\n\n  f.toString = function() {\n    return currentSum;\n  };\n\n  return f;\n}\n\nalert( sum(1)(2) ); // 3\nalert( sum(5)(-1)(2) ); // 6\nalert( sum(6)(-1)(-2)(-3) ); // 0\nalert( sum(0)(1)(2)(3)(4)(5) ); // 15\n</code></pre>\n</li>\n<li>\n<p>The call() method calls a function with a given this value and arguments provided individually.</p>\n<pre><code class=\"language-jsx\">function sayHi() {\n    return this.name;\n}\n\nlet hi = { name: &quot;hello boys&quot; };\n\nsayHi.call( hi ); // hello boys\n</code></pre>\n</li>\n<li>\n<p>call() method with argument.</p>\n<pre><code class=\"language-jsx\">function sayHi( user ) {\n    console.log( this.name + &quot; &quot; + user );\n}\n\nlet id = { name: &quot;Jonney&quot; };\nlet username = &quot;Deep&quot;;\n\nsayHi.call( id, username );\n</code></pre>\n</li>\n<li>\n<p>Function binding</p>\n<ul>\n<li>\n<p>The function inside the function run the first the outer function.</p>\n<pre><code class=\"language-jsx\">function handleException(funcAsParameter) {\n\tconsole.log(&quot;Inside handleException function&quot;)\n\ttry {\n\t\tfuncAsParameter()\n\t} catch(err) {\n\t\tconsole.log(err)\n\t}\n}\n\nfunction divideByZero() {\n\tresult = 5 / 0\n\tif(!Number.isFinite(result)) {\n\t\tthrow &quot;Division by Zero not a good idea!!&quot;\n\t}\n\tconsole.log(&quot;Result of the division of 5 by zero is: &quot; + result)\n}\n\n// Passing divide by zero as a parameter to handle exceptions. handleException will\n// call the divide by zero methods and will handle any exception raised by it.\nhandleException(divideByZero)\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>IIFE - Self Executing Anonymous Function</p>\n<pre><code class=\"language-jsx\">(function helloWorld(name, age) {\n\tconsole.log(`My name is ${name} and I am ${age} years old`);\n})(&quot;Jonney&quot;, 32);\n</code></pre>\n</li>\n</ul>\n<h2>Array</h2>\n<ul>\n<li>\n<p><code>Array</code>method, selects and negatives.</p>\n<ul>\n<li><code>slice(start, end)</code> From <code>start</code> to <code>end</code> (not including <code>end</code>) - <strong>Allows negatives</strong></li>\n<li><code>substring(start, end)</code> Between <code>start</code> and <code>end</code> - <strong>Negative values mean</strong> <code>0</code></li>\n<li><code>substr(start, length)</code>from <code>start</code> get <code>length</code> characters - <strong>Allows negative</strong> <code>start</code></li>\n</ul>\n</li>\n<li>\n<p>#<code>map()</code>changes the value of the first variable in arrow function next value in the array</p>\n<pre><code class=\"language-jsx\">const array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x =&gt; x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code></pre>\n</li>\n<li>\n<p>#<code>isArray</code> checks if it is array or not</p>\n<pre><code class=\"language-jsx\">Array.isArray([1, 2, 3]);  // true\nArray.isArray({foo: 123}); // false\n</code></pre>\n</li>\n<li>\n<p>#<code>indexOf</code>checks if the array has same value and gives <code>true</code> = 1 &amp; <code>false</code> = 0</p>\n<pre><code class=\"language-jsx\">const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\n\nconsole.log(beasts.indexOf('bison'));\n// expected output: 1\n\n// start from index 2\nconsole.log(beasts.indexOf('bison', 2));\n// expected output: 4\n\nconsole.log(beasts.indexOf('giraffe'));\n// expected output: -1\n</code></pre>\n</li>\n<li>\n<p><code>includes</code> works like <code>indexOf</code>but returns <code>true</code>&amp; <code>false</code></p>\n<pre><code class=\"language-jsx\">const array1 = [1, 2, 3];\n\nconsole.log(array1.includes(2));\n// expected output: true\n\nconst pets = ['cat', 'dog', 'bat'];\n\nconsole.log(pets.includes('cat'));\n// expected output: true\n\nconsole.log(pets.includes('at'));\n// expected output: false\n</code></pre>\n</li>\n<li>\n<p>#<code>forEach</code>loops through all array values</p>\n<pre><code class=\"language-jsx\">let code = [&quot;hello&quot;, &quot;world&quot;, &quot;noob&quot;];\n\ncode.forEach(n =&gt; console.log(n));\n/*\n hello\n world\n noob\n*/\n</code></pre>\n</li>\n<li>\n<p><code>Array</code> prototypically inherits from <code>Object</code>. <code>console.log(Array instanceof Object) // true</code></p>\n</li>\n<li>\n<p>The <code>join()</code> method creates and returns a new string by concatenating all of the elements in an array.</p>\n<pre><code class=\"language-jsx\">const elements = ['Fire', 'Air', 'Water'];\n\nconsole.log(elements.join());\n// expected output: &quot;Fire,Air,Water&quot;\n\nconsole.log(elements.join(''));\n// expected output: &quot;FireAirWater&quot;\n\nconsole.log(elements.join('-'));\n// expected output: &quot;Fire-Air-Water&quot;\n</code></pre>\n</li>\n</ul>\n<h2>JSON</h2>\n<ul>\n<li>\n<p>#<code>JSON.stringify()</code> converts a JavaScript object or value to a JSON string.</p>\n<pre><code class=\"language-jsx\">console.log(JSON.stringify({ x: [10, undefined, function(){}, Symbol('')] }));\n</code></pre>\n</li>\n<li>\n<p>String to Object with <code>JSON.parse()</code></p>\n<pre><code class=\"language-jsx\">let userData = '{ &quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 35, &quot;isAdmin&quot;: false, &quot;friends&quot;: [0,&quot;hi&quot;,2,3] }';\nlet user = JSON.parse(userData);\nalert( user.friends[1] );\n// &quot;hi&quot;\n</code></pre>\n</li>\n<li>\n<p>Only show passed value with <code>toJSON()</code></p>\n<pre><code class=\"language-jsx\">let room = {\n  number: 23,\n  toJSON() {\n    return this.number;\n  }\n};\nlet meetup = {\n  title: &quot;Conference&quot;,\n  room\n};\nalert( JSON.stringify(room) ); // 23\nalert( JSON.stringify(meetup) );\n/*\n  {\n    &quot;title&quot;:&quot;Conference&quot;,\n    &quot;room&quot;: 23\n  }\n*/\n</code></pre>\n</li>\n<li>\n<p>Object to String <code>JSON.stringify()</code></p>\n<pre><code class=\"language-jsx\">let user = {\n  name: &quot;John&quot;,\n  age: 25,\n  roles: {\n    isAdmin: false,\n    isEditor: true\n  }\n};\nalert(JSON.stringify(user, null, 2));\n/* two-space indents:\n{\n  &quot;name&quot;: &quot;John&quot;,\n  &quot;age&quot;: 25,\n  &quot;roles&quot;: {\n    &quot;isAdmin&quot;: false,\n    &quot;isEditor&quot;: true\n  }\n}\n*/\n/* for JSON.stringify(user, null, 4) the result would be more indented:\n{\n    &quot;name&quot;: &quot;John&quot;,\n    &quot;age&quot;: 25,\n    &quot;roles&quot;: {\n        &quot;isAdmin&quot;: false,\n        &quot;isEditor&quot;: true\n    }\n}\n*/\n</code></pre>\n</li>\n<li>\n<p>JSON in Javascript</p>\n<pre><code class=\"language-jsx\">let string = JSON.stringify({squirrel: false,\n                             events: [&quot;weekend&quot;]});\nconsole.log(string);\n// → {&quot;squirrel&quot;:false,&quot;events&quot;:[&quot;weekend&quot;]}\nconsole.log(JSON.parse(string).events);\n// → [&quot;weekend&quot;]\n</code></pre>\n</li>\n</ul>\n<h2>Object</h2>\n<ul>\n<li>\n<p><code>Object</code> properties can store beside a value, have three special attributes (so-called “flags”).</p>\n<ul>\n<li><code>writable</code>- if <code>true</code>, the value can be changed, otherwise it’s read-only.</li>\n<li><code>enumerable</code>- if <code>true</code>, then listed in loops, otherwise not listed.</li>\n<li><code>configurable</code>- if <code>true</code>, the property can be deleted and these attributes can be modified, otherwise not.</li>\n</ul>\n</li>\n<li>\n<p>With #<code>getOwnPropertyDescriptor</code> you can also show object flags.</p>\n<pre><code class=\"language-jsx\">let user = {\n    name: &quot;John&quot;\n}\n\nconsole.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));\n/*\n{\n  &quot;value&quot;: &quot;John&quot;,\n  &quot;writable&quot;: true,\n  &quot;enumerable&quot;: true,\n  &quot;configurable&quot;: true\n}\n*/\n\nconsole.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;).writable);\n// true\n</code></pre>\n</li>\n<li>\n<p>To change the flags, we can use #<code>Object.defineProperty</code>.</p>\n<ul>\n<li>\n<p><code>writable: false</code> value can’t be change.</p>\n<pre><code class=\"language-jsx\">let user = {\n    name: &quot;John&quot;\n}\n\nconsole.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));\n/*\n{\n  &quot;value&quot;: &quot;John&quot;,\n  &quot;writable&quot;: true,\n  &quot;enumerable&quot;: true,\n  &quot;configurable&quot;: true\n}\n*/\n\nObject.defineProperty(user, &quot;name&quot;, {\n    writable: false,\n    value: &quot;Jonney&quot;\n});\n\nuser.name = &quot;John&quot;; // Value will not change\n\nconsole.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));\n/*\n{\n  &quot;value&quot;: &quot;Jonney&quot;,\n  &quot;writable&quot;: false,\n  &quot;enumerable&quot;: true,\n  &quot;configurable&quot;: true\n}\n*/\n</code></pre>\n</li>\n<li>\n<p><code>configurable: false</code> can’t be deleted.</p>\n<ul>\n<li>The idea of “configurable: false” is to prevent changes of property flags and its deletion, while allowing to change its value.\n<ul>\n<li>Can’t change <code>configurable</code> flag.</li>\n<li>Can’t change <code>enumerable</code> flag.</li>\n<li>Can’t change <code>writable: false</code> to <code>true</code> (the other way round works).</li>\n<li>Can’t change <code>get/set</code> for an accessor property (but can assign them if absent).</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-jsx\">let user = {\n    name: &quot;John&quot;\n}\n\nconsole.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));\n/*\n{\n  &quot;value&quot;: &quot;John&quot;,\n  &quot;writable&quot;: true,\n  &quot;enumerable&quot;: true,\n  &quot;configurable&quot;: true\n}\n*/\n\nObject.defineProperty(user, &quot;name&quot;, {\n    configurable: false,\n    value: &quot;Jonney&quot;\n});\n\ndelete user.name; // Value can't be deleted\n\nconsole.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));\n/*\n{\n  &quot;value&quot;: &quot;Jonney&quot;,\n  &quot;writable&quot;: true,\n  &quot;enumerable&quot;: true,\n  &quot;configurable&quot;: false\n}\n*/\n</code></pre>\n</li>\n<li>\n<p><code>enumerable: false</code> can’t use <code>for...in</code>loop &amp; <code>Object.key</code></p>\n<pre><code class=\"language-jsx\">let user = {\n    name: &quot;John&quot;,\n\t\tage: 23\n}\n\nconsole.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));\n/*\n{\n  &quot;value&quot;: &quot;John&quot;,\n  &quot;writable&quot;: true,\n  &quot;enumerable&quot;: true,\n  &quot;configurable&quot;: true\n}\n*/\n\nObject.defineProperty(user, &quot;name&quot;, {\n    enumerable: false,\n    value: &quot;Jonney&quot;\n});\n\nfor (let key in user) console.log(key);\n// age --&gt; don't show name\n\nconsole.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));\n/*\n{\n  &quot;value&quot;: &quot;Jonney&quot;,\n  &quot;writable&quot;: true,\n  &quot;enumerable&quot;: false,\n  &quot;configurable&quot;: true\n}\n*/\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Unlike #<code>Object.defineProperty</code>the #<code>Object.defineProperties</code>can change multiple flags.</p>\n<pre><code class=\"language-jsx\">let user = { }\n\nObject.defineProperties(user, {\n\tname: {value: &quot;John&quot;, writable: true},\n\tage: {value: 30, enumerable: true}\n});\n\nconsole.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));\n/*\n{\n  &quot;value&quot;: &quot;Jonney&quot;,\n  &quot;writable&quot;: true,\n  &quot;enumerable&quot;: false,\n  &quot;configurable&quot;: false\n}\n*/\n</code></pre>\n</li>\n<li>\n<p>The #<code>Object.preventExtensions()</code> method prevents new properties from ever being added to an object.</p>\n<ul>\n<li>\n<p>The #<code>Object.isExtensible()</code> method determines if an object is extensible.</p>\n<pre><code class=\"language-jsx\">const object1 = {};\n\nObject.preventExtensions(object1);\n\nconsole.log(Object.isExtensible(object1));\n// expected output: false\n\nObject.defineProperty(object1, 'property1', {\n    value: 42\n});\n\nObject.getOwnPropertyDescriptor(object1);\n// Error\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>The #<code>Object.freeze()</code> forbids adding/removing/changing of properties. Sets configurable: false, writable: false for all existing properties.</p>\n<ul>\n<li>\n<p>The #<code>Object.isFrozen()</code> determines if an object is frozen.</p>\n<pre><code class=\"language-jsx\">const obj = {\n  prop: 42\n};\n\nObject.freeze(obj);\n\nconsole.log(Object.isFrozen(obj));\n// true\n\nobj.prop = 33;\n// Throws an error in strict mode\n\nconsole.log(obj.prop);\n// expected output: 42\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>The #<code>Object.seal()</code> method seals an object, preventing new properties from being added to it and marking all existing properties as <code>configurable: false</code>. You can’t delete the value.</p>\n<ul>\n<li>\n<p>The #<code>Object.isSealed()</code> method determines if an object is sealed.</p>\n<pre><code class=\"language-jsx\">const object1 = {\n  property1: 42\n};\n\nObject.seal(object1);\n\nconsole.log(Object.isSealed(object1));\n\nobject1.property1 = 33;\nconsole.log(object1.property1);\n// expected output: 33\n\ndelete object1.property1; // cannot delete when sealed\nconsole.log(object1.property1);\n// expected output: 33\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>#<code>Object.prototype.constructor</code></p>\n<ul>\n<li>\n<p>#<code>constructor</code>shows the variable property match.</p>\n<pre><code class=\"language-jsx\">let o = {};\nconsole.log(o.constructor === Object);\n// true\n\nlet a = [];\nconsole.log(a.constructor === Array);\n// true\n\nlet n = new Number;\nconsole.log(n.constructor === Number);\n// true\n\nlet s = new String;\nconsole.log(s.constructor === String);\n// true\n</code></pre>\n</li>\n<li>\n<p>Create 2nd object using function to object.</p>\n<pre><code class=\"language-jsx\">function Rabbit(name) {\n    this.name = name;\n}\n\nlet rabbit = new Rabbit(&quot;Mik Bunney&quot;);\n\nconsole.log(rabbit.name);\n\nlet newRabbit = new rabbit.constructor(&quot;Mik Bunney&quot;);\n\nnewRabbit.name\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>#<code>F.prototype</code>and #<code>prototype</code></p>\n<ul>\n<li>\n<p>Use <code>F.prototype</code>to connect <code>Object</code>to <code>function</code> adds value top of <code>function</code> value.</p>\n<pre><code class=\"language-jsx\">function username(name, surname) {\n    this.name = name;\n    this.surname = surname;\n}\n\nlet age = {\n\tdob: &quot;18-09-2020&quot;\n}\n\nusername.prototype = age;\n\nlet person = new username(&quot;Joney&quot;, &quot;Deepth&quot;);\n\nconsole.log(`Name: ${person.name} ${person.surname}, DOB: ${person.dob}`);\n</code></pre>\n</li>\n<li>\n<p>Add <code>this</code>value to function without adding value in brackets(<code>{}</code>).</p>\n<pre><code class=\"language-jsx\">function Rabbit() {};\n\nRabbit.prototype.age = 20;\n\nlet rabbit = new Rabbit();\n\nconsole.log(rabbit.age);\n// 20\n</code></pre>\n</li>\n<li>\n<p>Make <code>.function</code>with prototype.</p>\n<pre><code class=\"language-jsx\">function f() {\n\tconsole.log(&quot;Hello&quot;);\n}\n\nFunction.prototype.disc = function(number) {\n\tconsole.log(setTimeout(this, number));\n}\n\nconsole.log(f.disc(1000));\n</code></pre>\n</li>\n<li>\n<p>Make multi-layer brackets.</p>\n<pre><code class=\"language-jsx\">function f(word) {\nconsole.log(word);\n}\n\nFunction.prototype.disc = function(number) {\nlet f = this;\nreturn function(word) {\nconsole.log(setTimeout(() =&gt; f(word), number));\n}\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>The #<code>Object.create()</code> method creates a new object, using an existing object as the prototype of the newly created object.</p>\n<pre><code class=\"language-jsx\">let person = {\n\tisHuman: true,\n\tprintInformation() {\n\t\tif(!this.isHuman) {\n\t\t\tconsole.log(&quot;You are not Human :(&quot;);\n\t\t}\n\t}\n}\n\nconsole.log(person.printInformation());\n\nlet me = Object.create(person);\n\nme.isHuman = false;\n\nconsole.log(me.printInformation());\n// You are not Human :(\n</code></pre>\n</li>\n<li>\n<p>The #<code>Object.getPrototypeOf()</code> method returns the prototype of the specified object.</p>\n<pre><code class=\"language-jsx\">let person1 = {};\n\nlet person2 = Object.create(person1);\n\nconsole.log(Object.getPrototypeOf(person2) === person1);\n// true\n\nconsole.log(person2 === person1);\n// false\n</code></pre>\n</li>\n<li>\n<p>The #<code>Object.setPrototypeOf()</code>is same as <code>Object.create()</code>.</p>\n<pre><code class=\"language-jsx\">let animal = {\n    eat: true,\n    sleep: true\n}\n\nlet animal2 = {\n    eat: false\n}\n\nlet rabbit = Object.create(animal);\n\nconsole.log(rabbit.eat);\n// true\n\nObject.setPrototypeOf(rabbit, animal2);\n\nconsole.log(rabbit.eat);\n// false\n\nconsole.log(rabbit.sleep);\n// undefine\n</code></pre>\n</li>\n<li>\n<p>Show the <code>Object</code>information.</p>\n<ul>\n<li>\n<p>Returns property name.</p>\n<ul>\n<li>\n<p>#<code>Object.keys</code></p>\n<pre><code class=\"language-jsx\">const object1 = {\n  a: 'somestring',\n  b: 42,\n  c: false\n};\n\nconsole.log(Object.keys(object1));\n// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n</code></pre>\n</li>\n<li>\n<p>#<code>Object.getOwnPropertyNames()</code></p>\n<pre><code class=\"language-jsx\">const object1 = {\n  a: 1,\n  b: 2,\n  c: 3\n};\n\nconsole.log(Object.getOwnPropertyNames(object1));\n// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>#<code>Object.values</code>returns property value.</p>\n<pre><code class=\"language-jsx\">const object1 = {\n  a: 'somestring',\n  b: 42,\n  c: false\n};\n\nconsole.log(Object.values(object1));\n// expected output: Array [&quot;somestring&quot;, 42, false]\n</code></pre>\n</li>\n<li>\n<p><code>Object.entries()</code>returns both property name &amp; value.</p>\n<pre><code class=\"language-jsx\">const object1 = {\n  a: 'somestring',\n  b: 42\n};\n\nfor (const [key, value] of Object.entries(object1)) {\n  console.log(`${key}: ${value}`);\n}\n\n// expected output:\n// &quot;a: somestring&quot;\n// &quot;b: 42&quot;\n// order is not guaranteed\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>The #<code>Object.getOwnPropertySymbols()</code> method returns an array of all symbol properties found directly upon a given object.</p>\n<pre><code class=\"language-jsx\">const object1 = {};\nconst a = Symbol('a');\nconst b = Symbol.for('b');\n\nobject1[a] = 'localSymbol';\nobject1[b] = 'globalSymbol';\n\nconst objectSymbols = Object.getOwnPropertySymbols(object1);\n\nconsole.log(objectSymbols.length);\n// expected output: 2\n</code></pre>\n</li>\n<li>\n<p>The static #<code>Reflect.ownKeys()</code> method returns an array of the target object’s own property keys.</p>\n<pre><code class=\"language-jsx\">const object1 = {\n  property1: 42,\n  property2: 13\n};\n\nconst array1 = [];\n\nconsole.log(Reflect.ownKeys(object1));\n// expected output: Array [&quot;property1&quot;, &quot;property2&quot;]\n\nconsole.log(Reflect.ownKeys(array1));\n// expected output: Array [&quot;length&quot;]\n</code></pre>\n</li>\n<li>\n<p>#<code>obj.hasOwnProperty()</code> returns <code>true</code> if <code>Object</code> has its own (not inherited) key named key.</p>\n<pre><code class=\"language-jsx\">const object1 = {};\nobject1.property1 = 42;\n\nconsole.log(object1.hasOwnProperty('property1'));\n// expected output: true\n\nconsole.log(object1.hasOwnProperty('toString'));\n// expected output: false\n\nconsole.log(object1.hasOwnProperty('hasOwnProperty'));\n// expected output: false\n</code></pre>\n</li>\n<li>\n<p>#<code>Object.assign()</code> copy all the value from two object and transfers into one.</p>\n<pre><code class=\"language-jsx\">let object1 = { a: 1, b: 2 };\nlet object2 = { b: 2, c: 3 };\n\nlet superObj = Object.assign(object1, object2);\n\nconsole.log(object1);\n// {a: 1, b: 2, c: 3}\n\nconsole.log(object2);\n// {b: 2, c: 3}\n\nconsole.log(superObj);\n// {a: 1, b: 2, c: 3}\n</code></pre>\n</li>\n<li>\n<p><code>Object.fromEntries</code> Object from Map.</p>\n<pre><code class=\"language-jsx\">let recipeMap = new Map([\n  ['cucumber', 500],\n  ['tomatoes', 350],\n  ['onion',    50]\n]);\nlet prices = Object.fromEntries(recipeMap);\nconsole.log(prices.onion);\n// 50\n</code></pre>\n</li>\n</ul>\n<h2>Map</h2>\n<ul>\n<li>\n<p>Basics with <code>Map()</code>, <code>has()</code>, <code>get()</code>, &amp; <code>set()</code></p>\n<pre><code class=\"language-jsx\">let recipeMap = new Map([\n  ['cucumber', 500],\n  ['tomatoes', 350],\n  ['onion',    50]\n]);\nrecipeMap.set('garilica',    60)\n\t\t .set('others', 100);\nconsole.log(recipeMap.has('others'));\n// true\nconsole.log(recipeMap.get('onion'));\n// 50\n</code></pre>\n</li>\n<li>\n<p>Run <code>Map()</code> iterator with <code>keys()</code>, <code>value()</code> &amp; <code>entries()</code></p>\n<pre><code class=\"language-jsx\">let recipeMap = new Map([\n  ['cucumber', 500],\n  ['tomatoes', 350],\n  ['onion',    50]\n]);\nlet recipeEntries = recipeMap.entries();\nconsole.log(recipeEntries.next().value);\n// [&quot;cucumber&quot;, 500]\nconsole.log(recipeEntries.next().value);\n// [&quot;tomatoes&quot;, 350]\nlet recipeValue = recipeMap.value();\nconsole.log(recipeValue.next().value);\n// 500\nlet recipeKeys = recipeMap.keys();\nconsole.log(recipeKeys.next().value);\n// &quot;cucumber&quot;\n</code></pre>\n</li>\n<li>\n<p>Delete the <code>Map()</code> entries with <code>delete()</code> &amp; <code>clear()</code>.</p>\n<pre><code class=\"language-jsx\">let recipeMap = new Map([\n  ['cucumber', 500],\n  ['tomatoes', 350],\n  ['onion',    50]\n]);\nrecipeMap.delete()\nconsole.log(recipeMap.size);\n// 2\nrecipeMap.clear()\nconsole.log(recipeMap.size);\n// 0\n</code></pre>\n</li>\n<li>\n<p>Length of <code>Map()</code> with <code>size</code>.</p>\n<pre><code class=\"language-jsx\">let recipeMap = new Map([\n  ['cucumber', 500],\n  ['tomatoes', 350],\n  ['onion',    50]\n]);\nconsole.log(recipeMap.size);\n// 3\n</code></pre>\n</li>\n<li>\n<p>Random Number with <code>Math.random()</code></p>\n<pre><code class=\"language-jsx\">// With ceil\nfor (let i = 0; i &lt; 9; i = Math.ceil(Math.random() * 10)) {\n    console.log(i);\n}\n// With floor (only goes to 0 to 9)\nfor (let i = 0; i &lt; 9; i = Math.floor(Math.random() * 10)) {\n    console.log(i);\n}\n</code></pre>\n</li>\n</ul>\n<h2>Math</h2>\n<ul>\n<li>\n<p><code>Math</code> is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.</p>\n<p><a href=\"https://anzenkodo.github.io/notes/The%20JavaScript%20language%20dda21ff2e0dc4987a0af85b5e6efb600/Math%20d81dc67853fc4521a32f51d9ff504b89.csv\">Math</a></p>\n</li>\n</ul>\n<h2>Number</h2>\n<ul>\n<li>\n<p>Fixed the Float number <code>toFixed()</code></p>\n<pre><code class=\"language-jsx\">let n = 1.23456;\nalert( n.toFixed(2) ); // 1.23\n</code></pre>\n</li>\n</ul>\n<h2>String</h2>\n<ul>\n<li>\n<p>Escape notation</p>\n<ul>\n<li><code>\\n</code>New line</li>\n<li><code>\\r</code>Carriage return: not used alone. Windows text files use a combination of two characters \\r\\n to represent a line break.</li>\n<li><code>\\', \\&quot;</code>Quotes</li>\n<li><code>\\\\</code>Backslash</li>\n<li><code>\\t</code>Tab</li>\n<li><code>\\b, \\f, \\v</code> Backspace, Form Feed, Vertical Tab – kept for compatibility, not used nowadays.</li>\n<li><code>\\xXX</code>Unicode character with the given hexadecimal Unicode XX, e.g. ‘\\x7A’ is the same as ‘z’.</li>\n<li><code>\\uXXXX</code>A Unicode symbol with the hex code XXXX in UTF-16 encoding, for instance \\u00A9 – is a Unicode for the copyright symbol :copyright:. It must be exactly 4 hex digits.</li>\n<li><code>\\u{X…XXXXXX}</code> <strong>(1 to 6 hex characters)</strong> A Unicode symbol with the given UTF-32 encoding. Some rare characters are encoded with two Unicode symbols, taking 4 bytes. This way we can insert long codes.</li>\n</ul>\n</li>\n<li>\n<p><code>padStart</code> and takes the desired length and padding character as arguments.</p>\n<pre><code class=\"language-jsx\">console.log(String(6).padStart(3, &quot;0&quot;));\n// → 006\n</code></pre>\n</li>\n<li>\n<p>Make Array a String with <code>toString</code>.</p>\n<pre><code class=\"language-jsx\">console.log([1, 2].toString());\n// 1,2\n</code></pre>\n</li>\n<li>\n<p>Search for a specific value with <code>lastIndexOf</code> &amp; <code>indexOf</code></p>\n<pre><code class=\"language-jsx\">let num = [1, 2, 3, 2, 1];\nconsole.log(num.indexOf(2));\n// 1\nconsole.log(num.lastIndexOf(1));\n// 4\nconsole.log(&quot;coconut&quot;.indexOf(&quot;co&quot;));\n// 0\nconsole.log(&quot;coconut&quot;.indexOf(&quot;co&quot;, 1))\n// 3\n</code></pre>\n</li>\n<li>\n<p>Split the string with <code>split</code>.</p>\n<pre><code class=\"language-jsx\">let sentence = &quot;Secretarybirds.specialize.in.stomping&quot;;\nlet words = sentence.split(&quot;.&quot;);\nconsole.log(words);\n// → [&quot;Secretarybirds&quot;, &quot;specialize&quot;, &quot;in&quot;, &quot;stomping&quot;]\nconsole.log(words.join(&quot;. &quot;));\n// → Secretarybirds. specialize. in. stomping\n</code></pre>\n</li>\n<li>\n<p>Upper and Lowercase with <code>toUpperCase()</code> &amp; <code>toLowerCase</code>.</p>\n<pre><code class=\"language-jsx\">let word = &quot;This is Upper Case&quot;;\nconsole.log(word.toUpperCase());\n// THIS IS UPPER CASE\nlet word = &quot;This is Lower Case&quot;;\nconsole.log(word.toLowerCase());\n// this is lower case\n</code></pre>\n</li>\n<li>\n<p>Remove whitespace with <code>trim</code>.</p>\n<pre><code class=\"language-jsx\">console.log(&quot;  okay \\n &quot;.trim());\n// → okay\n</code></pre>\n</li>\n<li>\n<p>Repeated with <code>repeat</code></p>\n<pre><code class=\"language-jsx\">console.log(&quot;/&quot; + &quot;*&quot;.repeat(10) + &quot;\\n&quot; + &quot;@Gii\\n&quot; + &quot;*&quot;.repeat(10) + &quot;/&quot;);\n/**********\n@Gii\n**********/\n</code></pre>\n</li>\n<li>\n<p>To get a character at position with <code>charAt()</code></p>\n<pre><code class=\"language-jsx\">let str = &quot;hello&quot;\nconsole.log(str[1]);\n// 1\nconsole.log(str.charAt(1));\n// 1\n</code></pre>\n</li>\n<li>\n<p>Check if it contains the string in start and end with <code>startWith()</code> &amp; <code>endWith()</code>.</p>\n<pre><code class=\"language-jsx\">alert( &quot;Widget&quot;.startsWith(&quot;Wid&quot;) );\n// true\nalert( &quot;Widget&quot;.endsWith(&quot;get&quot;) );\n// true\n</code></pre>\n</li>\n<li>\n<p>Checks every array with <code>every()</code>.</p>\n<pre><code class=\"language-jsx\">const formula = n =&gt; n % 2 === 0;\n[2, 4, 6, 8, 10].every(formula);\n// true\n[2, 3, 6, 8, 10].every(formula);\n// false\n</code></pre>\n</li>\n<li>\n<p>Change value of array with <code>splice()</code>.</p>\n<pre><code class=\"language-jsx\">const meetingWords = [&quot;hi&quot;, &quot;hello&quot;, &quot;whats up&quot;, &quot;how are you&quot;];\nconst newMeetingWords = [&quot;ohh hello&quot;, &quot;nice to meet you&quot;]\nmeetingWords.splice(1, 2, newMeetingWords);\nconsole.log(meetingWords);\n// [&quot;hi&quot;, [&quot;ohh hello&quot;, &quot;nice to meet you&quot;], &quot;how are you&quot;]\n</code></pre>\n</li>\n<li>\n<p>Combine array in the array with <code>flat()</code>.</p>\n<pre><code class=\"language-jsx\">onst meetingWords = [&quot;hi&quot;, [&quot;ohh hello&quot;, &quot;nice to meet you&quot;], &quot;how are you&quot;];\nconsole.log(meetingWords.flat());\n// [&quot;hi&quot;, &quot;ohh hello&quot;, &quot;nice to meet you&quot;, &quot;how are you&quot;]\n</code></pre>\n</li>\n<li>\n<p>Manipulate Arrays with <code>push()</code> &amp; <code>pop()</code>.</p>\n<pre><code class=\"language-jsx\">let num = [1, 2, 3];\nnum.push(4);\n// Adds 4 in last in seqnce\nconsole.log(num);\n// [1, 2, 3, 4]\nconsole.log(num.pop()); // Delete's the 4 for seqnce\n// 4\nconsole.log(num);\n// [1, 2, 3]\n</code></pre>\n</li>\n<li>\n<p>Changes all elements in an array to a static value with <code>fill()</code>.</p>\n<pre><code class=\"language-jsx\">const array1 = [1, 2, 3, 4];\nconst i = array1.indexOf(2);\nconsole.log(array1.fill(&quot;hi&quot;, i));\n// [1, &quot;hi&quot;, &quot;hi&quot;, &quot;hi&quot;]\nconsole.log(array1.fill(&quot;hi&quot;, i, i+1));\n// [1, &quot;hi&quot;, 3, 4]\n</code></pre>\n<h3><code>forEach()</code> inline loop</h3>\n<pre><code class=\"language-js\">[&quot;A&quot;, &quot;B&quot;].forEach(l =&gt; console.log(l));\n// A\n// B\n</code></pre>\n</li>\n<li>\n<p><code>filter()</code> to <code>if()</code> in inline.</p>\n<pre><code class=\"language-jsx\">const numArray = [1, 2, 3, 4, 5];\nconsole.log(numArray.filter(n =&gt; n%2 === 0));\n// [2, 4]\n</code></pre>\n</li>\n<li>\n<p><code>map()</code> creates a new array.</p>\n<pre><code class=\"language-jsx\">const array1 = [1, 4, 9, 16];\nconst map1 = array1.map(x =&gt; x * 2);\nconsole.log(map1);\n// Array [2, 8, 18, 32]\n</code></pre>\n</li>\n<li>\n<p><code>some()</code> to find <code>true</code> &amp; <code>false</code>.</p>\n<pre><code class=\"language-jsx\">const array = [1, 2, 3, 4, 5];\nconsole.log(array.some(l =&gt; l % 2 == 0));\n// true\n</code></pre>\n</li>\n<li>\n<p>Shallow copies part of an array to another location <code>copyWithin()</code>.</p>\n<pre><code class=\"language-jsx\">const array1 = ['a', 'b', 'c', 'd', 'e'];\nconsole.log(array1.copyWithin(0, 3, 4));\n// [&quot;d&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]\n// copy to index 1 all elements from index 3 to the end\nconsole.log(array1.copyWithin(1, 3));\n// [&quot;d&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;e&quot;]\n</code></pre>\n</li>\n<li>\n<p>Inline calculation <code>reduce()</code>.</p>\n<pre><code class=\"language-jsx\">const array1 = [1, 2, 3, 4];\nconst reducer = (a, b) =&gt; a + b;\nconsole.log(array1.reduce(reducer));\n// 10\nconsole.log(array1.reduce(reducer, 5));\n// 15\n</code></pre>\n</li>\n<li>\n<p>Combine value with <code>concat()</code>.</p>\n<pre><code class=\"language-jsx\">let arrays = [[1, 2, 3], [4, 5], [6]];\nconsole.log(arrays.reduce((a, b) =&gt; a.concat(b)))\n// [1, 2, 3, 4, 5, 6]\n</code></pre>\n</li>\n</ul>\n<h2>Global Object</h2>\n<ul>\n<li>\n<p>The <code>WeakSet</code> object lets you store weakly held objects in a collection.</p>\n<pre><code class=\"language-jsx\">// WeakSet\nlet visitedSet = new WeakSet();\nlet john = { name: &quot;John&quot; };\nvisitedSet.add(john);\nconsole.log(visitedSet.has(john));\n// true\njohn = null;\nconsole.log(visitedSet.has(john));\n// fase\n// Set\nvisitedSet = new Set();\nvisitedSet.add(john);\njohn = { name: &quot;John&quot; };\nconsole.log(visitedSet.has(john));\n// true\njohn = null;\nconsole.log(visitedSet.has(john));\n// true\n</code></pre>\n</li>\n<li>\n<p>The <code>WeakMap</code> object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.</p>\n<pre><code class=\"language-jsx\">// :file_folder: cache.js\nlet cache = new Map();\n// calculate and remember the result\nfunction process(obj) {\n  if (!cache.has(obj)) {\n    let result = /* calculations of the result for */ obj;\n    cache.set(obj, result);\n  }\n  return cache.get(obj);\n}\n// Now we use process() in another file:\n// :file_folder: main.js\nlet obj = {/* let's say we have an object */};\nlet result1 = process(obj); // calculated\n// ...later, from another place of the code...\nlet result2 = process(obj); // remembered result taken from cache\n// ...later, when the object is not needed any more:\nobj = null;\nalert(cache.size); // 1 (Ouch! The object is still in cache, taking memory!)\n</code></pre>\n</li>\n<li>\n<p>Convert string into number with <code>parseInt</code>.</p>\n<pre><code class=\"language-jsx\">function input(value) {\n\tlet valueInt = parseInt(value);\n\treturn valueInt * 2;\n}\nconsole.log(input(3));\n// 6\n</code></pre>\n</li>\n</ul>\n<h2>Symbol</h2>\n<ul>\n<li>\n<p>Symbol into Method.</p>\n<pre><code class=\"language-jsx\">let sym = Symbol(&quot;123&quot;);\nlet met = {\n\t[sym]() {return &quot;This is Symbol&quot;}\n}\nconsole.log(met[sym]());\n</code></pre>\n</li>\n<li>\n<p>Global symbols with <code>Symbol.for()</code>.</p>\n<pre><code class=\"language-jsx\">let id = Symbol.for(&quot;id&quot;);\nlet idAgain = Symbol.for(&quot;id&quot;);\nconsole.log( id === idAgain );\n// true\n</code></pre>\n</li>\n<li>\n<p>Global symbol key with <code>Symbol.keyFor()</code>.</p>\n<pre><code class=\"language-jsx\">et id = Symbol.for(&quot;id&quot;);\nconsole.log( Symbol.keyFor(id));\n// id\n</code></pre>\n</li>\n<li>\n<p>The iterator interface in <code>Symbol.iterator()</code></p>\n<pre><code class=\"language-jsx\">let word = &quot;in&quot;;\nlet ite = word[Symbol.iterator]();\nconsole.log(ite.next());\n// {value: &quot;i&quot;, done: false}\nconsole.log(ite.next().value);\n// n\nconsole.log(ite.next());\n// {value: undefined, done: true}\nconsole.log(ite.next().done);\n// true\nlet array = [&quot;inside&quot;, &quot;outside&quot;];\nite = array[Symbol.iterator]();\nconsole.log(ite.next().value);\n// inside\n</code></pre>\n</li>\n</ul>\n<h2>Error</h2>\n<ul>\n<li>\n<p>Extending Error</p>\n<pre><code class=\"language-jsx\">class TrueError extends Error {\n    constructor(name, message) {\n        super(message);\n        this.name = name;\n    }\n}\n\ntry {\n    test();\n} catch(err) {\n    if ( err instanceof TrueError) {\n        console.log( err.name );\n    }\n    if ( err instanceof Error ) {\n        console.log( err.message );\n    }\n} finally {\n    console.log(&quot;Runed&quot;);\n}\n\n// TrueError\n// Not a real error.\n// Runed\n</code></pre>\n</li>\n<li>\n<p>❓Extending Error can <code>extends</code>other error also</p>\n<pre><code class=\"language-jsx\">class FormatError extends SyntaxError {\n    constructor(message) {\n        super(message);\n        this.name = &quot;FormatError&quot;;\n        this.stack = &quot;Stack&quot;;\n    }\n}\n\nlet err = new FormatError(&quot;Formatting error&quot;);\n\nalert( err.message ); // Formatting error\nalert( err.name ); // FormatError\nalert( err.stack ); // stack\n\nalert( err instanceof FormatError ); // true\nalert( err instanceof SyntaxError ); // true (because inherits from SyntaxError)\n</code></pre>\n</li>\n<li>\n<p>Error with <code>if...else</code></p>\n<pre><code class=\"language-jsx\">try {\n    NotDefine();\n} catch(err) {\n    console.log( err.name === &quot;ReferenceError&quot; );\n}\n\n// true\n</code></pre>\n</li>\n</ul>\n<h1>Class</h1>\n<ul>\n<li>\n<p>What class <code>User {...}</code> construct really does is:</p>\n<ol>\n<li>Creates a function named <code>User</code>, that becomes the result of the class declaration. The function code is taken from the <code>constructor</code> method (assumed empty if we don’t write such method).</li>\n<li>Stores class methods, such as <code>sayHi</code>, in <code>User.prototype</code>.</li>\n</ol>\n<pre><code class=\"language-jsx\">class User{\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n    userInfo() {\n        console.log(`Name: ${this.name}\\n Age: ${this.age}`);\n    }\n}\n\nlet jone = new User(&quot;Jone Funzo&quot;, 30);\n\nconsole.log(jone.age);\n// 30\n\nconsole.log(jone.userInfo());\n// Name: Jone Funzo\n Age: 30\n</code></pre>\n</li>\n<li>\n<p>Just like functions, classes can be defined inside another variable expression, passed around, returned, assigned, etc.</p>\n<pre><code class=\"language-jsx\">const Use = class {\n    constructor(name) {\n        this.name = name;\n    }\n    sayHi() {\n        console.log(this.name);\n    }\n}\n\nlet use = new Use(&quot;Jonney&quot;);\n\nuse.sayHi()\n// Jonney\n</code></pre>\n</li>\n<li>\n<p>Class with also having function expression with it.</p>\n<pre><code class=\"language-jsx\">class User {\n    constructor(name) {\n        this.name = name;\n    }\n    sayHi(age) {\n        console.log(this.name + ' ' + age);\n    }\n}\n\nlet me = new User(&quot;James&quot;);\n\nconsole.log(me.sayHi(32));\n// James 32\n</code></pre>\n</li>\n<li>\n<p>Function with <code>class</code> inside it.</p>\n<pre><code class=\"language-jsx\">function makeClass(word) {\n\treturn class {\n\t\tsayHi() {\n\t\tconsole.log(word);\n\t\t}\n\t}\n}\n\nlet hello = new makeClass(&quot;How are you?&quot;);\n\nhello().sayHi();\n// How are you?\n</code></pre>\n</li>\n<li>\n<p>#<code>getter</code> &amp; #<code>setter</code>in the class.</p>\n<pre><code class=\"language-jsx\">class User {\n    constructor(name) {\n        this.name = name;\n    }\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        if (value &gt; 4) {\n            return &quot;Too short name!&quot;;\n        }\n        this._name = value;\n    }\n}\n\nlet user = new User(&quot;Jone&quot;);\n\nuser.name\n</code></pre>\n</li>\n<li>\n<p>Using <code>class</code>without <code>constructor</code>.</p>\n<pre><code class=\"language-jsx\">class User {\n\tname = &quot;Joey&quot;;\n\tage = 32;\n\n\tinfo() {\n\t\tconsole.log(`${this.name} age is ${this.age}`);\n\t}\n}\n\nlet joey = new User;\n\nconsole.log(joey.name);\n// Joey\n\nconsole.log(joey.info());\n// Joey age is 32\n</code></pre>\n</li>\n<li>\n<p>#<code>extents</code>information.</p>\n<ul>\n<li>\n<p><code>extents</code>to connect two classes together.</p>\n<pre><code class=\"language-jsx\">class Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    walk() {\n        console.log(`${this.name} can walk.`);\n    }\n}\n\nclass Birds extends Animal {\n    fly() {\n        console.log(`${this.name} can fly`);\n    }\n}\n\nlet lion = new Animal(&quot;Lion&quot;);\nconsole.log(lion.walk());\n// Lion can walk\n// console.log(lion.fly()); woldn't run\n// Error\n\nlet pigions = new Birds(&quot;Pigions&quot;);\nconsole.log(pigions.walk());\n// Pigions can walk\nconsole.log(pigions.fly());\n// Pigions can fly\n</code></pre>\n</li>\n<li>\n<p>#<code>super.variable</code>shows the <code>extents</code>prenat variable result.</p>\n<ul>\n<li><code>super</code>don’t work with arrow function(<code>⇒</code>).</li>\n</ul>\n<pre><code class=\"language-jsx\">class Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    place() {\n        return `Londan`;\n    }\n}\n\nclass Rabbit extends Animal {\n    place() {\n        return `Londan`;\n    }\n    travel() {\n        console.log(`${this.place()} to ${super.place()}`);\n    }\n}\n\nlet rabbit = new Rabbit(&quot;Jonney&quot;);\n\nrabbit.travel();\n</code></pre>\n</li>\n<li>\n<p><code>extents</code> connect with <code>super()</code>to bypass parental <code>constructor</code>.</p>\n<pre><code class=\"language-jsx\">class Animal {\n    constructor(name) {\n        this.speed = 0;\n        this.name = name;\n    }\n}\n\nclass Reddit extends Animal {\n    constructor(name, age) {\n        super(name);\n        this.age = age;\n    }\n    run() {\n        console.log(`That ${this.name} is ${this.age} age and running.`);\n    }\n}\n\nlet reddit = new Reddit(&quot;White Rabbit&quot;, 23);\n\nreddit.run()\n// That White Rabbit is 23 age and running.\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Private properties and methods to secure the overwriting.</p>\n<pre><code class=\"language-jsx\">class Cla {\n    #private = 0;\n\n    #privateMessage() {\n        console.log(&quot;You unlock it WoW.&quot;);\n    }\n\n    lockMessage() {\n        console.log(this.#privateMessage());\n    }\n}\n\nlet cla = new Cla;\n\ncla.lockMessage();\n// You unlock it WoW.\n\nconsole.log(cla.private);\n// Error\n\nconsole.log(cla.privateMessage());\n// Erro\n</code></pre>\n</li>\n<li>\n<p>Classes with built-in classes.</p>\n<pre><code class=\"language-jsx\">class PowerArray extends Array {\n    number = 20;\n\n    add() {\n        return 2 + 2;\n    }\n}\n\nlet powerArray = new PowerArray(1, 2, 3, 4);\n\nconsole.log(powerArray.length);\n// 4\n\nconsole.log(powerArray.number);\n// 20\n\nconsole.log(powerArray.add());\n// 4\n</code></pre>\n</li>\n<li>\n<p>Make the mixin with object and use with class.</p>\n<pre><code class=\"language-jsx\">// Mixin\nlet myMixin = {\n\tsayUser(name) {\n\t\tconsole.log(`${name} is ${this.age} years old.`);\n\t}\n}\n\nclass Jonney {\n\tage = 32;\n\ttest = true;\n}\n\nObject.assign(Jonney.prototype, myMixin);\n\nlet jonney = new Jonney();\n\njonney.sayUser(&quot;Jonney&quot;);\n// Jonney\nconsole.log(jonney.test);\n// true\n</code></pre>\n</li>\n<li>\n<p><code>static</code>methods are called directly on the class without creating an instance/object of the class.</p>\n<pre><code class=\"language-jsx\">class Car {\n\tstatic myCars(name) {\n\t\tconsole.log(name);\n\t}\n\tstatic NumCars = 3;\n}\n\nconsole.log(Car.NumCars = 4);\n// 4\n\nCar.myCars(&quot;Ford&quot;);\n</code></pre>\n</li>\n<li>\n<p>#<code>Symbol.hasInstance</code>is well-known symbol is used to determine if a constructor object recognizes an object as its instance.</p>\n<pre><code class=\"language-jsx\">class TrueOr {\n    static [Symbol.hasInstance](obj) {\n        return true;\n    }\n}\n\nobj = {\n    eat: false\n}\n\nconsole.log(obj instanceof TrueOr);\n// true\n\nconsole.log(Array instanceof TrueOr);\n// true\n\nclass TrueOr {\n    static [Symbol.hasInstance](obj) {\n        if(obj.eat) return true; // changed\n    }\n}\n\ncosnole.log(obj instanceof TrueOr);\n// true\n</code></pre>\n</li>\n</ul>\n<h1>Expressions and operators</h1>\n<ul>\n<li>\n<p>The #<code>new</code> syntax</p>\n<ul>\n<li>\n<p>The function is created with the arguments <code>arg1...argN</code> and the given function Body.</p>\n<pre><code class=\"language-jsx\">let sum = new Function('a', 'b', 'return a + b');\n\nalert( sum(1, 2) ); // 3\n</code></pre>\n</li>\n<li>\n<p>When a function is created using a new Function, its <code>[[Environment]]</code> is set to reference not the current Lexical Environment, but the global one.</p>\n<pre><code class=\"language-jsx\">function getFunc() {\n  let value = &quot;test&quot;;\n\n  let func = new Function('alert(value)');\n\n  return func;\n}\n\ngetFunc()(); // error: value is not defined\n</code></pre>\n</li>\n<li>\n<p>Turn <code>function</code> into <code>Object</code>.</p>\n<pre><code class=\"language-jsx\">function User(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\n\nlet ravi = new User(&quot;Ravi Sharma&quot;, 25);\n\nconsole.log(ravi.name);\n// Ravi Sharma\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>#<code>instanceof</code>check whether an object belongs to a certain class or not.</p>\n<pre><code class=\"language-jsx\">console.log([] instanceof Array);\n// true\n\nconsole.log({} instanceof Symbol);\n// false\n\nconsole.log(Array instanceof Object);\n// true\n</code></pre>\n</li>\n<li>\n<p>Change the location of function with <code>this</code> &amp; <code>call</code>.</p>\n<pre><code class=\"language-jsx\">function speak(line) {\n  console.log(`The ${this.type} rabbit says '${line}'`);\n}\nlet hungryRabbit = {type: &quot;hungry&quot;, speak};\nhungryRabbit.speak(&quot;I could use a carrot right now.&quot;);\n// The hungry rabbit says 'I could use a carrot right now.'\nspeak.call(hungryRabbit, &quot;Burp!&quot;);\n// → The hungry rabbit says 'Burp!'\n</code></pre>\n</li>\n<li>\n<p>Optional chaining with <code>?.</code></p>\n<pre><code class=\"language-jsx\">const user = {\n\tname = &quot;aav&quot;;\n}\nconsole.log(user?.name);\n// aav\nconsole.log(user?.age);\n// undefine\n</code></pre>\n</li>\n<li>\n<p>Converts number-string to number with <code>+</code></p>\n<pre><code class=\"language-jsx\">console.log(+true);\n// 1\nconsole.log(+false);\n// 0\nlet x = &quot;1&quot;, y = &quot;2&quot;;\nconsole.log(x + y);\n// 12\nconsole.log(+x + +y);\n// 3\n</code></pre>\n</li>\n<li>\n<p><code>~</code> Adds +1 in the number.</p>\n<pre><code class=\"language-jsx\">console.log(~1);\n// 2\n</code></pre>\n</li>\n</ul>\n<h1>Statements and declarations</h1>\n<ul>\n<li>\n<p><code>import</code> &amp; <code>export</code></p>\n<ul>\n<li>\n<p>Module import with <code>require()</code></p>\n<pre><code class=\"language-jsx\">// sayHi.js\nfunction sayHi(user) {\n\treturn `Hello ${user}`;\n}\n\nmodule.exports = { sayHi };\n</code></pre>\n<pre><code class=\"language-jsx\">// main.js\n\nlet hi = require('./say');\n\nconsole.log(hi.sayHi(&quot;AAV&quot;));\n</code></pre>\n</li>\n<li>\n<p>Normal module</p>\n<pre><code class=\"language-jsx\">// 📁 sayHi.js\nexport function sayHi(user) {\n  alert(`Hello, ${user}!`);\n}\n</code></pre>\n<pre><code class=\"language-jsx\">// 📁 main.js\nimport {sayHi} from './sayHi.js';\n\nalert(sayHi); // function...\nsayHi('John'); // Hello, John!\n</code></pre>\n</li>\n<li>\n<p>HTML file Module</p>\n<pre><code class=\"language-jsx\">// main.js\n\nexport function sayHi(user) {\n\treturn `Hello ${user}`;\n}\n</code></pre>\n<pre><code class=\"language-html\">&lt;!Doctype HTML&gt;\n&lt;body&gt;\n\t&lt;script type=&quot;module&quot;&gt;\n\t\timport { sayHi } from './main.js'\n\n\t\tdocument.body.innerHTML = sayHi(&quot;AAV&quot;);\n\t&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n</li>\n<li>\n<p>if a module script is fetched from another origin, the remote server must supply a header <code>Access-Control-Allow-Origin</code> allowing the fetch.</p>\n</li>\n<li>\n<p>The <code>import.meta</code> object exposes context-specific metadata to a JavaScript module. It contains information about the module.</p>\n<pre><code class=\"language-html\">&lt;!--index.html--&gt;\n\n&lt;script type=&quot;module&quot; src=&quot;my-module.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<pre><code class=\"language-jsx\">// my-module.js\n\nconsole.log(import.meta);\n</code></pre>\n</li>\n<li>\n<p><code>import.meta.url</code> for showing URL.</p>\n<pre><code class=\"language-html\">&lt;script type=&quot;module&quot;&gt;\n  alert(import.meta.url); // script url (url of the html page for an inline script)\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>\n<p><code>export</code>and <code>import</code>multipule module.</p>\n<pre><code class=\"language-jsx\">// export.js\n\nfunction sayHi(name) {\n\tconsole.log(`Hello ${name}`);\n}\n\nlet days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\nlet user = {\n\tname: 'Peater Sons',\n\tyear: 2003\n}\n\nexport { sayHi, days, user }\n</code></pre>\n<pre><code class=\"language-jsx\">// import.js\n\nimport { sayHi, days, user } from './export.js';\n\nsayHi(user.name);\n\nconsole.log(`This is ${days[3]}day of the month.`)\n</code></pre>\n</li>\n<li>\n<p><code>import *</code> for importing as object <strong>Note</strong>: This is preferred method to import the module.</p>\n<pre><code class=\"language-jsx\">// export.js\n\nfunction sayHi(name) {\n\tconsole.log(`Hello ${name}`);\n}\n\nlet days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\nlet user = {\n\tname: 'Peater Sons',\n\tyear: 2003\n}\n\nexport { sayHi, days, user }\n</code></pre>\n<pre><code class=\"language-jsx\">// import.js\n\nimport * as data from './export.js';\n\ndata.sayHi(data.user.name);\n\nconsole.log(`This is ${data.days[3]}day of the month.`);\n</code></pre>\n</li>\n<li>\n<p><strong>Note</strong>: To avoid that and keep the code consistent, there’s a rule that imported variables should correspond to file names.</p>\n<pre><code class=\"language-jsx\">import User from './user.js';\nimport LoginForm from './loginForm.js';\nimport func from '/path/to/func.js';\n</code></pre>\n</li>\n<li>\n<p>Change name with <code>as</code></p>\n<pre><code class=\"language-jsx\">// export.js\n\nexport class User {\n\tconstructor(name) {\n\t\tthis.name = name;\n\t}\n}\n\nexport function sayHi(user) {\n\tconsole.log(`Hello, ${user}!`);\n}\n</code></pre>\n<pre><code class=\"language-jsx\">// import.js\n\nimport { User as user, sayHi as hi } from './export.js';\n\nlet id = new user('John');\n\nhi(id.name);\n</code></pre>\n</li>\n<li>\n<p><code>import</code> anywhere in the script with Dynamic imports</p>\n<pre><code class=\"language-jsx\">// export.js\n\nfunction hello() {\n\tconsole.log(`Hello`);\n}\n\nfunction bye() {\n\tconsole.log(`Bye`);\n}\n\nexport { hello, bye };\n</code></pre>\n<pre><code class=\"language-jsx\">// import .js\n\nlet { hello, bye } = await import('./export.js');\n\nhello();\nbye();\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Generator functions with <code>function*</code> &amp; <code>yield</code></p>\n<ul>\n<li>\n<p>How to Generator looks?</p>\n<pre><code class=\"language-jsx\">function* generatorSequence() {\n    yield 1;\n    yield 2;\n    return 3;\n}\n\nlet generator = generatorSequence(); // Important to declare or not work\n\nlet one = generator.next();\nconsole.log(one);\n// {value: 1, done: false}\n\nlet two = generator.next();\nconsole.log(two);\n// {value: 2, done: false}\n\nlet three = generator.next();\nconsole.log(three);\n// {value: 3, done: true}\n</code></pre>\n</li>\n<li>\n<p>Generator with loop.</p>\n<pre><code class=\"language-jsx\">function* foo(index) {\n    let loop = 0;\n    for ( ; loop &lt; index; loop++ ) {\n        yield loop;\n    }\n    return loop;\n}\n\nlet runner = foo(3);\n\nconsole.log(runner.next());\nconsole.log(runner.next());\nconsole.log(runner.next());\nconsole.log(runner.next());\n</code></pre>\n</li>\n<li>\n<p>Generator with loop with <code>for...of</code></p>\n<pre><code class=\"language-jsx\">function foo(index) {\n\n\tlet loop = 0;\n\n\tfor ( ; loop &lt; index ; loop++ ) {\n\t\tyield loop;\n\t}\n\n\treturn loop;\n}\n\nfor ( let value of foo(5) ) {\n\tconsole.log(value);\n}\n/*\n1\n2\n3\n4\nDon't reutrn `done: true`\n*/\n</code></pre>\n</li>\n<li>\n<p>Generator with spread syntax.</p>\n<pre><code class=\"language-jsx\">function* foo(index) {\n\n\tlet loop = 0;\n\n\tfor ( ; loop &lt; index ; loop++ ) {\n\t\tyield loop;\n\t}\n\n\treturn loop;\n}\n\nconsole.log(...foo(5));\n\n// 0, 1, 3, 4\n</code></pre>\n</li>\n<li>\n<p>The composed generator:</p>\n<pre><code class=\"language-jsx\">function* generatePasswordCodes() {\n    for ( let start = 48; start &lt;= 57; start++) yield start;\n    for ( let start = 65; start &lt;= 90; start++) yield start;\n    for ( let start = 97; start &lt;= 122; start++) yield start;\n}\n\nlet str = ''\n\nfor ( let code of generatePasswordCodes() ) {\n    str += String.fromCharCode(code);\n}\n\nconsole.log(str);\n// 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n</code></pre>\n</li>\n<li>\n<p>Show <code>console.log</code>first and then answer.</p>\n<pre><code class=\"language-jsx\">function* gen() {\n    console.log(&quot;Slove&quot;);\n\n    let ask1 = yield &quot;2 + 2 = ?&quot;;\n\n    console.log(ask1);\n\n    let ask2 = yield &quot;3 + 3 = ?&quot;;\n\n    console.log(ask2);\n}\n\nlet generator = gen();\n\nconsole.log(generator.next().value);\n// Slove\n// 2 + 2 = ?\nconsole.log(generator.next(4).value);\n// 4\n// 3 + 3 = ?\nconsole.log(generator.next(9).done);\n// 9\n// true\n</code></pre>\n</li>\n<li>\n<p><code>*[Symbol.iterator]</code></p>\n<pre><code class=\"language-jsx\">let range = {\n\tfrom: 1,\n\tto: 5,\n\n\t*[Symbol.iterator]() {\n\t\tfor( let value = this.from; value &lt;= this.to; value++ ) {\n\t\t\tyield value;\n        }\n    }\n}\n\nconsole.log(...range);\n// 1, 2, 3, 4, 5\n</code></pre>\n</li>\n<li>\n<p><code>generator.throw</code>for Error</p>\n<pre><code class=\"language-jsx\">function* gen() {\n  try {\n    let result = yield &quot;2 + 2 = ?&quot;; // (1)\n\n    alert(&quot;The execution does not reach here, because the exception is thrown above&quot;);\n  } catch(e) {\n    alert(e); // shows the error\n  }\n}\n\nlet generator = gen();\n\nlet question = generator.next().value;\n\ngenerator.throw(new Error(&quot;The answer is not found in my database&quot;)); // (2)\n</code></pre>\n</li>\n<li>\n<p>Generator for random number.</p>\n<pre><code class=\"language-jsx\">function* pseudoRandom(value) {\n    while(true) {\n        value = value * 16807 % 2147483647;\n        yield value;\n    }\n}\n\nlet generator = pseudoRandom(1);\n\nalert(generator.next().value); // 16807\nalert(generator.next().value); // 282475249\nalert(generator.next().value); // 1622650073\n</code></pre>\n</li>\n<li>\n<p><code>async</code>Async iterable range iterable range</p>\n<pre><code class=\"language-jsx\">let range = {\n\tfrom: 1,\n\tto: 5,\n\n\tasync *[Symbol.asyncIterator]() {\n\t\tfor ( let value = this.from; value &lt;= this.to; value++ ) {\n\t\t\tawait new Promise(reslove =&gt; setTimeout(reslove, 1000));\n\t\t\tyield value;\n        }\n\t}\n};\n\n(async () =&gt; {\n\tfor await ( let value of range ) console.log(value);\n})()\n/*\n1\n2\n3\n4\n5\nPrints ever 1s\n*/\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>#<code>await</code>&amp; <code>async</code></p>\n<ul>\n<li>\n<p><code>async</code> a function always returns a promise.</p>\n<pre><code class=\"language-jsx\">async function f() {\n    return 1;\n}\n\nf().then(message =&gt; console.log(message));\n</code></pre>\n</li>\n<li>\n<p>It can also use with <code>class</code>.</p>\n<pre><code class=\"language-jsx\">class fuc {\n\tasync f() {\n\t\treturn await Promise.resolve(1);\n\t}\n}\n\nnew fuc()\n\t.f()\n\t.then(reslove =&gt; console.log(reslove));\n</code></pre>\n</li>\n<li>\n<p><code>await</code> makes JavaScript wait until that promise settles and returns its result.</p>\n<pre><code class=\"language-jsx\">async function f() {\n\n    let promise = new Promise((reslove, reject) =&gt; reslove(1));\n\n    let fun = await promise;\n\n    return fun;\n}\n\nf().then(reslove =&gt; console.log(reslove));\n// 1\n</code></pre>\n</li>\n<li>\n<p><code>await</code>can’t work without <code>async</code></p>\n<pre><code class=\"language-jsx\">function f() {\n  let promise = Promise.resolve(1);\n  let result = await promise; // Syntax error\n}\n</code></pre>\n</li>\n<li>\n<p>Error handling</p>\n<pre><code class=\"language-jsx\">async function f() {\n    let response = await fetch(&quot;https://it-is-error&quot;);\n}\n\nf().catch(console.log);\n</code></pre>\n</li>\n<li>\n<p>❓ <code>async/await</code>instad of <code>Promise</code></p>\n<pre><code class=\"language-jsx\">async function info(username, ...data_type) {\n\n    console.log(data_type);\n    let response = await fetch(`https://api.github.com/users/${username}`);\n    let user = await response.json();\n\n    if (data_type.includes(&quot;name&quot;)) console.log(`Name: ${user.name}`);\n    if (data_type.includes(&quot;repo&quot;)) console.log(`Repos: ${user.public_repos}`);\n    if (data_type.includes(&quot;url&quot;)) console.log(`URL: ${user.url}`);\n\n}\n</code></pre>\n</li>\n<li>\n<p>❓ Rewrite this example code from the chapter Promises chaining using async/await instead of .then/catch.</p>\n<pre><code class=\"language-jsx\">async function loadJson(url) {\n    let response = await fetch(url);\n    if ( response.status == 200 ) {\n        return response.json();\n    } else {\n        throw new Error(response.status);\n    }\n}\n\nloadJson('no-such-user.json')\n  .catch(alert);\n</code></pre>\n</li>\n<li>\n<p>❓ Rewrite “rethrow” with async/await</p>\n<pre><code class=\"language-jsx\">async function loadJson() {\n\n    let name = prompt(&quot;Enter a name?&quot;);\n\n    let response = await fetch(`https://api.github.com/users/${name}`);\n    let user = await response.json()\n\n    if (response.status == 404) {\n        alert(&quot;No such user, please reenter.&quot;);\n        return loadJson();\n    }\n\n    alert(`Full name: ${user.name}.`);\n    return user;\n}\n\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><code>throw</code>catches error.</p>\n<pre><code class=\"language-jsx\">new Promise((reslove, reject) =&gt; {\n\tthrow new SyntaxError(&quot;Nothing&quot;)\n})\n\t.catch(error =&gt; console.log(error.name));\n</code></pre>\n</li>\n<li>\n<p>#<code>try...catch</code></p>\n<ul>\n<li>\n<p><code>try...catch</code> that allows us to “catch” errors so the script can, instead of dying, do something more reasonable.</p>\n<pre><code class=\"language-jsx\">try {\n    console.log(&quot;run&quot;);\n    try {\n        NotDefine();\n    } catch (error) {\n        console.log(&quot;Error the function is not define.&quot;);\n    }\n} catch (err) {\n    console.log(&quot;I don't know why error is here.&quot;);\n}\n// run\n// Error the function is not define.\n\n</code></pre>\n</li>\n<li>\n<p><code>try...catch</code>expression can compare with <code>instaceOf</code>.</p>\n<pre><code class=\"language-jsx\">try {\n    NotDefine();\n} catch(err) {\n    if ( err instanceof ReferenceError ) {\n        console.log(err.name);\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>Show error message in <code>catch</code>.</p>\n<pre><code class=\"language-jsx\">try {\n\tNotAFunction();\n} catch (e) {\n\tconsole.log(`${e} \\n\\t is not a function`);\n}\n</code></pre>\n</li>\n<li>\n<p>#<code>try…catch…finally</code>finally will always run even there was no error.</p>\n<pre><code class=\"language-jsx\">function func() {\n\n  try {\n    if (confirm(&quot;Do you want error?&quot;)) error();\n    return &quot;No Error&quot;\n  } catch (err) {\n    return &quot;Error&quot;;\n  } finally {\n    console.log(&quot;Completed and Resual is:&quot;);\n  }\n}\n\nconsole.log( func() );\n\n// true\n/*\nCompleted and Resual is:\nError\n*/\n\n// false\n/*\nCompleted and Resual is:\nNo Error\n*/\n</code></pre>\n</li>\n<li>\n<p><code>try...finally</code>you can also run.</p>\n<pre><code class=\"language-jsx\">function func() {\n\n  try {\n    if (confirm(&quot;Do you want error?&quot;)) error();\n    return &quot;No Error&quot;\n  } finally {\n    console.log(&quot;Completed and Resual is:&quot;);\n  }\n}\n\n// true\n/*\nCompleted and Resual is:\n*/\n\n// false\n/*\nCompleted and Resual is:\nNo Error\n*/\n</code></pre>\n</li>\n<li>\n<p>Error object</p>\n<ul>\n<li>\n<p>Error <code>name</code>shows the name of the error.</p>\n<pre><code class=\"language-jsx\">try {\n\tNoAObject()\n} catch (e) {\n\tconsole.log(e.name);\n}\n// ReferenceError\n</code></pre>\n</li>\n<li>\n<p>Error <code>message</code>textual message about error details.</p>\n<pre><code class=\"language-jsx\">try {\n\tNotAObject();\n} catch (e) {\n\tconsole.log(e.message);\n}\n// NotAObject is not defined\n</code></pre>\n</li>\n<li>\n<p>Error <code>stack</code>: a string with information about the sequence of nested calls that led to the error. Used for debugging purposes.</p>\n<pre><code class=\"language-jsx\">try {\n\tNotAObject();\n} catch (e) {\n\tconsole.log(e.stack);\n}\n\n/*\n\tReferenceError: NotAObject is not defined\n\t    at &lt;anonymous&gt;:2:2\n*/\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Web APIs</h1>\n<h2>Fetch</h2>\n<ul>\n<li>\n<p><code>fetch</code>use web api in json.</p>\n<pre><code class=\"language-jsx\">let userName = prompt(&quot;What is your username?&quot;, &quot;aav&quot;);\n\nfetch(`https://api.github.com/users/${userName}`)\n    .then(github =&gt; github.json())\n    .then(github =&gt; console.log(github.public_repos));\n</code></pre>\n</li>\n</ul>\n<h2>GlobalEventHandlers</h2>\n<ul>\n<li>\n<p>The <code>onerror</code> property of the <code>GlobalEventHandlers</code> mixin is an <code>EventHandler</code> that processes error events.</p>\n<pre><code class=\"language-jsx\">&lt;script&gt;\n  window.onerror = function(message, url, line, col, error) {\n    alert(`${message}\\n At ${line}:${col} of ${url}`);\n  };\n\n  function readData() {\n    badFunc(); // Whoops, something went wrong!\n  }\n\n  readData();\n&lt;/script&gt;\n</code></pre>\n</li>\n</ul>\n<h2>Window Or WorkerGlobalScope</h2>\n<ul>\n<li>\n<p>❓ Write a function printNumbers(from, to) that outputs a number every second, starting from and ending with to. Using <code>setTimeout</code> &amp; <code>setInterval</code>.</p>\n<ul>\n<li><code>setTimeout</code></li>\n</ul>\n<pre><code class=\"language-jsx\">function printNumbers(from, to) {\n    setTimeout(function get() {\n        console.log(from++);\n        if(from &lt; to) setTimeout(get(), 1000);\n    }, 5000);\n}\n\nprintNumbers(1, 5);\n/*\n1\n2\n3\n4\n5\n*/\n</code></pre>\n<ul>\n<li><code>setInterval</code></li>\n</ul>\n<pre><code class=\"language-jsx\">function printNumbers(from, to) {\n    timeId = setInterval(() =&gt; {\n        console.log(from++);\n        if(from &gt; to) clearInterval(timeId);\n    }, 1000);\n}\n/*\n1\n2\n3\n4\n5\n*/\n</code></pre>\n</li>\n<li>\n<p>❓ Display Time Every 3 Second</p>\n<pre><code class=\"language-jsx\">function showTime() {\n\n    // return new date and time\n    let dateTime= new Date();\n\n    // returns the current local time\n    let time = dateTime.toLocaleTimeString();\n\n    console.log(time)\n\n    // display the time after 3 seconds\n     setTimeout(showTime, 3000);\n}\n\n// calling the function\nshowTime(); // Shows the output every 3 seconds\n</code></pre>\n</li>\n<li>\n<p>The #<code>setInterval()</code> method calls a function or evaluates an expression at specified intervals (in milliseconds).</p>\n<pre><code class=\"language-jsx\">// repeat with the interval of 2 seconds\nlet timerId = setInterval(() =&gt; alert('tick'), 2000);\n\n// after 5 seconds stop\nsetTimeout(() =&gt; { clearInterval(timerId); alert('stop'); }, 5000);\n</code></pre>\n</li>\n<li>\n<p><code>clearInterval()</code> clear the <code>setInterval()</code> execution.</p>\n<pre><code class=\"language-jsx\">// repeat with the interval of 2 seconds\nlet timerId = setInterval(() =&gt; alert('tick'), 2000);\n\n// after 5 seconds stop\nsetTimeout(() =&gt; { clearInterval(timerId); alert('stop'); }, 5000);\n</code></pre>\n</li>\n<li>\n<p>#<code>setTimeout</code> allows us to run a function once after the interval of time.</p>\n<ul>\n<li>\n<p>What will setTimeout show?</p>\n<pre><code class=\"language-jsx\">let i = 0;\n\nsetTimeout(() =&gt; alert(i), 100); // ?\n\n// assume that the time to execute this function is &gt;100ms\nfor(let j = 0; j &lt; 100000000; j++) {\n  i++;\n}\n</code></pre>\n<p>▶️ Answer</p>\n<pre><code class=\"language-jsx\">let i = 0;\n\nsetTimeout(() =&gt; alert(i), 100); // 100000000\n\n// assume that the time to execute this function is &gt;100ms\nfor(let j = 0; j &lt; 100000000; j++) {\n  i++;\n}\n</code></pre>\n</li>\n<li>\n<p><code>setTimeout()</code> don’t work with <code>this</code></p>\n<pre><code class=\"language-jsx\">let user = {\n  firstName: &quot;John&quot;,\n  sayHi() {\n    alert(`Hello, ${this.firstName}!`);\n  }\n};\n\nsetTimeout(user.sayHi, 1000); // Hello, undefined!\n</code></pre>\n<ul>\n<li>Solution</li>\n</ul>\n<pre><code class=\"language-jsx\">let user = {\n  firstName: &quot;John&quot;,\n  sayHi() {\n    alert(`Hello, ${this.firstName}!`);\n  }\n};\n\nsetTimeout(function() {\n  user.sayHi(); // Hello, John!\n}, 1000);\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><code>clearTimeout()</code> clears the <code>setTimout()</code> execution.</p>\n<pre><code class=\"language-jsx\">for (let run = 1; run &lt; 5; run++) {\n    if (run &lt; 3 ) {\n        const runTime = setTimeout(() =&gt; {\n            console.log(`Running ${run}`);\n        }, 10);\n    } else {\n        clearTimeout(runTime);\n    }\n}\n\n// Running 1\n// Running 2\n</code></pre>\n</li>\n<li>\n<p><code>setImmediate()</code> will always execute before setTimeout and setImmediate. It is same as <code>setTimeout(callback,0)</code>.</p>\n<pre><code class=\"language-jsx\">eEmitter.on(&quot;event1&quot;, (a, b) =&gt; {\n  setImmediate(() =&gt; {\n    console.log(`${a} ${b}`);\n  });\n});\neEmitter.on(&quot;event2&quot;, (a, b) =&gt; {\n  console.log(`${a} ${b}`);\n});\n\nfor (let x = 0; x &lt; 4; x++) {\n  eEmitter.emit(&quot;event1&quot;, x, &quot;b1&quot;);\n  eEmitter.emit(&quot;event2&quot;, x, &quot;b2&quot;);\n}\n\n// 0 b2\n// 1 b2\n// 2 b2\n// 3 b2\n// 0 b1\n// 1 b1\n// 2 b1\n// 3 b1\n</code></pre>\n</li>\n</ul>\n<h2>Console</h2>\n<ul>\n<li>\n<p>The <code>console.dir()</code> displays an interactive list of the properties of the specified JavaScript object.</p>\n<pre><code class=\"language-jsx\">console.dir(Number);\n/*\nƒ Number()\n\tEPSILON:\n\t2.220446049250313\n\te-16\n\tMAX_SAFE_INTEGER: 9007199254740991\n\tMAX_VALUE:\n\t1.7976931348623157\n\te+308\n\tMIN_SAFE_INTEGER: -9007199254740991\n\tMIN_VALUE:\n\t5\n\te-324\n\tNEGATIVE_INFINITY: -Infinity\n\tNaN: NaN\n\tPOSITIVE_INFINITY: Infinity\n\targuments: (...)\n\tcaller: (...)\n\tisFinite: ƒ isFinite()\n\tisInteger: ƒ isInteger()\n\tisNaN: ƒ isNaN()\n\tisSafeInteger: ƒ isSafeInteger()\n\tlength: 1\n\tname: &quot;Number&quot;\n\tparseFloat: ƒ parseFloat()\n\tparseInt: ƒ parseInt()\n\tprototype: Number {0, constructor: ƒ, toExponential: ƒ, toFixed: ƒ, toPrecision: ƒ, …}\n\t__proto__: ƒ ()\n\t[[Scopes]]: Scopes[0]\n*/\n</code></pre>\n</li>\n<li>\n<p>The <code>console.log()</code>shows the output in console.</p>\n<pre><code class=\"language-jsx\">cosnole.log(&quot;Hello World&quot;);\n// Hello World\n</code></pre>\n</li>\n<li>\n<p>The <code>console.log()</code> shows object in table.</p>\n<pre><code class=\"language-jsx\">console.table({\n  aman: {\n    age: 18,\n    location: &quot;Mumbai&quot;,\n    country: &quot;India&quot;,\n  },\n  shile: {\n    age: 15,\n    location: &quot;punjab&quot;,\n    country: &quot;India&quot;,\n    dateOfYear: 2015,\n  },\n});\n// ┌─────────┬─────┬──────────┬─────────┬────────────┐\n// │ (index) │ age │ location │ country │ dateOfYear │\n// ├─────────┼─────┼──────────┼─────────┼────────────┤\n// │  aman   │ 18  │ 'Mumbai' │ 'India' │            │\n// │  shile  │ 15  │ 'punjab' │ 'India' │    2015    │\n// └─────────┴─────┴──────────┴─────────┴────────────┘\n</code></pre>\n</li>\n<li>\n<p>The <code>console.clear()</code> clears the output in the console.</p>\n<pre><code class=\"language-jsx\">console.log(&quot;Hello World&quot;);\nconsole.clear();\nconsole.log(&quot;Bye World&quot;);\n\n// Bye World\n</code></pre>\n</li>\n</ul>",
      "date_published": "2022-12-20T20:07:22.703Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=JS&description=The%20JavaScript%20language%20Standard%20built-in%20objects%20Proxy%20%20%20The%20new%20Proxy%20object%20enables%20you%20to%20create%20a%20proxy%20for%20another%20object,%20which%20can%20intercept%20and%20redefine%20fundamental%20operations%20for%20that%20object.%20let%20numbers%20=%20{%20%20%20%20%20'Hello':%20'Hi',%20%20%20%20%20'YoYo':%20'Yo',%20%20%20%20%20'Going':%20'Go'%20}%20%20let%20&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/php/pratical-sem6.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/php/pratical-sem6.html",
      "title": "Pratical Sem6",
      "content_html": "<h2>1. Write a PHP program using expressions and operator (ternary operator, arithmetic operators and comparison operators)</h2>\n<pre><code class=\"language-php\">&lt;?php\n  echo 1 &gt; 2 ? 1 : 2;\n  echo &quot;&lt;br&gt;&quot;;\n  echo 1 + 2;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>2\n3\n</code></pre>\n<h2>2. Write a PHP program to the use of decision making and control structures using:</h2>\n<h3><code>if</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$x = 1;\nif ($x &gt; 0) {\n  echo &quot;The number is positive&quot;;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>The number is positive\n</code></pre>\n<h3><code>if else</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$x = &quot;August&quot;;\n\nif ($x &gt; 0) {\n  echo &quot;The number is positive&quot;;\n} else {\n  echo &quot;The number is negative&quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Happy Independence Day!!!\n</code></pre>\n<h3><code>if elseif if</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$x = &quot;August&quot;;\n\nif ($x &gt; 0) {\n  echo &quot;The number is positive&quot;;\n} elseif ( $x &lt; 0 ) {\n  echo &quot;The number is negative&quot;;\n} else {\n  echo &quot;The value is not number&quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>The number is positive\n</code></pre>\n<h3><code>switch case</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$n = &quot;Monday&quot;;\n\nswitch($n) {\n  case &quot;Monday&quot;:\n    echo &quot;Its Monday&quot;;\n    break;\n  case &quot;Tuesday&quot;:\n    echo &quot;Its Tuesday&quot;;\n    break;\n  case &quot;Wednesday&quot;:\n    echo &quot;Its Wednesday&quot;;\n    break;\n  case &quot;Thuesday&quot;:\n    echo &quot;Its Thuesday&quot;;\n    break;\n  case &quot;Friday&quot;:\n    echo &quot;Its Friday&quot;;\n    break;\n  case &quot;Saturday&quot;:\n    echo &quot;Its Saturday&quot;;\n    break;\n  case &quot;Sunday&quot;:\n    echo &quot;Its Suday&quot;;\n    break;\n  default:\n    echo &quot;Doesn't exist&quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Its Monday\n</code></pre>\n<h2>3. Write a PHP program to the use of looping structure using:</h2>\n<h3><code>while</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$num = 0;\n\nwhile ($num &lt;= 10) {\n  echo $num;\n  $num++;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>012345678910\n</code></pre>\n<h3><code>do while</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$x = 1;\ndo {\n  echo $x;\n  $x++;\n} while ($x &lt;= 5);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>12345\n</code></pre>\n<h3><code>for</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\nfor ($i = 1; $i &lt;= 10; $i++) {\n  echo $i;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>12345678910\n</code></pre>\n<h2>4. Write a PHP program to the use of looping structure using for statement, for each statement.</h2>\n<h3><code>for</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\nfor ($x = 0; $x &lt;= 5; $x++) {\n  echo $x;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>012345\n</code></pre>\n<h3><code>foreach</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(&quot;Hello&quot;, &quot;World&quot;);\n\nforeach ($a as $b) {\n  echo $b.&quot; &quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>5. Write a PHP program for creating and manipulating , associative array and multidimensional array.</h2>\n<h3>Indexed array</h3>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;);\necho &quot;My fav color is: &quot;.$a[0];\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>My fav color is: Red\n</code></pre>\n<h3>Associative arrays</h3>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(&quot;Red&quot;=&gt;1, &quot;Blue&quot;=&gt;2, &quot;Green&quot;=&gt;3);\necho $a[&quot;Red&quot;].$a[&quot;Blue&quot;],$a[&quot;Green&quot;];\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>123\n</code></pre>\n<h3>Multidimensional array</h3>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(array(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;));\necho &quot;My fav color is: &quot;.$a[0][1];\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>My fav color is: Blue\n</code></pre>\n<h2>6. Write a PHP program to calculate</h2>\n<h3>Length of string</h3>\n<pre><code class=\"language-php\">&lt;?php\n  echo strlen(&quot;Hello world!&quot;);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>12\n</code></pre>\n<h3>Count the no of words in string</h3>\n<pre><code class=\"language-php\">&lt;?php\n  echo str_word_count(&quot;Hello world!&quot;);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>2\n</code></pre>\n<h3>Compare two string using string function.</h3>\n<pre><code class=\"language-php\">&lt;?php\n  echo strcmp(&quot;Hello world!&quot;, &quot;Hello world&quot;);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>0\n</code></pre>\n<h2>7. Write a PHP program using following string function:</h2>\n<ul>\n<li>strrev()</li>\n<li>strpos()</li>\n<li>strrpos()</li>\n<li>str_replace()</li>\n<li>ucwords()</li>\n<li>strtoupper()</li>\n<li>strtolower()</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n  echo strrev(&quot;Hello world!&quot;).&quot;&lt;/br&gt;&quot;;\n  echo strpos(&quot;Hello world!&quot;, &quot;world&quot;).&quot;&lt;/br&gt;&quot;;\n  echo strrpos(&quot;I love php, I love php too!&quot;,&quot;php&quot;).&quot;&lt;/br&gt;&quot;;\n  echo str_replace(&quot;world&quot;, &quot;bvit&quot;, &quot;Hello world!&quot;).&quot;&lt;/br&gt;&quot;;\n  echo ucwords(&quot;Welcome to php world&quot;).&quot;&lt;/br&gt;&quot;;\n  echo strtoupper(&quot;Information Technology&quot;).&quot;&lt;/br&gt;&quot;;\n  echo strtolower(&quot;INFORMATION TECHNOLOGY&quot;).&quot;&lt;/br&gt;&quot;;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>!dlrow olleH\n6\n19\nHello bvit!\nWelcome To Php World\nINFORMATION TECHNOLOGY\ninformation technology\n</code></pre>\n<h2>8. Write a PHP program to use: and anonymous function.</h2>\n<h3>User define function</h3>\n<pre><code class=\"language-php\">&lt;?php\n  function writeMessage() {\n    echo &quot;Welcome to PHP world&quot;;\n  }\n  writeMessage();\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Welcome to PHP world\n</code></pre>\n<h3>Variable function</h3>\n<pre><code class=\"language-php\">&lt;?php\n  function writeMessage() {\n    echo &quot;Welcome to PHP world&quot;;\n  }\n\n  $w = &quot;writeMessage&quot;;\n  $w();\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Welcome to PHP world\n</code></pre>\n<h3>Anonymous function</h3>\n<pre><code class=\"language-php\">&lt;?php\n  $a=function() { echo &quot;Anonymous function&quot;; };\n  $a();\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Anonymous function\n</code></pre>\n<h2>9. Write a PHP program to create PDF document by using graphics concept.</h2>\n<pre><code class=\"language-php\">&lt;?php\n  require('fpdf.php');\n  $pdf = new FPDF();\n  $pdf-&gt;AddPage();\n  $pdf-&gt;SetFont('Arial','B',16);\n  $pdf-&gt;Cell(40,10,'Hello World!');\n  $pdf-&gt;Output();\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>10. Write a PHP program</h2>\n<h3>a) To inherit member of superclass in subclass</h3>\n<pre><code class=\"language-php\">&lt;?php\nclass Class1 {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Class2 extends Class1 {\n  function echo() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$o = new Class2;\n$o-&gt;func();\n$o-&gt;echo();\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\nBye World\n</code></pre>\n<h3>b) Create constructor to initialize object of class by using object oriented concept.</h3>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  public function __construct($name, $surname) {\n    $this-&gt;name=$name;\n    $this-&gt;surname=$surname;\n  }\n  public function showName() {\n    echo &quot;My name is &quot;.$this-&gt;name.&quot; &quot;.$this-&gt;surname;\n  }\n}\n\n$sid=new Obj(&quot;Aman&quot;,&quot;Varma&quot;);\n$sid-&gt;showName();\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>My name is Aman Varma\n</code></pre>\n<h2>11. Write a PHP program on</h2>\n<h3>Introspection</h3>\n<pre><code class=\"language-php\">&lt;?php\nif (!class_exists(&quot;Obj&quot;)) {\n  echo &quot;Class don't exists.&quot;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Class don't exists\n</code></pre>\n<h3>Serialization.</h3>\n<pre><code class=\"language-php\">&lt;?php\necho serialize(array(&quot;Red&quot;));\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>a:1:{i:0;s:3:&quot;Red&quot;;}\n</code></pre>\n<h2>12. Design a web page using following form controls:</h2>\n<ul>\n<li>a) Textbox</li>\n<li>b) Radio button</li>\n<li>c) Check box</li>\n<li>d) Button</li>\n</ul>\n<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php 1_SELF_PHP ?&gt;&quot; method=&quot;post&quot;&gt;\n  Name:\n  &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n  Sex:\n  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;Male&lt;/input&gt;\n  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;Female&lt;/input&gt;\n  Vehical:\n  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;bike&quot;&gt;Bike&lt;/input&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;car&quot;&gt;Car&lt;/input&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;scooter&quot;&gt;Scooter&lt;/input&gt;\n  &lt;button name=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ( isset($_POST[&quot;submit&quot;]) ) {\n  echo $_POST[&quot;name&quot;].&quot; is &quot;.$_POST[&quot;sex&quot;].&quot; will travel by &quot;;\n  foreach ($_POST[&quot;vehicle&quot;] as $selected) {\n    echo $selected.&quot; &quot;;\n  }\n}\n?&gt;\n</code></pre>\n<h2>13. Design a web page using following form controls:</h2>\n<ul>\n<li>a) List box</li>\n<li>b) Hidden field box</li>\n</ul>\n<pre><code class=\"language-php\">&lt;form action=&quot;&lt;? $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n  &lt;input type=&quot;hidden&quot; name=&quot;name&quot; value=&quot;Jone&quot;&gt;\n  &lt;select name=&quot;foods&quot;&gt;\n    &lt;option value=&quot;Tomatoes&quot;&gt;Tomatoes&lt;/option&gt;\n    &lt;option value=&quot;Cucumbers&quot;&gt;Cucumbers&lt;/option&gt;\n    &lt;option value=&quot;Celery&quot;&gt;Celery&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;br&gt;\n  &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot;/&gt;\n&lt;/form&gt;\n\n&lt;?php\n  if( isset($_POST[&quot;foods&quot;]) ) {\n    echo $_POST[&quot;name&quot;].&quot; have chosen &quot;.$_POST[&quot;foods&quot;];\n  }\n?&gt;\n</code></pre>\n<h2>14. Develop a web page with data validation.</h2>\n<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n  Name:&lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;\n  &lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\n  if (!preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;])) {\n    echo &quot;Only letter and whitespace is allowed&quot;;\n  }\n?&gt;\n</code></pre>\n<h2>15. Write a PHP program to:</h2>\n<h3>Create cookies</h3>\n<pre><code class=\"language-php\">&lt;?php\nsetcookie(&quot;name&quot;, &quot;Jone&quot;, time() + (86400 * 30), &quot;/&quot;);\n?&gt;\n&lt;?php\nif (isset($_COOKIE[&quot;name&quot;])) {\n  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Name: Jone\n</code></pre>\n<ul>\n<li>\n<p>Modify cookies value\nSet cookie agien with setcookie function.</p>\n</li>\n<li>\n<p>Delete cookies</p>\n</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nsetcookie(&quot;name&quot;, &quot;&quot;, time() - 3600, &quot;/&quot;);\n?&gt;\n&lt;?php\nif (isset($_COOKIE[&quot;name&quot;])) {\n  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];\n} else {\n  echo &quot;Cookie is not set.&quot;;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Cookie is not set.\n</code></pre>\n<h2>16. Write a PHP program to:</h2>\n<ul>\n<li>Start session</li>\n<li>Get session variable</li>\n<li>Destroy session</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n  session_start();\n\n  $_SESSION[&quot;color&quot;] = &quot;Red&quot;;\n  $_SESSION[&quot;animal&quot;] = &quot;Lion&quot;;\n\n  echo $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];\n\n  session_unset();\n  session_destroy();\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Red Lion\n</code></pre>\n<h2>17. Write a PHP program for sending and receiving plain text message (sending email).</h2>\n<pre><code class=\"language-php\">&lt;?php\n  $status = mail(&quot;AnzenKodo@altmail.com&quot;, &quot;Title&quot;, &quot;Hello World&quot;);\n  if ($status) {\n    echo &quot;Mail is sent.&quot;;\n  } else {\n    echo &quot;Mail can't be sent&quot;;\n  }\n?&gt;\n</code></pre>\n<h2>18. Write a PHP program to</h2>\n<h3>Create database</h3>\n<pre><code class=\"language-php\">&lt;?php\n// Create connection\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\n// Check connection\nif ($conn-&gt;connect_error) {\n  die(&quot;Connection failed.&quot;);\n}\n\n// Create database\n$sql = &quot;CREATE DATABASE myDB&quot;;\nif (mysqli_query($conn, $sql)) {\n  echo &quot;Database created successfully&quot;;\n} else {\n  echo &quot;Error creating database&quot;;\n}\n\nmysqli_close($conn);\n?&gt;\n</code></pre>\n<h3>Creation of table.</h3>\n<pre><code class=\"language-php\">&lt;?php\n// Create connection\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\n// Check connection\nif (!$conn) {\n  die(&quot;Connection failed&quot;);\n}\n\n// sql to create table\n$sql = &quot;CREATE TABLE MyGuests(id INT(6))&quot;;\n\nif (mysqli_query($conn, $sql)) {\n  echo &quot;Table MyGuests created successfully&quot;;\n} else {\n  echo &quot;Error creating table: &quot; . $conn-&gt;error;\n}\n\n$conn-&gt;close();\n?&gt;\n</code></pre>\n<h2>19. Write a PHP program to Inserting and retrieving the query result operations and Update ,Delete operations on table data.</h2>\n<pre><code class=\"language-php\">&lt;?php\n// Connecting to MySQL\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n  die(&quot;Error: &quot;.mysqli_error($conn));\n}\n\n// Inserting data\n$sql = &quot;INSERT INTO my_table(id, name) VALUES (1, 'Jone'), (2, 'Jonney)&quot;;\nif (!mysqli_query($conn, $sql)) {\n  die(&quot;Error&quot;);\n}\n\n// Retrieving data\n$sql = &quot;SELECT * FROM my_table&quot;;\nif ($result = mysqli_query($conn, $sql)) {\n  if (mysqli_num_rows($result) &gt; 0) {\n    while ($row = mysqli_fetch_array($result)) {\n      echo &quot;ID: &quot;.$row[&quot;id&quot;].&quot;, Name: &quot;.$row[&quot;name&quot;];\n    }\n  } else {\n    echo &quot;Rows can't be zero&quot;;\n  }\n} else {\n  die(&quot;Error: &quot;.mysqli_error($conn));\n}\n\n// Update data\n$sql = &quot;UPDATE my_table SET name='tim' WHERE id=2&quot;;\nif (!mysqli_query($conn, $sql) {\n  die(&quot;Error&quot;);\n}\n\n// Delete data\n$sql = &quot;DELETE FROM my_table WHERE id=1&quot;;\nif (!mysqli_query($conn, $sql) {\n  die(&quot;Error&quot;));\n}\n\nmysqli_close();\n?&gt;\n</code></pre>",
      "date_published": "2022-12-20T20:07:22.703Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=Pratical Sem6&description=1.%20Write%20a%20PHP%20program%20using%20expressions%20and%20operator%20(ternary%20operator,%20arithmetic%20operators%20and%20comparison%20operators)%20&lt;?php%20%20%20echo%201%20&gt;%202%20?%201%20:%202;%20%20%20echo%20&quot;&lt;br&gt;&quot;;%20%20%20echo%201%20+%202;%20?&gt;%20%20O/P%202%203%20%202.%20Write%20a%20PHP%20program%20to%20the%20use%20of%20decision%20making%20and%20control%20&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/php/final.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/php/final.html",
      "title": "Final",
      "content_html": "<h1>PHP</h1>\n<h2>Attempt any FIVE :</h2>\n<h3>(a) Describe advantage of PHP.</h3>\n<ul>\n<li><strong>Web Application Features</strong> - PHP is a programming language support most\ncommonly used Web application features like HTTP Cookie, Session, File\nUpload, etc.</li>\n<li><strong>CLI (Command Line Interface)</strong> - PHP is commonly used to write Web\napplications to be integrated to Web servers using the Common Gateway\nInterface (CGI).</li>\n<li><strong>Built-in Modules</strong> - The standard PHP build comes with many free and open\nsource libraries included as built-in modules.</li>\n<li><strong>Object-Oriented Programming (OOP)</strong> - PHP supports object-oriented\nprogramming features like object.</li>\n<li><strong>Pre-Compilation</strong> - PHP Web applications are usually deployed in source\ncode, which will be interpreted on-the-fly when Web requests arrive to the\nserver.</li>\n<li><strong>Real Time Access Monitoring</strong> - PHP provides access logging by creating the\nsummary of recent accesses for the user.</li>\n<li><strong>File I/O</strong> - PHP supports most commonly used file I/O features like local\nfile and path management, remote resource access using Internet protocols\nlike HTTP and FTP.</li>\n</ul>\n<h3>(b) What is array ? How to store data in array ?</h3>\n<ul>\n<li>An array is a special variable, which can hold more than one value at a time.</li>\n<li>To create array we use <code>array()</code> function.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$array = array(&quot;Hello&quot;, &quot;World&quot;);\nprint_r($array);\n</code></pre>\n<p>O/P</p>\n<pre><code>Array ( [0] =&gt; &quot;Hello&quot;, [1] =&gt; &quot;World&quot; )\n</code></pre>\n<h3>© List types of inheritance.</h3>\n<ul>\n<li>Single</li>\n<li>Multiple</li>\n<li>Multilevel Inheritance.</li>\n</ul>\n<h3>(d) How can we destroy cookies ?</h3>\n<ul>\n<li>To delete cookie, we can use <code>setcookie</code> function with expiration date in</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nsetcookie(&quot;name&quot;, &quot;&quot;, time() - 3600, &quot;/&quot;);\n?&gt;\n</code></pre>\n<h3>(e) List any four data types in MySQL.</h3>\n<ul>\n<li>int</li>\n<li>float</li>\n<li>char</li>\n<li>json</li>\n<li>boolean</li>\n<li>xml</li>\n</ul>\n<h3>(f) Write syntax of PHP.</h3>\n<pre><code class=\"language-php\">&lt;?php\n$hello = &quot;Hello World&quot;;\n?&gt;\n</code></pre>\n<h3>(g) How to create session variable in PHP ?</h3>\n<p>A session is a way to store information in variables to be used across multiple pages.</p>\n<pre><code class=\"language-php\">&lt;?php\nsession_start();\n\n$_SESSION[&quot;color&quot;] = &quot;Red&quot;;\n$_SESSION[&quot;animal&quot;] = &quot;Cat&quot;;\necho $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];\n?&gt;\n</code></pre>\n<h2>2. Attempt any THREE :</h2>\n<h3>(a) Write down rules for declaring PHP variable.</h3>\n<ul>\n<li>A variable starts with the $ sign, followed by the name of the variable.</li>\n<li>A variable name must start with a letter or the underscore character.</li>\n<li>A variable name cannot start with a number.</li>\n</ul>\n<h3>(b) Write a program to create associative array in PHP.</h3>\n<p>Associative arrays are arrays that use named keys that you assign to them.</p>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(&quot;Red&quot;=&gt;1, &quot;Blue&quot;=&gt;2, &quot;Green&quot;=&gt;3);\necho $a[&quot;Red&quot;].$a[&quot;Blue&quot;],$a[&quot;Green&quot;];\n</code></pre>\n<p>O/P</p>\n<pre><code>123\n</code></pre>\n<h3>© Define Introspection and explain it with suitable example.</h3>\n<ul>\n<li>PHP Introspection is the ability of a program to examine an object’s\ncharacteristics such as its name, parent class (if any), properties and\nmethods.</li>\n<li>Introspection in PHP offers a useful Ability to examine classes’ interfaces\nproperties methods. With introspection we can write code that operates on any\nobject or class.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {}\n\nclass Obj2 extends Obj {\n  public $hello = &quot;world&quot;;\n  function func() {}\n}\n$o = new Obj2;\n\nif (class_exists('Obj2')) {\n  echo &quot;Class exists&quot;;\n}\nif (is_object($o)) {\n  echo &quot;Is object&quot;;\n}\n\nprint_r(get_class($o));\nprint_r(get_class_methods($o));\nprint_r(get_class_vars('Obj'));\nprint_r(get_parent_class($o));\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>class exists\nIs object\nObj2\nArray ( [0] =&gt; func )\nArray ( [hello] =&gt; world )\nObj\n</code></pre>\n<h3>(d) Write difference between get( ) &amp; post( ) method of form (Any four points).</h3>\n<h4>GET</h4>\n<ul>\n<li>It sends the encoded user information appended to the page request (to the URL).</li>\n<li>The page and the encoded information are separated by the ? character.</li>\n<li>The GET method produces a long string the appears in our server logs, in the browser’ location box.</li>\n<li>The GET method is restricted to send up to 1024 characters only.</li>\n<li>Never use GET method if we have password or other sensitive information.</li>\n<li>GET cannot be used to send binary data to the server.</li>\n<li>The php provides $_GET assoiative array to a access all the sent information using GET method.</li>\n</ul>\n<h4>POST</h4>\n<ul>\n<li>It transfers information via HTTP header, not throought the URL.</li>\n<li>The POST method does not have any restriction on data size.</li>\n<li>The POST method can be used to send ASCII as well as binary data.</li>\n<li>The data sent by POST  method goes through HTTP header, so security depends on HTTP protocol.</li>\n<li>By using secure HTTP, we can make sure that our information is secure.</li>\n<li>The PHP provides $_POST associative array to access all the sent information using POST method.</li>\n</ul>\n<h2>3. Attempt any THREE :</h2>\n<h3>(a) Define function. How to define user defined function in PHP ? Give example.</h3>\n<p>A function is a block of statements that can be used repeatedly in a program.</p>\n<pre><code class=\"language-php\">&lt;?php\nfunction func() {\n  echo &quot;Hello World&quot;;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h3>(b) Explain method overloading with example.</h3>\n<p>If the derived class is having the same method name as the base class then the method in the derived class takes precedence over or overrides the base class method.</p>\n<pre><code class=\"language-php\">&lt;?php\nclass First {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Second extends First {\n  function func() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$o = new Second;\n$o-&gt;func();\n</code></pre>\n<h3>© Define session &amp; cookie. Explain use of session start.</h3>\n<h4>What is cookie?</h4>\n<ul>\n<li>Cookie save the data in browser, so next time refresh the browser it will not\ndelete from browser.</li>\n<li>Cookie is used to identify the user.</li>\n<li>A cookie is a small file that server embeds to user’s computer.</li>\n<li>Each time the same computer requests a page with a browser, it will send the\ncookie too.</li>\n</ul>\n<h4>How to create it?</h4>\n<ul>\n<li>Use <code>setcookie</code> function to create cookie.</li>\n<li>Syntex:<pre><code>setcookie($cookie_name, $cookie_value, $time, $location)\n</code></pre>\n</li>\n</ul>\n<h4>Example</h4>\n<pre><code class=\"language-php\">&lt;?php\nsetcookie(&quot;name&quot;, &quot;Jonney&quot;, time() + (86400 * 30), &quot;/&quot;);\nif (isset($_COOKIE[&quot;name&quot;])) {\n  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Name: Jonney\n</code></pre>\n<h4>Session</h4>\n<ul>\n<li>A session is a way to store information in variables to be used across\nmultiple pages.</li>\n<li>Sessions allow us to store data on the web server that associated with a\nsession ID.</li>\n<li>Once we create a session, PHP sends a cookie that contains the session ID to\nthe web browser.</li>\n<li>A session is started with the session_start() function.</li>\n<li>The session_start() function first checks if a session is already started and\nif none is started then it starts one.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nsession_start()\n?&gt;\n&lt;?php\n$_SESSION[&quot;name&quot;] = &quot;Jonney&quot;;\necho &quot;Name: &quot;.$_SESSION[&quot;name&quot;];\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Name: Jonney\n</code></pre>\n<h3>(d) Explain delete operation of PHP on table data.</h3>\n<ul>\n<li>We can create a MySQL database by using MySQL Command Line Client.</li>\n<li>Open the MySQL console and write down password, if we set one while\ninstallation.</li>\n<li>We will get the following:\n<ul>\n<li>To create the data base enter <code>CREATE DATABASE database_name</code></li>\n<li>To check the database is crated enter <code>SHOW DATABASES</code></li>\n</ul>\n</li>\n<li>Creating database through php:<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\n\nif (!$conn) {\n  die(&quot;Can't connect to MySQL &quot;);\n}\n\n$sql = &quot;CRATE DATABASE emp&quot;;\n\nif (!mysqli_query($conn, $sql)) {\n  die(&quot;Can't create database &quot;.mysqli_error($conn);\n}\n\necho &quot;Created database &lt;br/&gt;&quot;;\n?&gt;\n</code></pre>\nO/P<pre><code>Created database\n</code></pre>\n</li>\n</ul>\n<h2>4. Attempt any THREE :</h2>\n<h3>(a) Write PHP script to sort any five numbers using array function.</h3>\n<pre><code class=\"language-php\">&lt;?php\n$cars = array(&quot;Volvo&quot;, &quot;BMW&quot;, &quot;Toyota&quot;);\nsort($cars);\n?&gt;\n</code></pre>\n<p>Output:</p>\n<pre><code>BMW\nToyota\nVolvo\n</code></pre>\n<h3>(b) Write PHP program for cloning of an object.</h3>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  public $name;\n}\n\n$o = new Obj;\n$c = clone $o;\n\n$o-&gt;name = &quot;Jonney&quot;;\n$c-&gt;name = &quot;Jone&quot;;\n\necho &quot;Origenal: &quot;.$o-&gt;name.&quot;, Clone: &quot;.$c-&gt;name;\n?&gt;\n</code></pre>\n<p>Output:</p>\n<pre><code>Origenal: Jonney, Clone: JOne\n</code></pre>\n<h3>© Create customer form like customer name, address, mobile no, date of birth using different form of input elements &amp; display user inserted values in new PHP form.</h3>\n<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php 1_SELF_PHP ?&gt;&quot; method=&quot;post&quot;&gt;\n  Name:\n  &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n  Sex:\n  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;Male&lt;/input&gt;\n  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;Female&lt;/input&gt;\n  Vehical:\n  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;bike&quot;&gt;Bike&lt;/input&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;car&quot;&gt;Car&lt;/input&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;scooter&quot;&gt;Scooter&lt;/input&gt;\n  &lt;button name=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ( isset($_POST[&quot;submit&quot;]) ) {\n  echo $_POST[&quot;name&quot;].&quot; is &quot;.$_POST[&quot;sex&quot;].&quot; will travel by &quot;;\n  foreach ($_POST[&quot;vehicle&quot;] as $selected) {\n    echo $selected.&quot; &quot;;\n  }\n}\n?&gt;\n</code></pre>\n<h3>(d) Inserting and retrieving the query result operations.</h3>\n<pre><code class=\"language-php\">&lt;?php\n$server= &quot;localhost&quot;;\n$user = &quot;root&quot;;\n$password = &quot;&quot;;\n$db = &quot;feedback&quot;;\n// Create connection\n$conn = new mysqli($server, $user, $password, $db);\n// Check connection\nif ($conn-&gt;connect_error)\n{\ndie(&quot;Connection failed: &quot; . $conn-&gt;connect_error);\n}\n$sql = INSERT INTO data VALUES('ashok','you are awesome bro');\n[if](if) ($conn-&gt;query($sql) === TRUE)\n{\necho &quot;feedback sucessfully submitted&quot;;\n}\nelse\n{\necho &quot;Error: &quot; . $sql . &quot;&lt;br&gt;&quot; . $conn-&gt;error;\n}\n$conn-&gt;close();\n?&gt;\n</code></pre>\n<h3>(e) How do you validate user inputs in PHP ?</h3>\n<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n  Name:&lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;\n  &lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\n  if (!preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;])) {\n    echo &quot;Only letter and whitespace is allowed&quot;;\n  }\n?&gt;\n</code></pre>\n<h2>5. Attempt any TWO :</h2>\n<h3>(a) Explain different loops in PHP with example.</h3>\n<h4><code>while</code> statement</h4>\n<pre><code class=\"language-php\">&lt;?php\n$num = 0;\n\nwhile ($num &lt;= 10) {\n  echo $num;\n  $num++;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>012345678910\n</code></pre>\n<h4><code>do while</code> statement</h4>\n<pre><code class=\"language-php\">&lt;?php\n$x = 1;\n\ndo {\n  echo &quot;The number is: $x &lt;br&gt;&quot;;\n  $x++;\n} while ($x &lt;= 5);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>The number is: 1\nThe number is: 2\nThe number is: 3\nThe number is: 4\nThe number is: 5\n</code></pre>\n<h4><code>for</code> loop</h4>\n<pre><code class=\"language-php\">&lt;?php\nfor ($i = 1; $i &lt;= 10; $i++) {\n  echo $i.&quot; &quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>1 2 3 4 5 6 7 8 9 10\n</code></pre>\n<h3>(b) How do you connect MySQL database with PHP.</h3>\n<pre><code class=\"language-php\">&lt;?php\n  // Creating connection\n  $conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\n\n  // Checking connection\n  if (!$conn) {\n      die(&quot;Connection failed.&quot;);\n  }\n  echo &quot;Connected successfully&quot;;\n?&gt;\n</code></pre>\n<h3>© Create a class as “Percentage” with two properties length &amp; width. Calculate area of rectangle for two objects.</h3>\n<pre><code class=\"language-php\">&lt;?php\nclass Rectangle {\n  public $width = 0;\n  public $height = 0;\n\n  function setSize($w = 0, $h = 0) {\n    $this-&gt;width = $w;\n    $this-&gt;height = $h;\n  }\n\n  function getArea() {\n    return ($this-&gt;width * $this-&gt;height);\n  }\n\n  function getPerimeter() {\n    return ( ($this-&gt;width + $this-&gt;height) * 2 );\n  }\n\n  function isSquare() {\n    if ($this-&gt;width == $this-&gt;height) {\n       return true;\n     } else {\n        return false;\n     }\n  }\n\n}\n</code></pre>\n<h2>6. Attempt any TWO :</h2>\n<h3>(a) Write a PHP program to demonstrate use of cookies.</h3>\n<ul>\n<li>Cookie save the data in browser, so next time refresh the browser it will not\ndelete from browser.</li>\n<li>Cookie is used to identify the user.</li>\n<li>A cookie is a small file that server embeds to user’s computer.</li>\n<li>Each time the same computer requests a page with a browser, it will send the\ncookie too.</li>\n</ul>\n<h4>How to create it?</h4>\n<ul>\n<li>Use <code>setcookie</code> function to create cookie.</li>\n<li>Syntex:<pre><code>setcookie($cookie_name, $cookie_value, $time, $location)\n</code></pre>\n</li>\n</ul>\n<h4>Example</h4>\n<pre><code class=\"language-php\">&lt;?php\nsetcookie(&quot;name&quot;, &quot;Jonney&quot;, time() + (86400 * 30), &quot;/&quot;);\nif (isset($_COOKIE[&quot;name&quot;])) {\n  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Name: Jonney\n</code></pre>\n<h3>(b) Explain any four string functions in PHP with example.</h3>\n<ul>\n<li><strong>strrev()</strong> - Reverses a string.</li>\n<li><strong>strpos()</strong> - Returns the position of the first occurrence of a string.</li>\n<li><strong>strrpos()</strong> - Finds the position of the last occurrence of a string.</li>\n<li><strong>str_replace()</strong> - Replaces some characters in a string.</li>\n</ul>\n<h3>© What is inheritance?</h3>\n<ul>\n<li>The old class is the base class, also called as parent class or super class,\nand the new class is the derived class also called as child class or sub\nclass.</li>\n<li>The derived class has its own variables and methods plus variables and\nmethods from the base class.</li>\n<li>The <code>extends</code> keyword is used for the inheritance.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Class1 {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Class2 extends Class1 {\n  function echo() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$o = new Class2;\n$o-&gt;func();\n$o-&gt;echo();\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\nBye World\n</code></pre>\n<h3>(ii) Write update operation on table data.</h3>\n<pre><code class=\"language-php\">&lt;?php\n// Connect MySQL\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n  echo &quot;Error: &quot;.mysqli_error($conn);\n}\n\n// Create table\n$table = &quot;CREATE TABLE employee(id INT(4), name VARCHAR(22), salary INT(4))&quot;;\nif (!mysqli_query($conn, $table)) {\n  echo &quot;Can't create table.&quot;;\n}\necho &quot;Created table&lt;br/&gt;&quot;;\n\n// Insert data\n$insert = &quot;INSERT INTO employee(id, name, salary) VALUES (1, 'Sam', 3200), (2, 'Jonney', 4500), (3, 'Jone', 2000)&quot;;\nif (!mysqli_query($conn, $insert)) {\n  echo &quot;Can't insert data.&quot;;\n}\n\n// Dalete data\n$delete = &quot;DELETE FROM employee WHERE id=2&quot;;\nif (!mysqli_query($conn, $delete)) {\n  echo &quot;Can't delete data.&quot;;\n}\n\n// Retrive data\n$retrive = &quot;SELECT * FROM employee&quot;;\n$result = mysqli_query($conn, $retrive);\n\nif (mysqli_num_rows($result)) {\n  while ($row = mysqli_fetch_assoc($result)) {\n    echo &quot;Name: &quot;.$row['name'].&quot;, Salary: &quot;.$row['salary'].&quot;, ID: &quot;.$row['id'].&quot;&lt;/br&gt;&quot;;\n  }\n}\n?&gt;\n</code></pre>",
      "date_published": "2022-12-20T20:07:22.703Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=Final&description=PHP%20Attempt%20any%20FIVE%20:%20(a)%20Describe%20advantage%20of%20PHP.%20%20Web%20Application%20Features%20-%20PHP%20is%20a%20programming%20language%20support%20most%20commonly%20used%20Web%20application%20features%20like%20HTTP%20Cookie,%20Session,%20File%20Upload,%20etc.%20CLI%20(Command%20Line%20Interface)%20-%20PHP%20is%20commonly%20used%20to%20write%20Web%20applic&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/php/ut2-6s.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/php/ut2-6s.html",
      "title": "UT2 6S",
      "content_html": "<h1>PHP Unit 2 AB</h1>\n<h3>1. Write the syntax for creating Cookie.</h3>\n<ul>\n<li>To set cookie in PHP, the <code>setcookie()</code> function is used.</li>\n<li>Syntex:<pre><code class=\"language-php\">setcookie($name, $value, $expire_time, $path, $domain)\n</code></pre>\n</li>\n<li><code>setcookie()</code> function the parameters.\n<ul>\n<li><strong>name</strong> - Name of the cookie, which is used with $_COOKIE function to get\nvalue.</li>\n<li><strong>value</strong> - Value of the named variable.</li>\n<li><strong>expire time</strong> - Time when cookie will expire.</li>\n<li><strong>path</strong> - Directory where cookie will valied.</li>\n<li><strong>domain</strong> - The default server hostname.</li>\n</ul>\n</li>\n</ul>\n<h3>2. WAP to connect PHP with MySQL.</h3>\n<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif ($conn) {\n\techo &quot;MySQL connected&quot;;\n} else {\n\techo &quot;MySQL can't connect&quot;;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>MySQL connected\n</code></pre>\n<h3>3. Differentiate between Session and Cookies.</h3>\n<table>\n<thead>\n<tr>\n<th>SESSION</th>\n<th>COOKIES</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Session are stored in server side</td>\n<td>Cookies are stored in client browser.</td>\n</tr>\n<tr>\n<td>Session is server resource.</td>\n<td>Cookies are client-side resource.</td>\n</tr>\n<tr>\n<td>It stores unlimeted data.</td>\n<td>It stores limited data.</td>\n</tr>\n<tr>\n<td>It holds multiple variables.</td>\n<td>It doen’t hold multiple variables.</td>\n</tr>\n<tr>\n<td>Session values can’t accessed easily.</td>\n<td>Cookies values can accessed easily.</td>\n</tr>\n<tr>\n<td>It is more secure.</td>\n<td>It is less secure.</td>\n</tr>\n</tbody>\n</table>\n<h3>4. Define session and explain how it works.</h3>\n<ul>\n<li>A session is a way to store information in variables to be used across\nmultiple pages.</li>\n<li>Sessions allow us to store data on the web server that associated with a\nsession ID.</li>\n<li>Once we create a session, PHP sends a cookie that contains the session ID to\nthe web browser.</li>\n<li>A session is started with the session_start() function.</li>\n<li>The session_start() function first checks if a session is already started and\nif none is started then it starts one.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\nsession_start();\n\n$_SESSION[&quot;color&quot;] = &quot;Red&quot;;\n$_SESSION[&quot;animal&quot;] = &quot;Cat&quot;;\necho $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>5. Write update and delete operations on table.</h3>\n<pre><code class=\"language-php\">UPDATE:\n&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n\techo &quot;Can't connect to MySQL&quot;;\n}\n\n$sql = &quot;UPDATE my_table SET name='Jonney' WHERE id=2&quot;;\nif (!mysqli_query($conn, $sql)) {\n\tdie(&quot;Can't Update Table&quot;);\n}\necho &quot;Update data&lt;/br&gt;&quot;;\n?&gt;\nDELETE:\n&lt;?php\n$sql = &quot;DELETE my_table WHERE id=1&quot;;\nif (!mysqli_query($conn, $sql)) {\n\tdie(&quot;Can't Delete data&quot;);\n}\necho &quot;Deleted data&lt;/br&gt;&quot;;\n\nmysqli_close($conn);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>UPDATE:Update data\nDELETE:Deleted data\n</code></pre>\n<h3>6. Answer the following</h3>\n<h4>i) Get session variables</h4>\n<ul>\n<li>The session variables are not passed individually to each new page, instead\nthey are retrieved from the session we open at the beginning of each page.</li>\n<li>All session variable values are stored in the global <code>$_SESSION</code> variable.</li>\n</ul>\n<h4>ii) Destroy session.</h4>\n<ul>\n<li>To remove all global session variables and destroy the session, we use\n<code>session_unset()</code> and <code>session_destroy()</code> functions.</li>\n<li>No arguments are needed in <code>session_destroy()</code> function.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\nsession_start();\n\n$_SESSION[&quot;color&quot;] = &quot;red&quot;;\n$_SESSION[&quot;animal&quot;] = &quot;Lion&quot;;\necho $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];\nsession_unset();\nsession_destroy();\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>7. Explain inserting and retrieving the query result operations.</h3>\n<ul>\n<li>For inserting a data into the table we use the INSERT query.</li>\n<li>For retrieving the data, we use the SELECT query.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n\techo &quot;Can't connect to MySQL&quot;;\n}\n\n// Insert the data\n$sql = &quot;INSERT INTO my_table(id, name) VALUES (1, 'Jonney'), (2, 'Jone')&quot;;\nif (!mysqli_query($conn, $sql)) {\n\techo &quot;Can't Insert the data&quot;;\n}\n\n// Retriving\n$sql = &quot;SELECT * FROM my_table&quot;;\n$result = mysqli_connect($conn, $sql);\n\nif ($mysqli_num_rows($result) &gt; 0) {\n\twhile ($row = mysqli_fetch_array($result)) {\n\t\techo &quot;Name: &quot;.$row['name'].&quot;, ID: &quot;.$row['id'].&quot;&lt;br/&gt;&quot;;\n\t}\n} else {\n\techo &quot;Rows can't be zero.&quot;;\n}\n</code></pre>\n<h3>8. Explain web page validation with example.</h3>\n<ul>\n<li>For validating a web page we use preg_match() function.</li>\n<li>The preg_match() function searches string for pattern, returning true if\npattern exists, and false otherwise.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\tName:&lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif (!preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;])) {\n\techo &quot;Only letter and whitespace is allowed&quot;;\n}\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>9.  Elaborate the following:</h3>\n<h4>i) <code>mysqli_query()</code></h4>\n<p>This function in php is used to pass a sql query to mysql database.\nThis function returns the query handle for SELECT queries, TRUE/FALSE for other\nqueries, or FALSE on failure.</p>\n<ul>\n<li>Syntex:<pre><code class=\"language-php\">mysqli_query(string, query, resource link_identifier])\n</code></pre>\n</li>\n</ul>\n<h4>ii) <code>mysqli_connect()</code></h4>\n<ul>\n<li>This function opens a connection to a MySQL server.</li>\n<li>It returns a MySQL link identifier on success, or FALSE on failure.</li>\n<li>Syntax:<pre><code class=\"language-php\">mysqli_connect($server, $username, $password)\n</code></pre>\n</li>\n<li>Example:<pre><code class=\"language-php\">$conn = mysqli_connect(&quot;mydb&quot;, &quot;root&quot;, &quot;root&quot;);\n</code></pre>\n</li>\n</ul>\n<h3>10. Explain the use of mail() function in php.</h3>\n<ul>\n<li><code>mail()</code> function is useful to sending the mail.</li>\n<li>Syntex:<pre><code class=\"language-php\">mail($to, $subject, $message, $header, $parametes);\n</code></pre>\n</li>\n<li><code>mail()</code> function parametes:\n<ul>\n<li><strong>to</strong> - represents the address of receiver.</li>\n<li><strong>subject</strong> - it specifies the subject of mail.</li>\n<li><strong>message</strong> - it defines the message which is to be sent.</li>\n<li><strong>headers</strong> - it is optional and specifies the additional headers like Cc, Bcc.</li>\n<li><strong>parameters</strong> - it is optional and specifies the additional parameters.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$sent = mail(&quot;AnzenKodo@altmail.com&quot;, &quot;Title&quot;, &quot;Message&quot;);\n\nif (!$sent) {\n  echo &quot;Message is not sent.&quot;;\n} else {\n  echo &quot;Message is sent.&quot;;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Message is sent.\n</code></pre>\n<h3>11. How to use radio button in form? Give suitable example.</h3>\n<ul>\n<li>The radio buttons are for single choice from multiple options.</li>\n<li>All radio buttons in the group have the same name attribute.</li>\n<li>Only one button can be selected per group.</li>\n<li>The value attribute is mandatory for checkboxes and radio buttons.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\tColor:\n\t&lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;White&quot;&gt;White&lt;/input&gt;\n\t&lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;Blue&quot;&gt;Blue&lt;/input&gt;\n\t&lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;Red&quot;&gt;Red&lt;/input&gt;\n\t&lt;input type=&quot;Submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif (isset($_POST[&quot;color&quot;])) {\n\techo $_POST[&quot;color&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>12. WAP in php to counting no. of rows in table.</h3>\n<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n\tdie(&quot;Can't connect to MySQL&quot;);\n}\n\n$sql = &quot;SELECT * FROM my_table&quot;;\nif ($result = mysqli_query($conn, $sql)) {\n\techo &quot;No of rows: &quot;.mysqli_num_rows($result);\n} else {\n\techo &quot;Can't connect&quot;;\n}\n\nmysqli_close($conn);\n?&gt;\n</code></pre>\n<h3>13. WAP in php to counting no. of fields in table.</h3>\n<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n\tdie(&quot;Can't connect to MySQL&quot;);\n}\n\n$sql = &quot;SELECT * FROM my_table&quot;\nif ($result = mysqli_query($conn, $sql)) {\n\techo &quot;No of fields: &quot;.mysqli_num_fields($result);\n}\nmysqli_close();\n?&gt;\n</code></pre>\n<h3>14. WAP in php to create database and creation of table.</h3>\n<pre><code class=\"language-php\">Creating database:\n&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;);\nif (!$conn) {\n\tdie(&quot;Can't connect to MySQL&quot;);\n}\n\n$sql = &quot;CREATE DATABASE db&quot;;\nif (!mysqli_query($conn, $sql) {\n\tdie(&quot;Can't create Database&quot;);\n}\necho &quot;Created database&lt;/br&gt;&quot;;\n\nmysqli_close($conn);\n?&gt;\n\nCreating Table:\n&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;db&quot;);\nif (!$conn) {\n\tdie(&quot;Can't create Table&quot;);\n}\n\n$sql = &quot;CREATE TABLE my_table(name VARCHAR(22), id INT(4))&quot;;\nif(!mysqli_query($conn, $sql) {\n\tdie(&quot;Error: &quot;.mysqli_error($conn));\n}\necho &quot;Created table&lt;br/&gt;&quot;;\n\nmysqli_close($conn);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Created database\nCreated table\n</code></pre>\n<h3>15. How to used list and button in form? Give suitable example.</h3>\n<ul>\n<li>List\n<ul>\n<li>The list represents a windows control to display a list of items to a user.</li>\n<li>A user can select an item from the list.</li>\n<li>User can either select one option from a list or multiple options, depending\non the type of list.</li>\n</ul>\n</li>\n<li>Button\n<ul>\n<li>A button is a control, which is an interactive component that enables users\nto communicate with an application which we click and release to perform\nsome actions.</li>\n<li>A button can be clicked by using the mouse, ENTER key, or SPACEBAR if the\nbutton has focus.</li>\n</ul>\n</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\t&lt;select name=&quot;language&quot;&gt;\n\t\t&lt;option name=&quot;C&quot;&gt;C&lt;/option&gt;\n\t\t&lt;option name=&quot;C++&quot;&gt;C++&lt;/option&gt;\n\t\t&lt;option name=&quot;PHP&quot;&gt;PHP&lt;/option&gt;\n\t&lt;/select&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif (isset($_POST[&quot;language&quot;])) {\n\techo &quot;Selected: &quot;.$_POST[&quot;language&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>16. Answer the following</h3>\n<h4>i) Use of cookies</h4>\n<ul>\n<li>Cookie save the data in browser, so next time refresh the browser it will not\ndelete from browser.</li>\n<li>Cookie is used to identify the user.</li>\n<li>A cookie is a small file that server embeds to user’s computer.</li>\n<li>Each time the same computer requests a page with a browser, it will send the\ncookie too.</li>\n</ul>\n<h4>ii) How to set the cookie?</h4>\n<ul>\n<li>Use <code>setcookie</code> function to create cookie.</li>\n<li>Syntex:<pre><code>setcookie($cookie_name, $cookie_value, $time, $location)\n</code></pre>\n</li>\n</ul>\n<h4>iii) How to modify?</h4>\n<ul>\n<li>Set cookie agien with <code>setcookie</code> function.</li>\n</ul>\n<h4>iv) How to delete the cookies?</h4>\n<ul>\n<li>To delete cookie, we can use <code>setcookie</code> function with expiration date in\npast.</li>\n<li>Example:<pre><code>setcookie($cookie_name, &quot;&quot;, time() - 3600);\n</code></pre>\n</li>\n<li>We can also put <code>null</code> in time section to delete cookie.</li>\n<li>Example<pre><code>setcookie($cookie_name, &quot;&quot;, null);\n</code></pre>\n</li>\n</ul>\n<h3>17. Define GET and POST methods.</h3>\n<h4>GET</h4>\n<ul>\n<li>It sends the encoded user information appended to the page request (to the\nURL).</li>\n<li>The page and the encoded information are separated by the ? character.</li>\n<li>The GET method produces a long string the appears in our server logs, in the\nbrowser’ location box.</li>\n<li>The GET method is restricted to send up to 1024 characters only.</li>\n<li>Never use GET method if we have password or other sensitive information.</li>\n<li>GET cannot be used to send binary data to the server.</li>\n<li>The php provides $_GET assoiative array to a access all the sent information\nusing GET method.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;GET&quot;&gt;\n\tName: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ($_GET[&quot;name&quot;]) {\n\techo $_GET[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n<li>Output:<pre><code>Name: Joey\nSubmit\n\nJoey\n</code></pre>\n</li>\n</ul>\n<h4>POST</h4>\n<ul>\n<li>It transfers information via HTTP header, not throought the URL.</li>\n<li>The POST method does not have any restriction on data size.</li>\n<li>The POST method can be used to send ASCII as well as binary data.</li>\n<li>The data sent by POST  method goes through HTTP header, so security depends on\nHTTP protocol.</li>\n<li>By using secure HTTP, we can make sure that our information is secure.</li>\n<li>The PHP provides $_POST associative array to access all the sent information\nusing POST method.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\tName: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ($_POST[&quot;name&quot;]) {\n\techo $_POST[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n<li>Output<pre><code>Name: Joey\nSubmit\n\nJoey\n</code></pre>\n</li>\n</ul>",
      "date_published": "2022-12-20T20:07:22.703Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=UT2 6S&description=PHP%20Unit%202%20AB%201.%20Write%20the%20syntax%20for%20creating%20Cookie.%20%20To%20set%20cookie%20in%20PHP,%20the%20setcookie()%20function%20is%20used.%20Syntex:setcookie($name,%20$value,%20$expire_time,%20$path,%20$domain)%20%20%20setcookie()%20function%20the%20parameters.%20%20name%20-%20Name%20of%20the%20cookie,%20which%20is%20used%20with%20$_COOKIE%20function%20to&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/php/sample-paper-6s.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/php/sample-paper-6s.html",
      "title": "Sample Paper 6S",
      "content_html": "<h1><em>22619</em> - Web Based Application development with PHP</h1>\n<ul>\n<li><strong>Programme Name:</strong> Computer/Information Technology Engineering</li>\n<li><strong>Programmecode:</strong> CO/IF</li>\n<li><strong>Semester:</strong> VI Sem</li>\n<li><strong>Marks:</strong> 70</li>\n</ul>\n<h2>Q.1) Attempt any FIVE of the following. <em>(10 Marks)</em></h2>\n<h3>a) List any four advantages of PHP?</h3>\n<ol>\n<li>PHP is open source and free from cost.</li>\n<li>It is platform independent.</li>\n<li>PHP based application can run on any OS like UNIX, Linux and Windows, etc</li>\n<li>Easy to learn.</li>\n<li>Has built-in database connection modules.</li>\n</ol>\n<h3>b) State the use of <code>str_word_count</code> along with its syntax.</h3>\n<ul>\n<li><code>str_word_count()</code> function counts the numbers of word in a string.</li>\n<li>Syntax:<pre><code>str_word_count(string,return,char)\n</code></pre>\n</li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\necho set_word_count(&quot;Hello World&quot;);\n?&gt;\n</code></pre>\nO/P<pre><code>2\n</code></pre>\n</li>\n</ul>\n<h3>c) Define serialization.</h3>\n<ul>\n<li>Serialization of data means converting it into a string of bytes in such a way\nthat you can produce the original data again from the string via a process as\nunserialization.</li>\n<li>After you have the ability to serialize/unserialize, you can store your\nserialized string anywhere and recreate a copy of the data again when needed.</li>\n<li>PHP offers two functions, serialize() and unserialize(), which take a value of\nany type (except type resource) and encode the value into string form and\ndecode again, respectively.</li>\n</ul>\n<h3>d) Write the syntax for creating Cookie.</h3>\n<ul>\n<li>To set cookie in PHP, the <code>setcookie()</code> function is used.</li>\n<li>Syntex:<pre><code class=\"language-php\">setcookie($name, $value, $expire_time, $path, $domain)\n</code></pre>\n</li>\n<li><code>setcookie()</code> function the parameters.\n<ul>\n<li><strong>name</strong> - Name of the cookie, which is used with $_COOKIE function to get\nvalue.</li>\n<li><strong>value</strong> - Value of the named variable.</li>\n<li><strong>expire time</strong> - Time when cookie will expire.</li>\n<li><strong>path</strong> - Directory where cookie will valied.</li>\n<li><strong>domain</strong> - The default server hostname.</li>\n</ul>\n</li>\n</ul>\n<h3>e) Write syntax of Connecting PHP Webpage with MySQL.</h3>\n<ul>\n<li>\n<p>Syntex:</p>\n<pre><code>mysqli_connect(host, username, password, dbname, port, socket)\n</code></pre>\n</li>\n<li>\n<p>Parameter:</p>\n<ul>\n<li><strong>host</strong> - Specifies a host name or an IP address.</li>\n<li><strong>username</strong> -Specifies the MySQL username</li>\n<li><strong>password</strong> - Specifies the MySQL password</li>\n<li><strong>dbname</strong> - Specifies the default database to be used</li>\n<li><strong>port</strong>  - Specifies the port number to attempt to connect to the MySQL\nserver</li>\n<li><strong>socket</strong> - Specifies the socket or named pipe to be used</li>\n</ul>\n</li>\n<li>\n<p>Example:</p>\n<pre><code class=\"language-php\">&lt;?php\nmysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;/&quot;, &quot;domain.com&quot;,\n\t&quot;/run/mysql/mysql.sock&quot;)\n</code></pre>\n</li>\n</ul>\n<h3>f) Define GET and POST methods.</h3>\n<h4>GET</h4>\n<ul>\n<li>It sends the encoded user information appended to the page request (to the\nURL).</li>\n<li>The page and the encoded information are separated by the ? character.</li>\n<li>The GET method produces a long string the appears in our server logs, in the\nbrowser location box.</li>\n<li>The GET method is restricted to send up to 1024 characters only.</li>\n<li>Never use GET method if we have password or other sensitive information.</li>\n<li>GET cannot be used to send binary data to the server.</li>\n<li>The php provides $_GET assoiative array to a access all the sent information\nusing GET method.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;GET&quot;&gt;\n\tName: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n&lt;?php\nif ($_GET[&quot;name&quot;]) {\n\techo $_GET[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n<li>Output:<pre><code>Name: Joey\nSubmit\nJoey\n</code></pre>\n</li>\n</ul>\n<h4>POST</h4>\n<ul>\n<li>It transfers information via HTTP header, not throought the URL.</li>\n<li>The POST method does not have any restriction on data size.</li>\n<li>The POST method can be used to send ASCII as well as binary data.</li>\n<li>The data sent by POST  method goes through HTTP header, so security depends on\nHTTP protocol.</li>\n<li>By using secure HTTP, we can make sure that our information is secure.</li>\n<li>The PHP provides $_POST associative array to access all the sent information\nusing POST method.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\tName: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n&lt;?php\nif ($_POST[&quot;name&quot;]) {\n\techo $_POST[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n<li>Output<pre><code>Name: Joey\nSubmit\nJoey\n</code></pre>\n</li>\n</ul>\n<h3>g) State the use of <code>$</code> sign in PHP.</h3>\n<ul>\n<li>The $ operator in PHP is used to declare a variable.</li>\n<li>A variable starts with the $ sign followed by the name of the variable.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\n$var_name = &quot;Hello World!&quot;;\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h2>Q.2) Attempt any THREE of the following. <em>(12 Marks)</em></h2>\n<h3>a) Write a program using foreach loop.</h3>\n<pre><code class=\"language-php\">&lt;?php\n  //declare array\n  $season = array (&quot;Summer&quot;, &quot;Winter&quot;, &quot;Autumn&quot;, &quot;Rainy&quot;);\n  //access array elements using foreach loop\n  foreach ($season as $element) {\n    echo &quot;$element&quot;;\n    echo &quot;&lt;/br&gt;&quot;;\n  }\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Summer\nWinter\nAutumn\nRainy\n</code></pre>\n<h3>b) Explain Indexed and Associative arrays with suitable example.</h3>\n<h4>Indexed arrays</h4>\n<p>Indexed array: An array having only integer keys is typically referred to as an\nindexed array and index arrays can store numbers, drinks and any object but\ntheir index will be represented by number.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  // Define an indexed array\n  $colors = array(&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;);\n  // Printing array structure\n  print_r($colors);\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Array ( [0] =&gt; Red [1] =&gt; Green [2] =&gt; Blue )\n</code></pre>\n<h4>Associative arrays</h4>\n<p>The associative arrays are very similar to numeric arrays in terms of\nfunctionality but they are different in terms of their index. Associative arrays\nwill have their index as string so that you can establish a strong association\nbetween key and values.</p>\n<pre><code class=\"language-php\">&lt;?php\n  // Define an associative array\n  $ages = array(&quot;Peter&quot;=&gt;22, &quot;Clark&quot;=&gt;32, &quot;John&quot;=&gt;28);\n  // Printing array structure\n  print_r($ages);\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Array ( [Peter] =&gt; 22 [Clark] =&gt; 32 [John] =&gt; 28 )\n</code></pre>\n<h3>c) Define Introspection and explain it with suitable example.</h3>\n<p>PHP Introspection is the ability of a program to examine an object’s\ncharacteristics such as its name, parent class (if any), properties and methods.</p>\n<p>Introspection  in PHP offers a useful Ability  to examine classes’ interfaces\nproperties methods. With introspection we can write  code that operates on any\nobject or class.</p>\n<p><strong>Example</strong>:</p>\n<pre><code class=\"language-php\">&lt;?php\n  if (class_exists('MyClass')) {\n    $myclass = new MyClass();\n  }\n?&gt;\n</code></pre>\n<h3>d) Differentiate between Session and Cookies.</h3>\n<table>\n<thead>\n<tr>\n<th>SESSION</th>\n<th>COOKIES</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Session are stored in server side</td>\n<td>Cookies are stored in client browser.</td>\n</tr>\n<tr>\n<td>Session is server resource.</td>\n<td>Cookies are client-side resource.</td>\n</tr>\n<tr>\n<td>It stores unlimeted data.</td>\n<td>It stores limited data.</td>\n</tr>\n<tr>\n<td>It holds multiple variables.</td>\n<td>It doen’t hold multiple variables.</td>\n</tr>\n<tr>\n<td>Session values can’t accessed easily.</td>\n<td>Cookies values can accessed easily.</td>\n</tr>\n<tr>\n<td>It is more secure.</td>\n<td>It is less secure.</td>\n</tr>\n</tbody>\n</table>\n<h2>Q.3) Attempt any THREE of the following. <em>(12 Marks)</em></h2>\n<h3>a) Differentiate between implode and explode functions.</h3>\n<table>\n<thead>\n<tr>\n<th>No.</th>\n<th>Implode</th>\n<th>Explode</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>The implode() function returns a string from the elements of an array.</td>\n<td>explode function breaks a string  into smaller parts and stores it  as an array.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>The implode() function accepts its  parameters in either order.  However, for consistency with explode(),  you should use the documented order of  arguments.</td>\n<td>The explode() function splits  these strings based on a specific  delimiter and returns an array that  contains elements which are sustained  by the splitting operation.</td>\n</tr>\n<tr>\n<td>3</td>\n<td>syntax :-string implode (pieces)</td>\n<td>array explode (delimiter, string, limit)</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>Example</strong>:  <code>php &lt;?php $arr = array(&quot;I&quot;, &quot;love&quot;, &quot;PHP.&quot;); $pole = implode(&quot; &quot;, $arr); \\ echo &quot;$pole&quot;; ?&gt; </code>  Output: I love PHP.</td>\n<td>Example: <?php  $string = \"I love php.\"; $pole = explode(\" \", $string); \\ \\ print_r($pole); ?>  Output: Array ( [0] =&gt; I [1] =&gt; love [2] =&gt; php. )</td>\n</tr>\n</tbody>\n</table>\n<h3>b) Write a program for cloning of an object.</h3>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  public $name;\n}\n\n$o = new Obj;\n$c = clone $o;\n\n$o-&gt;name = &quot;Jonney&quot;;\n$c-&gt;name = &quot;Jone&quot;;\n\necho &quot;Origenal: &quot;.$o-&gt;name.&quot;, Clone: &quot;.$c-&gt;name;\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Origenal: Jonney, Clone: JOne\n</code></pre>\n<h3>c) Define session and explain how it works.</h3>\n<ul>\n<li>A session is a way to store information in variables to be used across\nmultiple pages.</li>\n<li>Sessions allow us to store data on the web server that associated with a\nsession ID.</li>\n<li>Once we create a session, PHP sends a cookie that contains the session ID to\nthe web browser.</li>\n<li>A session is started with the session_start() function.</li>\n<li>The session_start() function first checks if a session is already started and\nif none is started then it starts one.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\nsession_start();\n$_SESSION[&quot;color&quot;] = &quot;Red&quot;;\n$_SESSION[&quot;animal&quot;] = &quot;Cat&quot;;\necho $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>d) Write Update and Delete operations on table data.</h3>\n<h2>Q.4) Attempt any THREE of the following. <em>(12 Marks)</em></h2>\n<h3>a) State the variable function.Explain it with example.</h3>\n<p>PHP supports the concept of variable function means that we can call a function\nbased on a value of a variable if a variable name has a round parentheses\nappended to it PHP will look for a function with the same name as a whatever\nvariable Evaluates to and will attempt to execute it.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  function add($x, $y){\n    echo $x + $y;\n  }\n  $var =  &quot;add&quot;;\n  $var(10,20);\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>30\n</code></pre>\n<h3>b) Explain the concept of Serialization with example.</h3>\n<p>A string representation of any object in the form of byte-stream is obtained by\nserialize() function in PHP. All property variables of the object are contained\nin the string and methods are not saved. This string can be stored in any file.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\necho serialize(array(&quot;Red&quot;));\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>a:1:{i:0;s:3:&quot;Red&quot;;}\n</code></pre>\n<h3>c) Answer the following:</h3>\n<h4>i) Get session variables</h4>\n<ul>\n<li>The session variables are not passed individually to each new page, instead\nthey are retrieved from the session we open at the beginning of each page.</li>\n<li>All session variable values are stored in the global <code>$_SESSION</code> variable.</li>\n</ul>\n<h4>ii) Destroy session.</h4>\n<ul>\n<li>To remove all global session variables and destroy the session, we use\n<code>session_unset()</code> and <code>session_destroy()</code> functions.</li>\n<li>No arguments are needed in <code>session_destroy()</code> function.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\nsession_start();\n$_SESSION[&quot;color&quot;] = &quot;red&quot;;\n$_SESSION[&quot;animal&quot;] = &quot;Lion&quot;;\necho $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];\nsession_unset();\nsession_destroy();\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h2>Q.5) Attempt any TWO of the following. <em>(12 Marks)</em></h2>\n<h3>a) Explain any three data types used in PHP.</h3>\n<ol>\n<li><strong>Integer:</strong> integer data type used to specify a numeric value  without a fractional component the range of integers.</li>\n<li><strong>Strings:</strong> a string is a sequence of characters where characters are the same as a byte.</li>\n<li><strong>Boolean:</strong> boolean  value can be either true or false both are  case-insensitive.</li>\n</ol>\n<h3>b) Write a program to connect PHP with MySQL.</h3>\n<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;mydb&quot;, &quot;root&quot;, &quot;root&quot;);\nif ($conn) {\n\techo &quot;Connection Successful&quot;;\n} else {\n\techo &quot;Connection Unsuccessful&quot;;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Connction Successful\n</code></pre>\n<h3>c) Explain the concept of overriding in detail.</h3>\n<p>In function overriding, both parent and child classes should have the same\nfunction name with and number of arguments. It is used to replace the parent\nmethod in child class.</p>\n<pre><code class=\"language-php\">&lt;?php\nclass ParentClass {\n  function helloWorld() {\n    echo &quot;Parent&quot;;\n  }\n}\nclass ChildClass extends ParentClass {\n  function helloWorld() {\n    echo &quot;Child&quot;;\n  }\n}\n$p = new ParentClass;\n$c = new ChildClass;\n$p-&gt;helloWorld();\n$c-&gt;helloWorld();\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Parent\nChild\n</code></pre>\n<h2>Q.6) Attempt any TWO of the following. <em>(12 Marks)</em></h2>\n<h3>a) Explain web page validation with example.</h3>\n<ul>\n<li>For validating a web page we use preg_match() function.</li>\n<li>The preg_match() function searches string for pattern, returning true if\npattern exists, and false otherwise.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\tName:&lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n&lt;?php\nif (!preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;])) {\n\techo &quot;Only letter and whitespace is allowed&quot;;\n}\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>b) Write a program to create PDF document in PHP.</h3>\n<pre><code class=\"language-php\">&lt;?php\n  require('fpdf.php');\n  $pdf = new FPDF();\n  $pdf-&gt;AddPage();\n  $pdf-&gt;SetFont('Arial','B',16);\n  $pdf-&gt;Cell(40,10,'Hello World!');\n  $pdf-&gt;Output();\n?&gt;\n</code></pre>\n<h3>c) Elaborate the following:</h3>\n<h4>i) __call()</h4>\n<ul>\n<li>The __call() method is invoked automatically when a non-existing method or\ninaccessible method is called.</li>\n<li>The __call() method accepts two arguments:\n<ul>\n<li>$name is the name of the method that is being called by the object.</li>\n<li>$arguments is an array of arguments passed to the method call.</li>\n</ul>\n</li>\n<li>Syntax:<pre><code>public __call ( string $name , array $arguments ) : mixed\n</code></pre>\n</li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\n  class Obj {\n  \tfunction __call($method, $argument) {\n  \t\tprint_r($method);\n  \t\tprint_r($argument);\n  \t}\n  }\n\n  $o = new Obj;\n\n  $o-&gt;hello(&quot;World&quot;);\n?&gt;\n</code></pre>\nO/P<pre><code>hello\nArray([0]=&gt;&quot;World&quot;)\n</code></pre>\n</li>\n</ul>\n<h4>ii) mysqli_connect()</h4>\n<ul>\n<li>This function opens a connection to a MySQL server.</li>\n<li>It returns a MySQL link identifier on success, or FALSE on failure.</li>\n<li>Syntax:<pre><code class=\"language-php\">mysqli_connect($server, $username, $password)\n</code></pre>\n</li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;mydb&quot;, &quot;root&quot;, &quot;root&quot;, &quot;text&quot;);\n?&gt;\n</code></pre>\n</li>\n</ul>",
      "date_published": "2022-12-20T20:07:22.703Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=Sample Paper 6S&description=22619%20-%20Web%20Based%20Application%20development%20with%20PHP%20%20Programme%20Name:%20Computer/Information%20Technology%20Engineering%20Programmecode:%20CO/IF%20Semester:%20VI%20Sem%20Marks:%2070%20%20Q.1)%20Attempt%20any%20FIVE%20of%20the%20following.%20(10%20Marks)%20a)%20List%20any%20four%20advantages%20of%20PHP?%20%20PHP%20is%20open%20source%20and%20free%20fro&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/php/ut1-6s.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/php/ut1-6s.html",
      "title": "UT1 6S",
      "content_html": "<h2>Write a php program to find the largest number among three numbers.</h2>\n<pre><code class=\"language-php\">&lt;?php\n  function largest($x, $y, $z) {\n    if ($x &gt;= $y) {\n      if($x &gt;= $z) {\n        echo $x;\n      } else {\n        echo $z;\n      }\n    }\n    else {\n      if($y &gt;= $z) {\n        echo $y;\n      } else {\n        echo $z;\n      }\n    }\n  }\n\n  largest(100, 50, 25);\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>100\n</code></pre>\n<h2>Write a php code for creating a basic image.</h2>\n<pre><code class=\"language-php\">&lt;?php\n$image = imagecreatetruecolor(500, 300);\nimagefilledrectangle($image, 20, 20, 480, 280);\nheader(&quot;Content-type: image/png&quot;);\nimagepng($image);\n?&gt;\n</code></pre>\n<h2>Explain inheritance with examples.</h2>\n<p>In Inheritance  the new class can inherit the properties and methods from the\nold class.</p>\n<p>The old class is the base class also called a parent class and then the new\nclass is a derived  class also called a subclass.</p>\n<p><strong>Example</strong>:</p>\n<pre><code class=\"language-php\">&lt;?php\n  class Person {\n    var $name, $age;\n  }\n  class Employee extends Person {\n    var $salary, $designation;\n  }\n?&gt;\n</code></pre>\n<h2>Explain the concept of introspection in php with an example.</h2>\n<p>PHP Introspection is the ability of a program to examine an object’s\ncharacteristics such as its name, parent class (if any), properties and methods.</p>\n<p>Introspection  in PHP offers a useful Ability  to examine classes’ interfaces\nproperties methods. With introspection we can write  code that operates on any\nobject or class.</p>\n<p><strong>Example</strong>:</p>\n<pre><code class=\"language-php\">&lt;?php\n  if (class_exists('MyClass')) {\n    $myclass = new MyClass();\n  }\n?&gt;\n</code></pre>\n<h2>How to use overloading and overriding functions in php?</h2>\n<h2>Overloading</h2>\n<p>Method overloading is the ability to create a multiple function\nof the same name with a different implementation  depending upon the types of\narguments.</p>\n<p>How to use overloading in PHP?</p>\n<pre><code class=\"language-php\">&lt;?php\nclass First {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Second extends First {\n  function func() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$o = new Second;\n$o-&gt;func();\n</code></pre>\n<p>O/P</p>\n<pre><code>Bye World\n</code></pre>\n<h2>Overriding</h2>\n<p>In function overriding, both parent and child classes should have the same\nfunction name with and number of arguments. It is used to replace the parent\nmethod in child class.</p>\n<pre><code class=\"language-php\">&lt;?php\n&lt;?php\nclass First {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Second extends First {\n  function func() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$f = new First;\n$s = new Second;\n$f-&gt;func();\n$s-&gt;func();\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Hello World\nBye World\n</code></pre>\n<h2>How to use the flip function in php.</h2>\n<p>The array_flip function flips/All keys with their associated values in array.</p>\n<p>This function is very useful when we have a big/ large array.and we want to\nknow if a given value  is in the array.</p>\n<p><strong>Syntax</strong>:</p>\n<pre><code>array_flip(array_name)\n</code></pre>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  $a = array(&quot;a&quot;);\n  print_r(array_flip($a));  //flip function is used\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Array( [0]=&gt; a )\n</code></pre>\n<h2>How to define properties and methods of a class? Explain with suitable examples.</h2>\n<ol>\n<li>Objects have access to special variables called. properties.</li>\n<li>A property Can be valued as an array and even another object.</li>\n<li>All properties go inside the curly braces.</li>\n<li>The characteristics of a class are known as its properties.</li>\n</ol>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  class Student {\n    var $roll_no;\n    var $name;\n    function display() {\n      echo &quot;Roll No: &quot; . $this-&gt;roll_no. &quot;&lt;br&gt;&quot;;\n      echo &quot;Name: &quot; $this-&gt;name;\n    }\n  }\n\n  $s1 = new Student;\n  $s1-&gt;roll_no = 10;\n  $s1-&gt;name = &quot;Amar&quot;;\n  $si-&gt;display();\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Roll No: 10\nName: Amar\n</code></pre>\n<p>A class method is exactly similar to PHP functions.</p>\n<ol>\n<li>Method is a function defined within the class.</li>\n<li>Methods on the other hand are functions that operate on the data.</li>\n<li>Method is also written within the braces {}.</li>\n</ol>\n<p>The method can be accessed from outside the class.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\nclass Person {\n\tpublic $age = 25;\n\n\tpublic function printAge() {\n\t\techo &quot;The age is: $this-&gt;age&quot;;\n\t}\n}\n\n$person = new Person;\n$person-&gt;age = 20;\n$person-&gt;printAge();\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>The age is: 20\n</code></pre>\n<h2>Explain the arithmetic operators that can be used in php with examples.</h2>\n<p>The PHP arithmetic operators are used with numeric values to perform common\narithmetical operations, such as addition, subtraction, multiplication etc.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  $a = 42;\n  $b = 20;\n\n  $c = $a + $b;\n  echo &quot;Addition is: $c &lt;br/&gt;&quot;;\n  $c = $a - $b;\n  echo &quot;Subtraction is: $c &lt;br/&gt;&quot;;\n  $c = $a * $b;\n  echo &quot;Multiplication is: $c &lt;br/&gt;&quot;;\n  $c = $a / $b;\n  echo &quot;Division is: $c &lt;br/&gt;&quot;;\n  $c = $a % $b;\n  echo &quot;Modulus is: $c &lt;br/&gt;&quot;;\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Addition is: 62\nSubtraction is: 22\nMultiplication is: 840\nDivision is: 2.1\nModulus is: 2\n</code></pre>\n<h2>What is the use of anonymous functions in php? Explain with examples.</h2>\n<p>Anonymous functions, also known as closures, allow the creation of functions\nwhich have no specified name. They are most useful as the value of callable\nparameters, but they have many other uses.</p>\n<pre><code class=\"language-php\">&lt;?php\n$func = function () { echo &quot;Hello World&quot;; };\n$func();\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>Explain cloning objects with examples.</h2>\n<p>Object cloning is the process in PHP to create a copy of an object. An object\ncopy is created by using the clone keyword when the object is cloned PHP will\nperform Shallow copy  of all the object properties and properties that are\nreferenced to their variables will remain references.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  public $name;\n}\n\n$o = new Obj;\n$c = clone $o;\n\n$o-&gt;name = &quot;Jonney&quot;;\n$c-&gt;name = &quot;Jone&quot;;\n\necho &quot;Origenal: &quot;.$o-&gt;name.&quot;, Clone: &quot;.$c-&gt;name;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Origenal: Jonney, Clone: Jone\n</code></pre>\n<h2>Explain indexed and associative arrays with examples.</h2>\n<p>Indexed array: An array having only integer keys is typically referred to as an\nindexed array and index arrays can store numbers, drinks and any object but\ntheir index will be represented by number.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  $colors = array(&quot;Red&quot;);\n  print_r($colors);\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Array ( [0] =&gt; Red )\n</code></pre>\n<p>The associative arrays are very similar to numeric arrays in terms of\nfunctionality but they are different in terms of their index. Associative arrays\nwill have their index as string so that you can establish a strong association\nbetween key and values.</p>\n<pre><code class=\"language-php\">&lt;?php\n  $ages = array( &quot;Peter&quot;=&gt;22 );\n  print_r($ages);\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Array ( [Peter] =&gt; 22 )\n</code></pre>\n<h2>How to define constructor and destructor in php with an example?</h2>\n<ul>\n<li><strong>constructor</strong> - When we create a new object it is useful to initialize its\nproperties.</li>\n<li><strong>destructor</strong> - The destructor method will be called as soon as there are no\nother references to a particular object.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  function __construct() {\n    echo &quot;Class created&quot;;\n  }\n\n  function __destruct() {\n    echo &quot;Class destroyed&quot;;\n  }\n}\n\n$o = new Obj;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Class Created\nClass Destroyed\n</code></pre>\n<h2>Explain the following string function with an example.</h2>\n<ol>\n<li>strpos()</li>\n<li>strlen()</li>\n<li>strcmp()</li>\n<li>str_word_count()</li>\n<li>strpos()</li>\n</ol>\n<ul>\n<li><strong>strpos()</strong> - Returns the position of the first occurrence of a string.</li>\n<li><strong>strlen()</strong> - Returns the length of a string.</li>\n<li><strong>strcmp()</strong> - Compares two strings.</li>\n<li><strong>str_word_count()</strong> - Count the number of words in a string.</li>\n<li><strong>strrpos()</strong> - Finds the position of the last occurrence of a string.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\necho strpos(&quot;Hello World&quot;, &quot;Hello&quot;);\necho strlen(&quot;Hello World&quot;);\necho strcmp(&quot;Hello World&quot;, &quot;Hello World&quot;);\necho str_word_count(&quot;Hello World&quot;);\necho strrpos(&quot;Hello World&quot;, &quot;Hello&quot;);\n</code></pre>\n<p>O/P</p>\n<pre><code>0\n11\n0\n2\n0\n</code></pre>\n<h2>Write a program using a foreach loop.</h2>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(1, 2, 3, 4, 5);\nforeach ($a as $n) {\n  echo $n;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>12345\n</code></pre>\n<h2>Explain serialization with suitable examples.</h2>\n<p>A string representation of any object in the form of byte-stream is obtained by\nserialize() function in PHP. All property variables of the object are contained\nin the string and methods are not saved. This string can be stored in any file.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\necho serialize(array(&quot;Red&quot;));\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>a:1:{i:0;s:3:&quot;Red&quot;;}\n</code></pre>\n<h2>Define <code>imagecolorallocate()</code> function along with suitable examples.</h2>\n<p><code>imagecolorallocate()</code> function is another inbuilt PHP function mainly used to\nimplement a new color to an image. It returns the color of an image in an RGB\nformat (RED GREEN BLUE).</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  $im = imagecreate(100, 100);\n  // sets background to red\n  $background = imagecolorallocate($im, 255, 0, 0);\n  // sets some colors\n  $white = imagecolorallocate($im, 255, 255, 255);\n  $black = imagecolorallocate($im, 0, 0, 0);\n  // hexadecimal way\n  $white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);\n  $black = imagecolorallocate($im, 0x00, 0x00, 0x00);\n?&gt;\n</code></pre>\n<h2>Write a program to create a filled rectangle.</h2>\n<pre><code class=\"language-php\">&lt;?php\n$image = imagecreatetruecolor(500, 300);\nimagefilledrectangle($image, 20, 20, 480, 280);\nheader(&quot;Content-type: image/png&quot;);\nimagepng($image);\n?&gt;\n</code></pre>\n<h2>Explain any three data types used in php.</h2>\n<ol>\n<li><strong>Integer:</strong> integer data type used to specify a numeric value  without a fractional component the range of integers.</li>\n<li><strong>Strings:</strong> a string is a sequence of characters where characters are the same as a byte.</li>\n<li><strong>Boolean:</strong>   boolean  value can be either true or false both are  case-insensitive.</li>\n</ol>\n<h2>Differentiate between implode and explode function.</h2>\n<table>\n<thead>\n<tr>\n<th>No.</th>\n<th>Implode</th>\n<th>Explode</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>The implode() function returns a string from the elements of an array.</td>\n<td>explode function breaks a string  into smaller parts and stores it  as an array.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>The implode() function accepts its  parameters in either order.  However, for consistency with explode(),  you should use the documented order of  arguments.</td>\n<td>The explode() function splits  these strings based on a specific  delimiter and returns an array that  contains elements which are sustained  by the splitting operation.</td>\n</tr>\n<tr>\n<td>3</td>\n<td>syntax :-string implode (pieces)</td>\n<td>array explode (delimiter, string, limit)</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>Example</strong>:  <code>php &lt;?php $arr = array(&quot;I&quot;, &quot;love&quot;, &quot;PHP.&quot;); $pole = implode(&quot; &quot;, $arr); \\ echo &quot;$pole&quot;; ?&gt; </code>  Output: I love PHP.</td>\n<td>Example: <?php  $string = \"I love php.\"; $pole = explode(\" \", $string); \\ \\ print_r($pole); ?>  Output: Array ( [0] =&gt; I [1] =&gt; love [2] =&gt; php. )</td>\n</tr>\n</tbody>\n</table>\n<h2>State the variable function. Explain it with an example.</h2>\n<p>PHP supports the concept of variable function means that we can call a function\nbased on a value of a variable if a variable name has a round parentheses\nappended to it PHP will look for a function with the same name as a whatever\nvariable Evaluates to and will attempt to execute it.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  function add($x, $y){\n    echo $x + $y;\n  }\n  $var =  &quot;add&quot;;\n  $var(10,20);\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>30\n</code></pre>",
      "date_published": "2022-12-20T20:07:22.703Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=UT1 6S&description=Write%20a%20php%20program%20to%20find%20the%20largest%20number%20among%20three%20numbers.%20&lt;?php%20%20%20function%20largest($x,%20$y,%20$z)%20{%20%20%20%20%20if%20($x%20&gt;=%20$y)%20{%20%20%20%20%20%20%20if($x%20&gt;=%20$z)%20{%20%20%20%20%20%20%20%20%20echo%20$x;%20%20%20%20%20%20%20}%20else%20{%20%20%20%20%20%20%20%20%20echo%20$z;%20%20%20%20%20%20%20}%20%20%20%20%20}%20%20%20%20%20else%20{%20%20%20%20%20%20%20if($y%20&gt;=%20$z)%20{%20%20%20%20%20%20%20%20%20echo%20$y;%20%20%20%20%20%20%20}%20&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/php/notes.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/php/notes.html",
      "title": "Notes",
      "content_html": "<h1>1. Expressions and Control Statements in PHP</h1>\n<h2>1. What is web application?</h2>\n<ul>\n<li>A Web application is a computer software or program that performs some\nspecific tasks at its client by using a Web browser.</li>\n<li>The Web-based applications are also known as Web apps.</li>\n<li>Web applications are usually based on the client-server architecture where\nthe client input/request data while the server stores and responds with\nresult.</li>\n</ul>\n<h2>3. What is PHP?</h2>\n<ul>\n<li>PHP is a widely used open source language that is specifically used for web\napplication development and can be embedded within HTML.</li>\n<li>PHP is a server-side scripting language that is used in Web based\napplications.</li>\n<li>PHP is a general-purpose programming language originally designed for web\napplication development. PHP is a recursive. acronym for “PHP: Hypertext\nPreprocessor”.</li>\n</ul>\n<h2>4. Enlist features of PHP.</h2>\n<ul>\n<li><strong>Web Application Features</strong> - PHP is a programming language support most\ncommonly used Web application features like HTTP Cookie, Session, File\nUpload, etc.</li>\n<li><strong>CLI (Command Line Interface)</strong> - PHP is commonly used to write Web\napplications to be integrated to Web servers using the Common Gateway\nInterface (CGI).</li>\n<li><strong>Built-in Modules</strong> - The standard PHP build comes with many free and open\nsource libraries included as built-in modules.</li>\n<li><strong>Object-Oriented Programming (OOP)</strong> - PHP supports object-oriented\nprogramming features like object.</li>\n<li><strong>Pre-Compilation</strong> - PHP Web applications are usually deployed in source\ncode, which will be interpreted on-the-fly when Web requests arrive to the\nserver.</li>\n<li><strong>Real Time Access Monitoring</strong> - PHP provides access logging by creating the\nsummary of recent accesses for the user.</li>\n<li><strong>File I/O</strong> - PHP supports most commonly used file I/O features like local\nfile and path management, remote resource access using Internet protocols\nlike HTTP and FTP.</li>\n</ul>\n<h2>5. What is variable? How to declare it? Explain with example.</h2>\n<ul>\n<li>PHP variables are nothing but a named storage locations in the memory.</li>\n<li>A variable is a named container in a PHP script in which a data value can be\nstored.</li>\n<li>A variable starts with the ($) sign, followed by the name of the variable.</li>\n<li><strong>Syntax</strong> - $var</li>\n</ul>\n<pre><code class=\"language-php\">$var = &quot;Hello World&quot;;\necho $var;\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>6. Explain constants in PHP with example.</h2>\n<ul>\n<li>A PHP script is executed on the server, and the plain HTML result is sent\nback to the browser.</li>\n<li>A PHP script can be placed anywhere in the document. A PHP programming script\nstarts with <code>&lt;?php</code> and ends with <code>?&gt;</code>.</li>\n<li>The default file extension for PHP files is “.php”.</li>\n<li>A PHP file normally contains HTML tags and some PHP scripting code.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?phh\n  $var = &quot;Hello World&quot;\n  echo $var;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>7. What are the decision statements used by PHP?</h2>\n<h3><code>if</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$x = -12;\n\nif ($x &gt; 0) {\n  echo &quot;The number is positive&quot;;\n}\n\nelse{\n  echo &quot;The number is negative&quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>The number is negative\n</code></pre>\n<h3><code>if else</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$x = &quot;August&quot;;\n\nif ($x == &quot;January&quot;) {\n  echo &quot;Happy Republic Day&quot;;\n} elseif ($x == &quot;August&quot;) {\n  echo &quot;Happy Independence Day!!!&quot;;\n} else {\n  echo &quot;Nothing to show&quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Happy Independence Day!!!\n</code></pre>\n<h3>Nested <code>if</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$a = 10;\n$b = 20;\n\nif ($a == 10) {\n  if ($b == $20) {\n      echo &quot;The addiotion is: &quot;.($a + b);\n  }\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>The addition is 30\n</code></pre>\n<h3><code>switch case</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$n = &quot;Monday&quot;;\n\nswitch($n) {\n  case &quot;Monday&quot;:\n    echo &quot;Its Monday&quot;;\n    break;\n  case &quot;Tuesday&quot;:\n    echo &quot;Its Tuesday&quot;;\n    break;\n  case &quot;Wednesday&quot;:\n    echo &quot;Its Wednesday&quot;;\n    break;\n  case &quot;Thuesday&quot;:\n    echo &quot;Its Thuesday&quot;;\n    break;\n  case &quot;Friday&quot;:\n    echo &quot;Its Friday&quot;;\n    break;\n  case &quot;Saturday&quot;:\n    echo &quot;Its Saturday&quot;;\n    break;\n  case &quot;Sunday&quot;:\n    echo &quot;Its Suday&quot;;\n    break;\n  default:\n    echo &quot;Doesn't exist&quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Its Monday\n</code></pre>\n<h2>8. Describe loops in PHP.</h2>\n<h3><code>while</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$num = 0;\n\nwhile ($num &lt;= 10) {\n  echo $num;\n  $num++;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>012345678910\n</code></pre>\n<h3><code>do while</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$x = 1;\n\ndo {\n  echo &quot;The number is: $x &lt;br&gt;&quot;;\n  $x++;\n} while ($x &lt;= 5);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>The number is: 1\nThe number is: 2\nThe number is: 3\nThe number is: 4\nThe number is: 5\n</code></pre>\n<h3><code>for</code> loop</h3>\n<pre><code class=\"language-php\">&lt;?php\nfor ($i = 1; $i &lt;= 10; $i++) {\n  echo $i.&quot; &quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>1 2 3 4 5 6 7 8 9 10\n</code></pre>\n<h2>10. Define the term expressions with example.</h2>\n<ul>\n<li>An expression is a piece of code that evaluates to a value.</li>\n<li>A value a number, a string of text, or a Boolean.</li>\n<li>An expression is a combination of values, variables, operators, and functions\nthat results in a value.</li>\n<li>Like <code>$z = $x+$y</code>, where <code>$x + $y</code> is the expression.</li>\n</ul>\n<h2>11. Describe data types in PHP in detail.</h2>\n<ul>\n<li>A data type is defined as, “a set of values and the allowable operations on\nthose values”.</li>\n<li>The data type determines the operations that we can perform on it.</li>\n<li>PHP supports eight primitive types:\n<ul>\n<li>Four Scalar Types:\n<ul>\n<li><strong>Integer</strong> - The integer data type is used to specify a numeric value.</li>\n<li><strong>Float</strong> - Floating point numbers are real numbers, representing numeric\nvalues with decimal digits.</li>\n<li><strong>String</strong> - A string is a sequence of characters where a character is\nthe same as a byte.</li>\n<li><strong>Boolean</strong> - .Boolean value can be either TRUE value or FALSE value.</li>\n</ul>\n</li>\n<li>Two Compound Types:\n<ul>\n<li><strong>Array</strong> - An array stores group of values under single variable name.</li>\n<li><strong>Object</strong> - PHP supports Object Oriented Programming (OOP).</li>\n</ul>\n</li>\n<li>Two Special Types:\n<ul>\n<li><strong>Resource</strong> - The resource is a special PHP data type that refers to\nexternal resource (e.g. file, image etc.).</li>\n<li><strong>Null</strong> - The null value represents a variable that has no value.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>12. Explain variable scope in PHP.</h2>\n<ul>\n<li>Scope of variable is an area or part of program in which it is\naccessible/visible.</li>\n<li>There are two type of scope in PHP:\n<ul>\n<li><strong>Local Scope</strong> - A variable which is declared inside the function is\ncalled as local variable.</li>\n<li><strong>Global Scope</strong> - Variables declared outside function are by default\nglobal variables and can accessed from any part of program.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$a = &quot;Hello&quot; // Global Scope\n\nfunction func() {\n  $b = &quot;World&quot;; // Local scope\n}\n</code></pre>\n<h2>13. Write the difference between break and continue statement of PHP with example.</h2>\n<h3><code>break</code></h3>\n<ul>\n<li>You have already seen the break statement used in an earlier chapter of this\ntutorial. It was used to “jump out” of a switch statement.</li>\n<li>The break statement can also be used to jump out of a loop.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nfor ($x = 0; $x &lt; 10; $x++) {\n  if ($x == 4) {\n    break;\n  }\n  echo $x.&quot; &quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>0 1 2 3\n</code></pre>\n<h3><code>continue</code></h3>\n<ul>\n<li>The continue statement breaks one iteration (in the loop), if a specified\ncondition occurs, and continues with the next iteration in the loop.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nfor ($x = 0; $x &lt; 10; $x++) {\n  if ($x == 4) {\n    continue;\n  }\n  echo $x.&quot; &quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>0 1 2 3 5 6 7 8 9\n</code></pre>\n<h2>16. Find output:</h2>\n<pre><code class=\"language-php\">&lt;?php\n  $a= &quot;9 Lives.&quot; -1;\n  var_dump($a);\n?&gt;\n</code></pre>\n<h2>17. Find the output.</h2>\n<pre><code class=\"language-php\">&lt;?php\n  $str = &quot;welcome&quot;;\n  echo &quot;You are $str&quot;;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>You are welcome\n</code></pre>\n<h2>18. Write program to find a area of rectangle.</h2>\n<pre><code class=\"language-php\">&lt;?php\n $length = 14;\n $width = 12;\n echo &quot;area of rectangle is $length * $width= &quot; . ($length * $width) . &quot;&lt;br /&gt;&quot;;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>area of rectangle is 14 * 12= 168\n</code></pre>\n<h1>2. Arrays, Function and Graphics</h1>\n<h2>2. How to create an array? Explain with example.</h2>\n<ul>\n<li>An array is a special variable, which can hold more than one value at a time.</li>\n<li>To create array we use <code>array()</code> function.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$array = array(&quot;Hello&quot;, &quot;World&quot;);\nprint_r($array);\n</code></pre>\n<p>O/P</p>\n<pre><code>Array ( [0] =&gt; &quot;Hello&quot;, [1] =&gt; &quot;World&quot; )\n</code></pre>\n<h2>3. What is string?</h2>\n<ul>\n<li>A string is collection of characters.</li>\n<li>A string is series of characters, where a character is the same as a byte.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$string = &quot;Hello World&quot;;\n?&gt;\n</code></pre>\n<h2>4. What is function?</h2>\n<ul>\n<li>A function is a block of statements that can be used repeatedly in a program.</li>\n<li>A function will be executed by a call to the function.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nfunction func() {\n  echo &quot;Hello World&quot;;\n}\nfunc();\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>5. How to extract data from array? Explain with example.</h2>\n<ul>\n<li>The extract() function imports variables into the local symbol table from an\narray.</li>\n<li>This function uses array keys as variable names and values as variable\nvalues. For each element it will create a variable in the current symbol\ntable.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$color[&quot;red&quot;] = &quot;#rrr&quot;;\nextract($color);\necho $red;\n</code></pre>\n<p>O/P</p>\n<pre><code>#rrr\n</code></pre>\n<h2>6. Enlist types of arrays. Describe with example.</h2>\n<h3>Indexed array</h3>\n<p>Indexed Arrays are arrays in which the elements are ordered based on index.</p>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;);\necho &quot;My fav color is: &quot;.$a[0];\n</code></pre>\n<p>O/P</p>\n<pre><code>My fav color is: Red\n</code></pre>\n<h3>Associative Arrays</h3>\n<p>Associative arrays are arrays that use named keys that you assign to them.</p>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(&quot;Red&quot;=&gt;1, &quot;Blue&quot;=&gt;2, &quot;Green&quot;=&gt;3);\necho $a[&quot;Red&quot;].$a[&quot;Blue&quot;],$a[&quot;Green&quot;];\n</code></pre>\n<p>O/P</p>\n<pre><code>123\n</code></pre>\n<h3>Multidimensional array</h3>\n<p>A multidimensional array is an array containing one or more arrays.</p>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(array(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;));\necho &quot;My fav color is: &quot;.$a[0][1];\n</code></pre>\n<p>O/P</p>\n<pre><code>My fav color is: Blue\n</code></pre>\n<h2>8. How to add image in PHP? Explain with example.</h2>\n<pre><code class=\"language-php\">&lt;?php\n$image = imagecreatetruecolor(500, 300);\nimagefilledrectangle($image, 20, 20, 480, 280);\nheader(&quot;Content-type: image/png&quot;);\nimagepng($image);\n?&gt;\n</code></pre>\n<h2>14. With the help of example describe traversing of array.</h2>\n<p>Traversing an array means to visit each and every element of array using a\nlooping structure and iterator functions.</p>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(1, 2, 3, 4, 5);\nforeach ($a as $n) {\n  echo $n;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>12345\n</code></pre>\n<h2>16. Which operations performed on string in PHP?</h2>\n<ul>\n<li><strong>strrev()</strong> - Reverses a string.</li>\n<li><strong>strpos()</strong> - Returns the position of the first occurrence of a string.</li>\n<li><strong>strrpos()</strong> - Finds the position of the last occurrence of a string.</li>\n<li><strong>str_replace()</strong> - Replaces some characters in a string.</li>\n<li><strong>ucwords()</strong> - Converts the first character of each word in a string to\nuppercase.</li>\n<li><strong>strtoupper()</strong> - Converts a string to uppercase letters.</li>\n<li><strong>strtolower()</strong> - Converts a string to lowercase letters.</li>\n<li><strong>strcmp()</strong> - Compares two strings.</li>\n<li><strong>str_word_count()</strong> - Count the number of words in a string.</li>\n<li><strong>strlen()</strong> - Returns the length of a string.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nstrrev(&quot;Hello World&quot;);\nstrpos(&quot;Hello World&quot;, &quot;Hello&quot;);\nstrrpos(&quot;Hello World&quot;, &quot;Hello&quot;);\nstr_replace(&quot;Hello&quot;, &quot;Bye&quot;, &quot;Hello World&quot;);\nucwords(&quot;hello world&quot;);\nstrtoupper(&quot;Hello World&quot;);\nstrtolower(&quot;Hello World&quot;);\nstrcmp(&quot;Hello World&quot;, &quot;Hello World&quot;);\nstr_word_count(&quot;Hello World&quot;);\nstrlen(&quot;Hello World&quot;);\n</code></pre>\n<p>O/P</p>\n<pre><code>dlroW olleH\n0\n0\nBye World\nHello World\nHELLO WORLD\nhello world\n0\n2\n11\n</code></pre>\n<h2>18. Explain the following types of functions with example:</h2>\n<h3>(i) User defined functions</h3>\n<p>A function is a block of statements that can be used repeatedly in a program.</p>\n<pre><code class=\"language-php\">&lt;?php\nfunction func() {\n  echo &quot;Hello World&quot;;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h3>(ii) Variable function</h3>\n<p>If a variable name has parentheses appended to it, PHP will look for a function\nwith the same name as whatever the variable evaluates</p>\n<pre><code class=\"language-php\">&lt;?php\nfunction func() {\n  echo &quot;Hello World&quot;;\n}\n\n$f = &quot;func&quot;;\n$f();\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h3>(iii) Anonymous function.</h3>\n<p>Anonymous function is a function without any user defined name.</p>\n<pre><code class=\"language-php\">&lt;?php\n$func = function () { echo &quot;Hello World&quot;; };\n$func();\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>18. How to create PDF in PHP? Describe with example.</h2>\n<pre><code class=\"language-php\">&lt;?php\nrequire('fpdf.php');\n$pdf = new FPDF();\n$pdf-&gt;AddPage();\n$pdf-&gt;SetFont('Arial', 'B', 16);\n$pdf-&gt;Cell(40, 10, &quot;Hello World&quot;);\n$pdf-&gt;Output();\n?&gt;\n</code></pre>\n<h2>19. How to scaling an image in PHP?</h2>\n<pre><code class=\"language-php\">&lt;?php\n$image = imagecreatefrompng(&quot;image.png&quot;);\n$img = imagescale($image, 500, 500);\nheader(&quot;Content-type: image/png&quot;);\nimagepng($img);\n</code></pre>\n<h2>20. Explain array_flip() function with example.</h2>\n<ul>\n<li>The array_flip() function flips/exchanges all keys with their associated\nvalues in an array.</li>\n<li><strong>Syntax</strong> - <code>array_flip($array)</code></li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(&quot;Hello&quot;, &quot;World&quot;);\nprint_r(array_flip($a));\n</code></pre>\n<p>O/P</p>\n<pre><code>Array ( [Hello] =&gt; 0, [World] =&gt; 1 )\n</code></pre>\n<h1>3. Apply Object Oriented Concepts in PHP</h1>\n<h2>1. What is OOP?</h2>\n<ul>\n<li>In object oriented programming, everything will be around the objects and\nclass.</li>\n<li>By using OOP in PHP we can create modular web application.</li>\n<li>By using OOP in PHP we can perform any activity in the object model structure.</li>\n<li>OPP helps in building complex, reusable web applications.</li>\n<li>Object Oriented is an approach to software development that models\napplication around real world objects such as employees, cars, bank accounts,\netc.</li>\n<li>A class defines the properties and methods of a real world object.</li>\n<li>An object is an occurrence of a class.</li>\n</ul>\n<h2>2. What is object?</h2>\n<ul>\n<li>An object is an instance or occurrence of a class.</li>\n<li>Anything in the world is an object like laptop, books, car etc. even object\nhas two thing properties and behaviors.</li>\n<li>The data associated with an object are called its properties.</li>\n<li>The functions associated with an object are called its methods.</li>\n<li>We can group similar objects with the same characteristics and behaviors in\ninto one class.</li>\n</ul>\n<h2>5. What is inheritance?</h2>\n<ul>\n<li>The old class is the base class, also called as parent class or super class,\nand the new class is the derived class also called as child class or sub\nclass.</li>\n<li>The derived class has its own variables and methods plus variables and\nmethods from the base class.</li>\n<li>The <code>extends</code> keyword is used for the inheritance.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Class1 {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Class2 extends Class1 {\n  function echo() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$o = new Class2;\n$o-&gt;func();\n$o-&gt;echo();\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\nBye World\n</code></pre>\n<h2>6. Describe method overloading with example.</h2>\n<p>If the derived class is having the same method name as the base class then the method in the derived class takes precedence over or overrides the base class method.</p>\n<pre><code class=\"language-php\">&lt;?php\nclass First {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Second extends First {\n  function func() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$o = new Second;\n$o-&gt;func();\n</code></pre>\n<h2>7. Explain sleep and wakeup functions?</h2>\n<ul>\n<li>These functions are used to notify objects that they are being serialized or\nunserialised.</li>\n</ul>\n<h3><code>__sleep()</code></h3>\n<ul>\n<li>serialize() checks if our class has a function with the magic name sleep().</li>\n<li>If so, that function is executed prior (i.e. just before) to any\nserialization.</li>\n</ul>\n<h3><code>__wakeup()</code></h3>\n<ul>\n<li>unserialize() checks for the presence of a function with the magic name ___\nwakeup().</li>\n<li>If present, this function can reconstruct any resources that the object may\nhave.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  function __sleep() {\n    $this-&gt;name = &quot;Jonney&quot;;\n    echo &quot;Obj is serialize()&quot;;\n    return array(&quot;name&quot;);\n  }\n\n  function __wakeup() {\n    echo &quot;Obj is unserialize()&quot;;\n  }\n}\n\n$o = new Obj;\n$s = serialize($o);\nunserialize($s);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Obj is serialize()\nObj is unserialize()\n</code></pre>\n<h2><code>__call</code></h2>\n<ul>\n<li>The __call() method is invoked automatically when a non-existing method or\ninaccessible method is called.</li>\n<li>The __call() method accepts two arguments:\n<ul>\n<li>$name is the name of the method that is being called by the object.</li>\n<li>$arguments is an array of arguments passed to the method call.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  function __call($method, $parameters) {\n    print_r($method);\n    print_r($parameters);\n  }\n}\n\n$o = new Obj;\n$o-&gt;hello(&quot;World&quot;);\n</code></pre>\n<p>O/P</p>\n<pre><code>hello\nArray ( [0] =&gt; &quot;World&quot; )\n</code></pre>\n<h2>8. What serialization in PHP?</h2>\n<ul>\n<li>Serialization of data means converting it into a string of bytes in such a\nway that you can produce the original data again from the string via a\nprocess as unserialization.</li>\n<li>After you have the ability to serialize/unserialize, you can store your\nserialized string anywhere and recreate a copy of the data again when needed.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\necho serialize(array(&quot;Red&quot;));\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>a:1:{i:0;s:3:&quot;Red&quot;;}\n</code></pre>\n<ul>\n<li>O/P means:\n<ul>\n<li>a:1 - <strong>a</strong>rray - There are <strong>1</strong> array.</li>\n<li>i:0 - <strong>i</strong>tem - This is <strong>0</strong>th item.</li>\n<li>s:3 - <strong>s</strong>tring - There are <strong>3</strong> string in <strong>“Red”</strong>.</li>\n</ul>\n</li>\n</ul>\n<h2>10. Define method overriding.</h2>\n<ul>\n<li>In function overriding, both parent and child classes should have same\nfunction name with and number of arguments.</li>\n<li>It is used to replace parent method in child class.</li>\n<li>The purpose of overriding is to change the behavior of parent class method.</li>\n<li>The two methods with the same name and same parameter is called overriding.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass First {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Second extends First {\n  function func() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$f = new First;\n$s = new Second;\n$f-&gt;func();\n$s-&gt;func();\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\nBye World\n</code></pre>\n<h2>12. What is object cloning? Describe with example.</h2>\n<ul>\n<li>Object cloning is the process in PHP to create a copy of an object.</li>\n<li>An object copy is created by using the clone keyword when the object is\ncloned PHP will perform Shallow copy of all the object properties and\nproperties that are referenced to their variables will remain references.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  public $name;\n}\n\n$o = new Obj;\n$c = clone $o;\n\n$o-&gt;name = &quot;Jonney&quot;;\n$c-&gt;name = &quot;Jone&quot;;\n\necho &quot;Origenal: &quot;.$o-&gt;name.&quot;, Clone: &quot;.$c-&gt;name;\n?&gt;\n</code></pre>\n<h2>13. Define the terms:</h2>\n<h3>(i) Object</h3>\n<p>Objects are the things you create out of a class.</p>\n<h3>(ii) Class</h3>\n<p>A class is what you use to define the properties, methods and behavior of objects.</p>\n<h3>(iii) Inheritance</h3>\n<ul>\n<li>The old class is the base class, also called as parent class or super class,\nand the new class is the derived class also called as child class or sub\nclass.</li>\n</ul>\n<h3>(iv) Constructor.</h3>\n<ul>\n<li>When we create a new object it is useful to initialize its properties.</li>\n<li>PHP provides us with a special method to help initialize an object’s\nproperties called a constructor.</li>\n</ul>\n<h2>16. Differentiate between constructor and destructor.</h2>\n<ul>\n<li><strong>constructor</strong> - When we create a new object it is useful to initialize its\nproperties.</li>\n<li><strong>destructor</strong> - The destructor method will be called as soon as there are no\nother references to a particular object.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  function __construct() {\n    echo &quot;Class created&quot;;\n  }\n\n  function __destruct() {\n    echo &quot;Class destroyed&quot;;\n  }\n}\n\n$o = new Obj;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Class Created\nClass Destroyed\n</code></pre>\n<h2>17. Compare object and class.</h2>\n<ul>\n<li>A class is what you use to define the properties, methods and behavior of\nobjects.</li>\n<li>Objects are the things you create out of a class.</li>\n</ul>\n<h2>18. How to examine classes in introspection? Explain with example.</h2>\n<ul>\n<li>PHP Introspection is the ability of a program to examine an object’s\ncharacteristics such as its name, parent class (if any), properties and\nmethods.</li>\n<li>Introspection in PHP offers a useful Ability to examine classes’ interfaces\nproperties methods. With introspection we can write code that operates on any\nobject or class.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {}\n\nclass Obj2 extends Obj {\n  public $hello = &quot;world&quot;;\n  function func() {}\n}\n$o = new Obj2;\n\nif (class_exists('Obj2')) {\n  echo &quot;Class exists&quot;;\n}\nif (is_object($o)) {\n  echo &quot;Is object&quot;;\n}\n\nprint_r(get_class($o));\nprint_r(get_class_methods($o));\nprint_r(get_class_vars('Obj'));\nprint_r(get_parent_class($o));\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>class exists\nIs object\nObj2\nArray ( [0] =&gt; func )\nArray ( [hello] =&gt; world )\nObj\n</code></pre>\n<h2>Examining an Object</h2>\n<ul>\n<li><code>is_object()</code> - Checks if an object.</li>\n<li><code>get_class()</code> - Return object’s class name.</li>\n<li><code>method_exists()</code> - Checks if method exists.</li>\n<li><code>class_exists()</code> - Checks if class exists.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\n$o = new Obj;\necho is_object($o);\necho get_class($o);\necho method_exists($o, 'func');\necho class_exists('Obj');\n</code></pre>\n<p>O/P</p>\n<pre><code>1\nObj\n1\n1\n</code></pre>\n<h1>4. Creating and Validating forms</h1>\n<h2>1. What is form? How to create it?</h2>\n<h3>What is form?</h3>\n<ul>\n<li>Forms are essential parts in web development. Forms are used to get input from\nthe user and submi it to the web server for processing.</li>\n<li>Forms are used to communicate between users and the server.</li>\n</ul>\n<h3>How to create it?</h3>\n<ul>\n<li>A document that containing blank fields, that the user can fill the data or\nuser can select the data. It is known as Form.</li>\n<li>Generally, the data will store in the database. We can create and use forms\nin PHP. To get form data, we need to use PHP superglobals <code>$_GET</code>and $_POST</li>\n<li>The form request may be get or post. To retrieve data from get request, we\nneed to use <code>$_GET</code>, for post request <code>$_POST</code></li>\n</ul>\n<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_SELF_PHP ?&gt;&quot; method=&quot;post&quot;&gt;\n  &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n  &lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif (isset($_POST[&quot;name&quot;])) {\n  echo &quot;Your name is: &quot;.$_POST[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n<h2>2. What is form control?</h2>\n<ul>\n<li>There are different types of form controls that we can use to collect data\nusing form namely, Textbox, Checkbox, Radio button, and so on.</li>\n<li><strong>TEXTBOX</strong> - A text input field allows the user to enter a singel text.</li>\n<li><strong>TEXTAREA</strong> - A textarea field is similar a text input field but it allows\nthe user to enter multiple lines of text.</li>\n<li><strong>RADIO BUTTON</strong> - The radio buttons are for single choice from multiple\noptions. All radio buttons in the group have the same name attribute.</li>\n<li><strong>CHECKBOX</strong> - A checkbox field is a simple toggle button. It can be either\nON or OFF. The value attribute should contain the value that will be sent to\nthe server when the checkbox is selected.</li>\n<li><strong>LIST</strong> - There are two type of list:\n<ul>\n<li><strong>Singleline LIST</strong> - The list represents a Windows control to display a\nlist of items to a user. A user can select an item from the list.</li>\n<li><strong>Multiline LIST</strong> - A multi-select list allows the user to select multiple\nitems. To turn a normal list into a multi-select list, add the attribute\nmultiple with a value of “multiple” to the select element.</li>\n</ul>\n</li>\n</ul>\n<h2>3. Write short note on: Server role.</h2>\n<ul>\n<li>PHP is a server-side scripting language.</li>\n<li>Using PHP we can create dynamic web sites.</li>\n<li>That means its processing happens in the server by consuming server’s\nresources and sends only the output to the client.</li>\n</ul>\n<h2>5. When to use GET and POST method.</h2>\n<h3>GET</h3>\n<ul>\n<li>It sends the encoded user information appended to the page request (to the\nURL).</li>\n<li>The page and the encoded information are separated by the ? character.</li>\n<li>The GET method produces a long string the appears in our server logs, in the\nbrowser’ location box.</li>\n<li>The GET method is restricted to send up to 1024 characters only.</li>\n<li>Never use GET method if we have password or other sensitive information.</li>\n<li>GET cannot be used to send binary data to the server.</li>\n<li>The php provides $_GET assoiative array to a access all the sent information\nusing GET method.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;GET&quot;&gt;\n\tName: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ($_GET[&quot;name&quot;]) {\n\techo $_GET[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n<li>Output:<pre><code>Name: Joey\nSubmit\n\nJoey\n</code></pre>\n</li>\n</ul>\n<h3>POST</h3>\n<ul>\n<li>It transfers information via HTTP header, not throought the URL.</li>\n<li>The POST method does not have any restriction on data size.</li>\n<li>The POST method can be used to send ASCII as well as binary data.</li>\n<li>The data sent by POST  method goes through HTTP header, so security depends on\nHTTP protocol.</li>\n<li>By using secure HTTP, we can make sure that our information is secure.</li>\n<li>The PHP provides $_POST associative array to access all the sent information\nusing POST method.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\tName: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ($_POST[&quot;name&quot;]) {\n\techo $_POST[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n<li>Output<pre><code>Name: Joey\nSubmit\n\nJoey\n</code></pre>\n</li>\n</ul>\n<h2>7. What is cookie? How to create it? Explain with example.</h2>\n<h3>What is cookie?</h3>\n<ul>\n<li>Cookie save the data in browser, so next time refresh the browser it will not\ndelete from browser.</li>\n<li>Cookie is used to identify the user.</li>\n<li>A cookie is a small file that server embeds to user’s computer.</li>\n<li>Each time the same computer requests a page with a browser, it will send the\ncookie too.</li>\n</ul>\n<h3>How to create it?</h3>\n<ul>\n<li>Use <code>setcookie</code> function to create cookie.</li>\n<li>Syntex:<pre><code>setcookie($cookie_name, $cookie_value, $time, $location)\n</code></pre>\n</li>\n</ul>\n<h3>Example</h3>\n<pre><code class=\"language-php\">&lt;?php\nsetcookie(&quot;name&quot;, &quot;Jonney&quot;, time() + (86400 * 30), &quot;/&quot;);\nif (isset($_COOKIE[&quot;name&quot;])) {\n  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Name: Jonney\n</code></pre>\n<h2>8. What is session? Explain with example.</h2>\n<ul>\n<li>A session is a way to store information in variables to be used across\nmultiple pages.</li>\n<li>Sessions allow us to store data on the web server that associated with a\nsession ID.</li>\n<li>Once we create a session, PHP sends a cookie that contains the session ID to\nthe web browser.</li>\n<li>A session is started with the session_start() function.</li>\n<li>The session_start() function first checks if a session is already started and\nif none is started then it starts one.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nsession_start()\n?&gt;\n&lt;?php\n$_SESSION[&quot;name&quot;] = &quot;Jonney&quot;;\necho &quot;Name: &quot;.$_SESSION[&quot;name&quot;];\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Name: Jonney\n</code></pre>\n<h2>9. How we can get the cookie values and destroy the cookies?</h2>\n<h3>To get cookie value.</h3>\n<pre><code class=\"language-php\">&lt;?php\nsetcookie(&quot;name&quot;, &quot;Jonney&quot;, time() + (83400 * 30), &quot;/&quot;);\n\nif ( isset($_COOKIE[&quot;name&quot;]) ) {\n  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n<h3>To destroy the cookie.</h3>\n<pre><code class=\"language-php\">&lt;?php\nsetcookie(&quot;name&quot;, &quot;&quot;, time() - 3600, &quot;/&quot;);\n?&gt;\n</code></pre>\n<h2>11. What is form validation? Explain with suitable example.</h2>\n<ul>\n<li>For validating a web page we use preg_match() function.</li>\n<li>The preg_match() function searches string for pattern, returning true if\npattern exists, and false otherwise.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n  &lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;\n  &lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ( isset($_POST[&quot;name&quot;]) ) {\n  if ( !preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;]) ) {\n    echo &quot;Only Words and Whitespaces are allowed.&quot;;\n  }\n}\n?&gt;\n</code></pre>\n<h2>14. How to send e-mail? Describe with example.</h2>\n<ul>\n<li><code>mail()</code> function is useful to sending the mail.</li>\n<li>Syntex:<pre><code class=\"language-php\">mail($to, $subject, $message, $header, $parametes);\n</code></pre>\n</li>\n<li><code>mail()</code> function parametes:\n<ul>\n<li><strong>to</strong> - represents the address of receiver.</li>\n<li><strong>subject</strong> - it specifies the subject of mail.</li>\n<li><strong>message</strong> - it defines the message which is to be sent.</li>\n<li><strong>headers</strong> - it is optional and specifies the additional headers like Cc, Bcc.</li>\n<li><strong>parameters</strong> - it is optional and specifies the additional parameters.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$sent = mail(&quot;AnzenKodo@altmail.com&quot;, &quot;Title&quot;, &quot;Message&quot;);\n\nif (!$sent) {\n  echo &quot;Message is not sent.&quot;;\n} else {\n  echo &quot;Message is sent.&quot;;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Message is sent.\n</code></pre>\n<h1>5. Database Operations</h1>\n<h2>1. What is database?</h2>\n<ul>\n<li>A database is a collection of related data.</li>\n<li>A database is a collection of information that is organized so that it can\neasily be accessed, managed and updated.</li>\n<li>With PHP, we can connect to and manipulate databases.</li>\n</ul>\n<h2>2. What is DBMS?</h2>\n<ul>\n<li>A DataBase Management System (DBMS) is system software for creating and\nmanaging databases.</li>\n<li>The DBMS provides users and programmers with a systematic way to create,\nretrieve, update and manage data.</li>\n</ul>\n<h2>3. What is MySQL? How it is used in PHP?</h2>\n<ul>\n<li>MySQL is an open-source relational database management system (RDBMS).</li>\n<li>It is the most popular database system used with PHP.</li>\n<li>Using my sql:<pre><code class=\"language-php\">&lt;?php\n  // Creating connection\n  $conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\n\n  // Checking connection\n  if (!$conn) {\n      die(&quot;Connection failed.&quot;);\n  }\n  echo &quot;Connected successfully&quot;;\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h2>4. How to create and delete a database in MySQL?</h2>\n<ul>\n<li>We can create a MySQL database by using MySQL Command Line Client.</li>\n<li>Open the MySQL console and write down password, if we set one while\ninstallation.</li>\n<li>We will get the following:\n<ul>\n<li>To create the data base enter <code>CREATE DATABASE database_name</code></li>\n<li>To check the database is crated enter <code>SHOW DATABASES</code></li>\n</ul>\n</li>\n<li>Creating database through php:<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\n\nif (!$conn) {\n  die(&quot;Can't connect to MySQL &quot;);\n}\n\n$sql = &quot;CRATE DATABASE emp&quot;;\n\nif (!mysqli_query($conn, $sql)) {\n  die(&quot;Can't create database &quot;.mysqli_error($conn);\n}\n\necho &quot;Created database &lt;br/&gt;&quot;;\n?&gt;\n</code></pre>\nO/P<pre><code>Created database\n</code></pre>\n</li>\n</ul>\n<h2>5. Explain mysqli_connect() function with example.</h2>\n<ul>\n<li>The mysqli_connect() function is used to connect with MySQL database.</li>\n<li>It returns resource if connection is established or null.</li>\n<li>Syntax: <code>mysqli_connect(server, username, password, dbname, port, socket)</code></li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\n\nif (!$conn) {\n  echo &quot;Can't connect to database.&quot;;\n  exit();\n} else {\n  echo &quot;Databse is connected.&quot;;\n}\nmysqli_close($conn);\n</code></pre>\n</li>\n</ul>\n<h2>7. Write a program to create an employee table to perform insert, delete and update operations.</h2>\n<pre><code class=\"language-php\">&lt;?php\n// Connect MySQL\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n  echo &quot;Error: &quot;.mysqli_error($conn);\n}\n\n// Create table\n$table = &quot;CREATE TABLE employee(id INT(4), name VARCHAR(22), salary INT(4))&quot;;\nif (!mysqli_query($conn, $table)) {\n  echo &quot;Can't create table.&quot;;\n}\necho &quot;Created table&lt;br/&gt;&quot;;\n\n// Insert data\n$insert = &quot;INSERT INTO employee(id, name, salary) VALUES (1, 'Sam', 3200), (2, 'Jonney', 4500), (3, 'Jone', 2000)&quot;;\nif (!mysqli_query($conn, $insert)) {\n  echo &quot;Can't insert data.&quot;;\n}\n\n// Dalete data\n$delete = &quot;DELETE FROM employee WHERE id=2&quot;;\nif (!mysqli_query($conn, $delete)) {\n  echo &quot;Can't delete data.&quot;;\n}\n\n// Retrive data\n$retrive = &quot;SELECT * FROM employee&quot;;\n$result = mysqli_query($conn, $retrive);\n\nif (mysqli_num_rows($result)) {\n  while ($row = mysqli_fetch_assoc($result)) {\n    echo &quot;Name: &quot;.$row['name'].&quot;, Salary: &quot;.$row['salary'].&quot;, ID: &quot;.$row['id'].&quot;&lt;/br&gt;&quot;;\n  }\n}\n?&gt;\n</code></pre>",
      "date_published": "2022-12-20T20:07:22.703Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=Notes&description=1.%20Expressions%20and%20Control%20Statements%20in%20PHP%201.%20What%20is%20web%20application?%20%20A%20Web%20application%20is%20a%20computer%20software%20or%20program%20that%20performs%20some%20specific%20tasks%20at%20its%20client%20by%20using%20a%20Web%20browser.%20The%20Web-based%20applications%20are%20also%20known%20as%20Web%20apps.%20Web%20applications%20are%20usuall&right_meta=AK%23Notes&background_color=%23bd8bf2"
    }
  ]
}