{
  "version": "https://jsonfeed.org/version/1",
  "title": "AK#Notes",
  "home_page_url": "https://anzenkodo.github.io/notes",
  "feed_url": "https://anzenkodo.github.io/notes/feed.json",
  "description": "This my personal website where I post my notes about thing that I have learn.",
  "favicon": "https://anzenkodo.github.io/notes/favicon.png",
  "icon": "https://anzenkodo.github.io/notes/favicon.png",
  "author": {
    "name": "Axel",
    "url": "https://AnzenKodo.github.io/"
  },
  "items": [
    {
      "id": "https://anzenkodo.github.io/notes/",
      "url": "https://anzenkodo.github.io/notes/",
      "title": "Home",
      "content_html": "<p>This my personal website where I post my notes about thing that I have learn.</p>\n<h2>Features</h2>\n<ul>\n<li>Easy to:\n<ul>\n<li>Setup</li>\n<li>Configure</li>\n<li>Write</li>\n</ul>\n</li>\n<li>Supports:\n<ul>\n<li>Tags</li>\n<li>Search (Power by <a href=\"https://duckduckgo.com/\">DuckDuckGo</a>)</li>\n<li>Canonical</li>\n<li><a href=\"https://ogp.me/\">Open Graph</a></li>\n<li>Analytics</li>\n<li><a href=\"https://pages.github.com/\">GitHub Pages</a></li>\n</ul>\n</li>\n<li>Auto generate:\n<ul>\n<li>GitHub Pages Actions file</li>\n<li>Favicon</li>\n<li>Sitemap</li>\n<li>404 page</li>\n<li>CSS</li>\n<li><code>mainfest.json</code> file</li>\n<li>Feeds\n<ul>\n<li>RSS</li>\n<li>JSON</li>\n<li>Atom</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>No Client side JavaScript</li>\n<li>Minified HTML &amp; Inline CSS</li>\n<li>Lightweight</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installing</h3>\n<ul>\n<li>Download deno from <a href=\"https://deno.land/\">https://deno.land/</a> and install it.</li>\n<li>After installing deno run following commands.</li>\n</ul>\n<pre><code class=\"language-sh\"># Install the dblog\ndeno run https://deno.land/x/dblog/install.js # Add deno to path, if you didn't already.\n\n# See all the options that are available\ndblog --help\n\n# Setup the your blog (Skip this if already your blog setup)\ndblog --setup\n\n# Make your blog and Run on localhost\ndblog --serve\n</code></pre>\n<h3>Update</h3>\n<p>To update dblog, rerun the installation command.</p>\n<pre><code class=\"language-sh\">deno run https://deno.land/x/dblog/install.js\n</code></pre>\n<h3>Run dblog without installing dblog</h3>\n<pre><code class=\"language-sh\">deno run -A https://deno.land/x/dblog/mod.js --help\n</code></pre>\n<h2>Live Demo &amp; Folder</h2>\n<ul>\n<li><a href=\"https://anzenkodo.github.io/dblog\">Live Demo</a></li>\n<li><a href=\"https://github.com/AnzenKodo/dblog/tree/gh-pages\">Generated Files</a></li>\n</ul>\n<h2>Configuration</h2>\n<p>Place <code>config.json</code> in root folder to edit default configuration. The\n<code>config.json</code> is optional.</p>\n<p><strong>The <code>config.json</code> with default configuration:</strong></p>\n<pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;dblog&quot;,\n  &quot;start_url&quot;: &quot;https://AnzenKodo.github.io/dblog/&quot;,\n  &quot;description&quot;: &quot;dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.&quot;,\n  &quot;email&quot;: &quot;&quot;,\n  &quot;author&quot;: &quot;AnzenKodo&quot;,\n  &quot;posts&quot;: &quot;./posts&quot;,\n  &quot;output&quot;: &quot;./site&quot;,\n  &quot;favicon&quot;: &quot;favicon.svg&quot;,\n  &quot;lang&quot;: &quot;en-US&quot;,\n  &quot;port&quot;: 8000,\n  &quot;background&quot;: &quot;#ffffff&quot;,\n  &quot;foreground&quot;: &quot;#000000&quot;,\n  &quot;theme&quot;: &quot;#01a252&quot;,\n  &quot;footer&quot;: &quot;&lt;p&gt;Made by &lt;a href=\\&quot;https://AnzenKodo.github.io/AnzenKodo\\&quot;&gt;AnzenKodo&lt;/a&gt; under &lt;a href=\\&quot;https://anzenkodo.github.io/dblog/LICENSE\\&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;\\n&quot;,\n  &quot;page404&quot;: &quot;404 Page Not Found, Sorry :(&quot;,\n  &quot;backup&quot;: false,\n  &quot;exclude&quot;: [\n    &quot;config.json&quot;,\n    &quot;backup.json&quot;\n  ],\n  &quot;nav&quot;: {},\n  &quot;head&quot;: &quot;&quot;\n}\n</code></pre>\n<p><strong>Note:</strong> Every option is optional.</p>\n<ul>\n<li><strong>name</strong> - Name of your blog.</li>\n<li><strong>start_url</strong> - Start URL of your site. <em>Example:</em> ‘<a href=\"https://example.com/\">https://example.com/</a>’,\n‘<a href=\"https://blog.example.com/\">https://blog.example.com/</a>’, ‘<a href=\"https://example.com/blog/\">https://example.com/blog/</a>’</li>\n<li><strong>email</strong> - Your email address. This will enable ‘Reply with Email’ button in\nposts.</li>\n<li><strong>author</strong> - Your name or username.</li>\n<li><strong>posts</strong> - Path of posts.</li>\n<li><strong>output</strong> - Folder where your blog build will be placed. <em>Example:</em> ‘./blog’,\n‘…/site/blog’, ‘site/blog’.</li>\n<li><strong>favicon</strong> - <em><strong>Recommended 500x500px</strong></em>. Favicon location. <em>If empty,\ngenerated favicon will be used</em>. <em>Example:</em> ‘./favicon.png’,\n‘./static/favicon.icon’, ‘…/favicon.jpg’.</li>\n<li><strong>lang</strong> - Blog language in ‘RFC 5646’ format. Example: ‘ja’ for Japanese,\n‘sv’ for Swedish, ‘it’ for Italian. See\n<a href=\"https://wikipedia.org/wiki/IETF_language_tag#List_of_common_primary_language_subtags\">List of common primary language subtags in Wikipedia</a></li>\n<li><strong>footer</strong> - Footer of your website. <em>Supports CommonMark Markdown format</em>.\n<em>Example:</em>\n<code>Made by [AnzenKodo](https://AnzenKodo.github.io/AnzenKodo) uder [MIT License](https://anzenkodo.github.io/dblog/LICENSE.html)</code>.</li>\n<li><strong>port</strong> - Port of your blog on localhost. <em>Example</em>: ‘8080’, ‘8300’, ‘8400’.</li>\n<li><strong>background</strong> - Background color in light mode. Becomes foreground color in\nlight mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>\n<li><strong>foreground</strong> - Foreground color in light mode. Becomes background color in\nlight mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>\n<li><strong>theme</strong> - Blog theme color. <em>Example:</em> ‘#0583f2’, ‘#f20544’, ‘#f2b705’.</li>\n<li><strong>page404</strong> - 404 page message. <em>Example:</em> ‘Sorry, page not found :(’.</li>\n<li><strong>backup</strong> - Backup file location. <em>Example:</em> <code>false</code> to don’t generate\n<code>backup.json</code> file, ‘./backup.json’, ‘./site/backup.json’, ‘…/backup.json’.</li>\n<li><strong>exclude</strong> - Exclude files or folder. <em>Example:</em><pre><code class=\"language-json\">&quot;exclude&quot;: [ &quot;.env&quot;, &quot;todo.md&quot;, &quot;drafts&quot; ],\n</code></pre>\n</li>\n<li><strong>nav</strong> - Nav bar item list. Example:<pre><code class=\"language-json\">&quot;nav&quot;: {\n  &quot;about&quot;: &quot;./about.md&quot;,\n  &quot;stie&quot;: &quot;https://anzenkodo.github.io/AnzenKodo&quot;\n}\n</code></pre>\n</li>\n<li><strong>head</strong> - If you analytics or any other tags you want to put on head tag.\n<em>Example:</em>\n<code>&lt;link rel=&quot;preconnect&quot; href=&quot;//www.google-analytics.com&quot; crossorigin=&quot;&quot;&gt;</code>.</li>\n</ul>\n<h2>CLI Options</h2>\n<pre><code class=\"language-sh\">dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.\n\nWebsite: https://anzenkodo.github.io/dblog\nPackage: https://deno.land/x/dblog\nRepo: https://github.com/AnzenKodo/dblog\nDocs: https://anzenkodo.github.io/dblog/posts/dblog-Docs.html\n\nUSAGE:\n  dblog [OPTIONS]\n\nOPTIONS:\n  --serve   Build blog and Start localhost.\n    --noopen  Don't open browser, when starting localhost.\n  --build   Build blog without starting localhost.\n  --setup   Setup new blog.\n  --backup  Restore blog if 'backup.json' file available.\n  --readme  Generate 'README.md' file.\n  --help    Print help information.\n</code></pre>\n<h2>File Options</h2>\n<pre><code>---\ntitle: If empty the file name will be used\ndescription: If empty the first paragraph will be used.\ntags: [ &quot;tag1&quot;, &quot;tag2&quot; ]\ndate: 20/08/2020\ncanonical:\n---\n</code></pre>\n<ul>\n<li><strong>date</strong> - If empty, the file date will be used. <em>Note:</em> The file <code>date</code> might\nnot always right. So always give you own date.</li>\n<li><strong>canonical</strong> - Share content between multiple sites without impacting SEO.\nJust put canonical URL. Know more about\n<a href=\"https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls\">canonical url</a>.</li>\n</ul>\n<h3>If file name start with underscore “_” it will be consider as draft.</h3>\n<p><strong>Example:</strong> <code>posts/_This is draft.md</code></p>\n<h2>Markdown Guide</h2>\n<h3><a href=\"https://commonmark.org/help/\">CommonMark</a> Syntex</h3>\n<h4>Heading</h4>\n<pre><code class=\"language-md\"># H1\n\n## H2\n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n</code></pre>\n<h1>H1</h1>\n<h2>H2</h2>\n<h3>H3</h3>\n<h4>H4</h4>\n<h5>H5</h5>\n<h6>H6</h6>\n<h4>Inline style</h4>\n<pre><code class=\"language-md\">**Bold** _Italic_ ~~Strikethrough~~\n</code></pre>\n<p><strong>Bold</strong> <em>Italic</em> <s>Strikethrough</s></p>\n<h4>Link and Image</h4>\n<pre><code class=\"language-md\">[website](https://anzenkodo.github.io/dblog)\n![Jurassic Deno by Samip Poudel](https://deno.land/images/artwork/jurassicDeno.jpg)\n</code></pre>\n<p><a href=\"https://anzenkodo.github.io/dblog\">website</a>\n<img src=\"https://deno.land/images/artwork/jurassicDeno.jpg\" alt=\"Jurassic Deno by Samip Poudel\"></p>\n<h4>Blockquote</h4>\n<pre><code class=\"language-md\">&gt; 'The road to hell is paved with good intentions' by Abbot Bernard\n</code></pre>\n<blockquote>\n<p>‘The road to hell is paved with good intentions’ by Abbot Bernard</p>\n</blockquote>\n<h4>List</h4>\n<pre><code class=\"language-md\">- List\n  - List\n- List\n\n1. One\n2. Two\n3. Three\n</code></pre>\n<ul>\n<li>List\n<ul>\n<li>List</li>\n</ul>\n</li>\n<li>List</li>\n</ul>\n<ol>\n<li>One</li>\n<li>Two</li>\n<li>Three</li>\n</ol>\n<h4>Horizontal rule</h4>\n<pre><code class=\"language-md\">---\n</code></pre>\n<hr>\n<h4>Code block</h4>\n<div class=\"highlight highlight-source-lisp notranslate position-relative overflow-auto\">\n<pre>\n`Inline code` with backticks\n```js\n  console.log(\"Code Blog in JavaScript\");\n```\n</pre>\n</div>\n<p><code>Inline code</code> with backticks</p>\n<pre><code class=\"language-js\">console.log(&quot;Code Blog in JavaScript&quot;);\n</code></pre>\n<h3>Additional Markdown syntax</h3>\n<h4>Checkbox</h4>\n<pre><code class=\"language-md\">- [ ] Checkbox\n- [x] Checkbox with tick\n</code></pre>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\"> Checkbox</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> Checkbox with tick</label></li>\n</ul>\n<h4>Image with caption</h4>\n<pre><code class=\"language-md\">![Deno](https://deno.land/images/artwork/deno_matrix.png &quot;Matrix by bramaudi&quot;)\n</code></pre>\n<figure data-type=\"image\"><img src=\"https://deno.land/images/artwork/deno_matrix.png\" alt=\"Deno\" loading=\"lazy\" decoding=\"async\"><figcaption>Matrix by bramaudi</figcaption></figure>\n<h4>Footer</h4>\n<pre><code class=\"language-md\">Here is a footnote reference[^1]. [^1]: Here is the footnote.\n</code></pre>\n<p>Here is a footnote reference[^1]. [^1]: Here is the footnote.</p>\n<h4>Additional inline syntax</h4>\n<pre><code class=\"language-md\">~sub~ ^sup^ ==mark== [[kbd]] _underline_ ++insert++ ~~delete~~\n</code></pre>\n<p><sub>sub</sub>\n<sup>sup</sup>\n<mark>mark</mark>\n<kbd>kbd</kbd>\n<u>underline</u>\n<ins>insert</ins>\n<del>delete</del></p>\n<h4>Description list</h4>\n<pre><code class=\"language-md\">: Definition 1 Term 2 with _inline markup_ : Definition 2 Third paragraph of\ndefinition 2.\n</code></pre>\n<dl>\n  <dt>Definition 1</dt>\n  <dd>Term 2 with inline.</dd>\n  <dt>Definition 2</dt>\n  <dd>Third paragraph of definition 2.</dd>\n</dl>\n<h4>Abbreviation</h4>\n<pre><code class=\"language-md\">*[abbr]: Abbreviation\n</code></pre>\n<p><abbr title=\"Abbreviation\">abbr</abbr></p>\n<h4>Table</h4>\n<h5>Normal</h5>\n<pre><code class=\"language-md\">| Syntax    | Description |\n| --------- | ----------- |\n| Header    | Title       |\n| Paragraph | Text        |\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Syntax</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Header</td>\n<td>Title</td>\n</tr>\n<tr>\n<td>Paragraph</td>\n<td>Text</td>\n</tr>\n</tbody>\n</table>\n<h5>Multiline</h5>\n<pre><code class=\"language-md\">| Markdown  | Rendered HTML |\n| --------- | ------------- |\n| _Italic_  | _Italic_      |\n|           |               |\n| - Item 1  | - Item 1      |\n| - Item 2  | - Item 2      |\n| ```python | ```python \\   |\n| .1 + .2   | .1 + .2       |\n</code></pre>\n<table><thead><tr><th>Markdown</th><th>Rendered HTML</th></tr></thead> <tbody>\n  <tr> <td> <pre><code>*Italic* </code></pre> </td> <td> <p><em>Italic</em></p>\n  </td> </tr> <tr> <td> <pre><code>- Item 1 - Item 2</code></pre> </td> <td>\n  <ul> <li>Item 1</li> <li>Item 2</li> </ul> </td> </tr> <tr> <td>\n<pre><code>\n```python\n.1 + .2\n```\n</code></pre> </td> <td> <pre><code class=\"language-python\">.1 + .2\n  </code></pre> </td> </tr> </tbody> </table>\n<h5>Rowspan</h5>\n<pre><code class=\"language-md\">|                       Stage | Direct Products | ATP Yields |\n| --------------------------: | --------------: | ---------: |\n|                  Glycolysis |           2 ATP |            |\n|                          ^^ |          2 NADH |   3--5 ATP |\n|          Pyruvaye oxidation |          2 NADH |      5 ATP |\n|           Citric acid cycle |           2 ATP |            |\n|                          ^^ |          6 NADH |     15 ATP |\n|                          ^^ |         2 FADH2 |      3 ATP |\n|              **30--32** ATP |                 |            |\n| [Net ATP yields per hexose] |                 |            |\n</code></pre>\n<table> <caption id=\"netatpyieldsperhexose\">Net ATP yields per hexose</caption>\n  <thead> <tr> <th align=\"right\">Stage</th> <th align=\"right\">Direct\nProducts</th> <th align=\"right\">ATP Yields</th> </tr> </thead> <tbody> <tr> <td\nalign=\"right\" rowspan=\"2\">Glycolysis</td> <td align=\"right\" colspan=\"2\">2\nATP</td> </tr> <tr> <td align=\"right\">2 NADH</td> <td align=\"right\">3–5\nATP</td> </tr> <tr> <td align=\"right\">Pyruvaye oxidation</td> <td\nalign=\"right\">2 NADH</td> <td align=\"right\">5 ATP</td> </tr> <tr> <td\nalign=\"right\" rowspan=\"3\">Citric acid cycle</td> <td align=\"right\"\ncolspan=\"2\">2 ATP</td> </tr> <tr> <td align=\"right\">6 NADH</td> <td\nalign=\"right\">15 ATP</td> </tr> <tr> <td align=\"right\">2 FADH2</td> <td\nalign=\"right\">3 ATP</td> </tr> <tr> <td align=\"right\"\ncolspan=\"3\"><strong>30–32</strong> ATP</td> </tr> </tbody> </table>\n<h4>Headerless</h4>\n<pre><code class=\"language-md\">|--|--|--|--|--|--|--|--| |♜| |♝|♛|♚|♝|♞|♜| | |♟|♟|♟| |♟|♟|♟| |♟| |♞| | | | | |\n| |♗| | |♟| | | | | | | | |♙| | | | | | | | | |♘| | | |♙|♙|♙|♙| |♙|♙|♙|\n|♖|♘|♗|♕|♔| | |♖|\n</code></pre>\n<table> <tbody> <tr> <td>♜</td> <td></td> <td>♝</td> <td>♛</td> <td>♚</td>\n  <td>♝</td> <td>♞</td> <td>♜</td> </tr> <tr> <td></td> <td>♟</td> <td>♟</td>\n  <td>♟</td> <td></td> <td>♟</td> <td>♟</td> <td>♟</td> </tr> <tr> <td>♟</td>\n  <td></td> <td>♞</td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr>\n  <tr> <td></td> <td>♗</td> <td></td> <td></td> <td>♟</td> <td></td> <td></td>\n  <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td>♙</td>\n  <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td>\n  <td></td> <td></td> <td>♘</td> <td></td> <td></td> </tr> <tr> <td>♙</td>\n  <td>♙</td> <td>♙</td> <td>♙</td> <td></td> <td>♙</td> <td>♙</td> <td>♙</td>\n  </tr> <tr> <td>♖</td> <td>♘</td> <td>♗</td> <td>♕</td> <td>♔</td> <td></td>\n  <td></td> <td>♖</td> </tr> </tbody> </table>",
      "date_published": "2022-12-15T06:38:49.390Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=AK%23Notes&description=This%20my%20personal%20website%20where%20I%20post%20my%20notes%20about%20thing%20that%20I%20have%20learn.%20Features%20%20Easy%20to:%20%20Setup%20Configure%20Write%20%20%20Supports:%20%20Tags%20Search%20(Power%20by%20DuckDuckGo)%20Canonical%20Open%20Graph%20Analytics%20GitHub%20Pages%20%20%20Auto%20generate:%20%20GitHub%20Pages%20Actions%20file%20Favicon%20Sitemap%20404%20page%20&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/study/grammmar.html",
      "url": "https://anzenkodo.github.io/notes/study/grammmar.html",
      "title": "Grammmar",
      "content_html": "<h1>Grammar in English</h1>\n<h2>Part of Speech</h2>\n<p>Words are divided into different kinds of classes called <strong>Parts of Speech</strong>.\nThe parts of speech are eight in number:</p>\n<ol>\n<li><a href=\"#noun\">Noun</a></li>\n<li><a href=\"#adjective\">Adjective</a></li>\n<li><a href=\"#pronoun\">Pronoun</a></li>\n<li><a href=\"#verb\">Verb</a></li>\n<li><a href=\"#adverb\">Adverb</a></li>\n<li><a href=\"#preposition\">Preposition</a></li>\n<li><a href=\"#conjunction\">Conjunction</a></li>\n<li><a href=\"#interjection\">Interjection</a></li>\n<li><a href=\"#determiners\">Determiners</a> (In some modern grammars)</li>\n</ol>\n<h3>Noun</h3>\n<p>A <strong>Noun</strong> is a word used as the name of the person, place, or things as,</p>\n<ol>\n<li>That <em>Mountain</em> look so beautiful from here.</li>\n<li>That <em>tree</em> was so small when we came last year.</li>\n<li>I don’t like <em>rain</em>.</li>\n</ol>\n<p><em><strong>Note</strong></em>\nThe word <em>Things</em> includes:</p>\n<ol>\n<li>All the objects that we can see, hear, taste, touch, or smell.</li>\n<li>Something that we can <em>think of</em>, but can’t perceive by the senses.</li>\n</ol>\n<h3>Adjective</h3>\n<p>An <strong>Adjective</strong> is a word used to add something to the meaning of a noun; as,</p>\n<ol>\n<li>He is <em>playing game</em>.</li>\n<li>She look <strong>beautiful</strong> tonight.</li>\n<li>Sun <strong>set early</strong> today.</li>\n</ol>\n<h3>Pronoun</h3>\n<p>A <strong>Pronoun</strong> is a word used instead of noun; as,</p>\n<ol>\n<li>He is was playing football, but <em>he’s</em> broke his leg.</li>\n<li>The books are where you left <em>them</em>.</li>\n</ol>\n<h3>Verb</h3>\n<p>A <strong>Verb</strong> is a word used to express an action or state; as,</p>\n<ol>\n<li>He is <em>sleeping</em>.</li>\n<li>That boy is very <em>playful</em>.</li>\n<li>India is a very <em>diverse</em> country.</li>\n</ol>\n<h3>Adverb</h3>\n<p>An <strong>Adverb</strong> is a word used to <em>add something</em> to the meaning of the verb, an\nadjective, or another adverb; as,</p>\n<ol>\n<li>He is working <em>very</em> hard today.</li>\n<li>That horse is running <em>so</em> fast today.</li>\n<li>New York look <em>so</em> beautiful in the night.</li>\n</ol>\n<h3>Preposition</h3>\n<p>A <strong>Preposition</strong> is a word used with a noun or pronoun to show how the person\nor thing denoted by the noun or pronoun stands in relation to something else; as</p>\n<ol>\n<li><em>Before</em> the dog got the hat.</li>\n<li>The Ice cream is <em>under</em> the fridge.</li>\n<li>He is <em>going</em> to Goa trip.</li>\n</ol>\n<h3>Conjunction</h3>\n<p>A <strong>Conjunction</strong> is a word used to <em>join</em> words or sentences; as,</p>\n<ol>\n<li>He <em>and</em> she are cousins.</li>\n<li>Three <em>and</em> two make five.</li>\n<li>Happy <em>but</em> sad inside.</li>\n</ol>\n<p>Conjunction have <strong>FANBOYS</strong> a which to remember coordinating conjunctions:</p>\n<ul>\n<li><strong>For</strong> - since, because\n<ul>\n<li>I don’t eat buttons <em>for</em> they are not food.</li>\n</ul>\n</li>\n<li><strong>And</strong> - combines things\n<ul>\n<li>The kangaroo robbed the band <em>and</em> torched the saloon.</li>\n</ul>\n</li>\n<li><strong>Nor</strong> - combines untrue things\n<ul>\n<li>She won’t leave her tree <em>nor</em> will she speak with humans.</li>\n</ul>\n</li>\n<li><strong>But</strong> - express exceptions\n<ul>\n<li>We used every building material <em>but</em> chewing gum.</li>\n</ul>\n</li>\n<li><strong>Or</strong> - choosing between options\n<ul>\n<li>Would you rather have pet bear <em>or</em> a pet giraffe?</li>\n</ul>\n</li>\n<li><strong>Yet</strong> - to the contrary\n<ul>\n<li>I want to leave, <em>yet</em> I cannot.</li>\n</ul>\n</li>\n<li><strong>So</strong> - shows consequences\n<ul>\n<li>He is allergic to sheep, <em>so</em> he skipped the wool festival.</li>\n</ul>\n</li>\n</ul>\n<h3>Interjection</h3>\n<p>An <strong>Interjection</strong> is a word which expresses some sudden feeling; as,</p>\n<ol>\n<li><em>Oh my god</em> ! What have you done.</li>\n<li><em>What</em> ! She is dead.</li>\n<li>Hurrah ! We have won the game.</li>\n</ol>\n<h3>Determiners</h3>\n<p><strong>Determiners</strong> are words that comes at the beginning of the noun, introduces\nnoun, determines noun that is whether none is specific or general.\nThere’s are divided into four types which are:</p>\n<h4>Articles</h4>\n<ul>\n<li><strong>Indefinite articles</strong> - <em>a, an</em> - general version of noun\n<ul>\n<li><em>A</em> book is man’s best friend</li>\n</ul>\n</li>\n<li><strong>Definite articles</strong> - <em>the</em> - specific version of noun\n<ul>\n<li><em>The</em> city Mumbai was called Bombay.</li>\n</ul>\n</li>\n</ul>\n<h4>Demonstratives</h4>\n<blockquote>\n<p><em>this, that, these, those</em></p>\n</blockquote>\n<ul>\n<li><strong>Demonstratives</strong> pronouns are also used as determiners. They are used to\npoint something specific within a sentence. They focus attention on the nouns\nthat they are replacing.\n<ul>\n<li>I want go to <em>that</em> movie.</li>\n<li>He wanted <em>those</em> boys to go away.</li>\n</ul>\n</li>\n</ul>\n<h4>Possessives</h4>\n<blockquote>\n<p><em>my, your, his, her, your their</em></p>\n</blockquote>\n<ul>\n<li><strong>Possessive</strong> pronouns are words that are used to show ownership.\n<ul>\n<li>Where is <em>your</em> bike?</li>\n<li>It’s <em>our</em> secret recipe.</li>\n</ul>\n</li>\n</ul>\n<h4>Quantifiers</h4>\n<blockquote>\n<p><em>some, few little many, much, any</em></p>\n</blockquote>\n<ul>\n<li>They indicate how much or how little of the noun is being discussed.\n<ul>\n<li>He took <em>some</em> books of mine.</li>\n<li>He has few apples in the refrigerator.</li>\n</ul>\n</li>\n</ul>",
      "date_published": "2022-12-15T06:38:49.390Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=Grammmar&description=Grammar%20in%20English%20Part%20of%20Speech%20Words%20are%20divided%20into%20different%20kinds%20of%20classes%20called%20Parts%20of%20Speech.%20The%20parts%20of%20speech%20are%20eight%20in%20number:%20%20Noun%20Adjective%20Pronoun%20Verb%20Adverb%20Preposition%20Conjunction%20Interjection%20Determiners%20(In%20some%20modern%20grammars)%20%20Noun%20A%20Noun%20is%20a%20wo&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/study/mgt.html",
      "url": "https://anzenkodo.github.io/notes/study/mgt.html",
      "title": "MGT",
      "content_html": "<h1>MGT</h1>\n<ol>\n<li>Who said “Management is the function of executive leadership anywhere”:</li>\n</ol>\n<ul>\n<li>a) Ralph C. Devis</li>\n</ul>\n<ol start=\"2\">\n<li>Universal, goal oriented, multidimensional, continuous process are some\ncharacteristics of:</li>\n</ol>\n<ul>\n<li>a) Management</li>\n</ul>\n<ol start=\"3\">\n<li>Optimum utilization of resources can be ensured by:</li>\n</ol>\n<ul>\n<li>c) Management</li>\n</ul>\n<ol start=\"4\">\n<li>Motivating the people and building the team spirit to improve the life\nstandard of worker is possible due to:</li>\n</ol>\n<ul>\n<li>b) Management</li>\n</ul>\n<ol start=\"5\">\n<li><strong>Management</strong> is the art of getting work done through people</li>\n<li>Management is a creative and <strong>Continuous</strong> process.</li>\n<li>Management is _______</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>Art of getting things done through people</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>Art of knowing what you want to do in best and cheaper way.</li>\n</ol>\n<ul>\n<li><strong>a) 1&amp;2</strong></li>\n</ul>\n</li>\n</ul>\n<ol start=\"8\">\n<li><strong>Administration</strong> concerned with decision making, policy making.</li>\n<li>The difference between administration and management is that:</li>\n</ol>\n<ul>\n<li>a) Administration is largely determinative while management is essentially\nexecutive.</li>\n</ul>\n<ol start=\"10\">\n<li>A tool manufacturing firm want to improve its performance from good to best\nsuggest the steps they should follow:</li>\n</ol>\n<ul>\n<li>a) 1. Optimum utilisation of resources and reduce wastage. 2. Building team\nspirit to achieve goal.</li>\n</ul>\n<ol start=\"11\">\n<li></li>\n</ol>",
      "date_published": "2022-12-15T06:38:49.390Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=MGT&description=MGT%20%20Who%20said%20“Management%20is%20the%20function%20of%20executive%20leadership%20anywhere”:%20%20%20a)%20Ralph%20C.%20Devis%20%20%20Universal,%20goal%20oriented,%20multidimensional,%20continuous%20process%20are%20some%20characteristics%20of:%20%20%20a)%20Management%20%20%20Optimum%20utilization%20of%20resources%20can%20be%20ensured%20by:%20%20%20c)%20Management%20%20%20M&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/css.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/css.html",
      "title": "CSS",
      "content_html": "<h1>CSS</h1>\n<p><a href=\"https://anzenkodo.github.io/notes/CSS%208946e12a95f04e3490bd9c09bfb99d1e/SASS%20d57c9cbb233644a3a615a487f4cdf949.md\">SASS</a></p>\n<ul>\n<li>\n<p>BEM Method</p>\n<pre><code class=\"language-css\">/* Block component */\n.btn {}\n/* Element that depends upon the block */\n.btn__price {}\n/* Modifier that changes the style of the block */\n.btn--orange {}\n.btn--big {}\n</code></pre>\n</li>\n<li>\n<p>Dark Mode Setting</p>\n<pre><code class=\"language-css\">:root {\n  color-scheme: light dark; /* both supported */\n}\n</code></pre>\n</li>\n<li>\n<p>Image Dark</p>\n<ul>\n<li>\n<p>Apply the filter directly on the body tag.</p>\n<pre><code class=\"language-css\">body.dark-theme img {\n  filter: brightness(.8) contrast(1.2);\n}\n</code></pre>\n</li>\n<li>\n<p>Or apply it via media query.</p>\n<pre><code class=\"language-css\">@media (prefers-color-scheme: dark) {\n  img {\n    filter: brightness(.8) contrast(1.2);\n  }\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Image prefer Dark</p>\n<pre><code class=\"language-html\">&lt;picture&gt;\n  &lt;!-- Use this image if the user's OS setting is light or unset --&gt;\n  &lt;source srcset=&quot;photo-light.png&quot; media=&quot;(prefers-color-scheme: light) or (prefers-color-scheme: no-preference)&quot;&gt;\n  &lt;!-- Use this image if the user's OS setting is dark --&gt;\n  &lt;source srcset=&quot;photo-dark.png&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;\n&lt;/picture&gt;\n</code></pre>\n</li>\n<li>\n<p>Non-standard attributes, dataset</p>\n<pre><code class=\"language-css\">&lt;style&gt;\n  /* styles rely on the custom attribute &quot;order-state&quot; */\n  .order[order-state=&quot;new&quot;] {\n    color: green;\n  }\n\n  .order[order-state=&quot;pending&quot;] {\n    color: blue;\n  }\n\n  .order[order-state=&quot;canceled&quot;] {\n    color: red;\n  }\n&lt;/style&gt;\n\n&lt;div class=&quot;order&quot; order-state=&quot;new&quot;&gt;\n  A new order.\n&lt;/div&gt;\n\n&lt;div class=&quot;order&quot; order-state=&quot;pending&quot;&gt;\n  A pending order.\n&lt;/div&gt;\n\n&lt;div class=&quot;order&quot; order-state=&quot;canceled&quot;&gt;\n  A canceled order.\n&lt;/div&gt;\n</code></pre>\n</li>\n</ul>",
      "date_published": "2022-12-15T06:38:49.390Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=CSS&description=CSS%20SASS%20%20%20BEM%20Method%20/*%20Block%20component%20*/%20.btn%20{}%20/*%20Element%20that%20depends%20upon%20the%20block%20*/%20.btn__price%20{}%20/*%20Modifier%20that%20changes%20the%20style%20of%20the%20block%20*/%20.btn--orange%20{}%20.btn--big%20{}%20%20%20%20Dark%20Mode%20Setting%20:root%20{%20%20%20color-scheme:%20light%20dark;%20/*%20both%20supported%20*/%20}%20%20%20%20Image%20Da&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/bash.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/bash.html",
      "title": "Bash",
      "content_html": "<p><a href=\"#\">#</a> Bash</p>\n<ul>\n<li>\n<p>Functions Info</p>\n<p><strong>apropos</strong> - List of man pages for possible matches based on a search term.</p>\n</li>\n</ul>\n<h2>Commands</h2>\n<ul>\n<li>\n<p>Man Page Organization</p>\n<p><a href=\"https://anzenkodo.github.io/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/Man%20Page%202df02a5a631a4ebe9bcfd37a72009fc0.csv\">Man Page</a></p>\n</li>\n<li>\n<p>Redirecting Standard Output</p>\n<pre><code class=\"language-bash\">ls -l /usr/bin &gt; ls-output.txt\n</code></pre>\n<ul>\n<li>This makes output of ls command</li>\n</ul>\n</li>\n<li>\n<p>About <code>uniq</code></p>\n<ul>\n<li><code>uniq</code> to remove any duplicates from the output of the <code>sort</code> command.</li>\n</ul>\n<pre><code class=\"language-bash\">ls /bin /usr/bin | sort | uniq\n</code></pre>\n<ul>\n<li>To see the list of duplicates instead, add the <code>d</code> option to <code>uniq</code></li>\n</ul>\n<pre><code class=\"language-bash\">ls /bin /usr/bin | sort | uniq -d\n</code></pre>\n</li>\n<li>\n<p>About <code>tee</code></p>\n<ul>\n<li><code>tee</code> is like <code>ls &gt; output.txt</code> but it can work with grep command.</li>\n</ul>\n<pre><code class=\"language-bash\">ls /usr/bin | tee ls.txt | grep zip\n</code></pre>\n<h2>About <code>echo</code></h2>\n<pre><code class=\"language-bash\">echo $((2 + 2))\n</code></pre>\n</li>\n<li>\n<p>Symbols</p>\n<p><a href=\"https://anzenkodo.github.io/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/Symbols%20d88a1a92cda7446fa8a9d2c975c8947e.csv\">Symbols</a></p>\n</li>\n<li>\n<p><code>echo</code> Arithmetic Exponentiation can be nested</p>\n<pre><code class=\"language-bash\">echo $(($((5**2)) * 3))\n</code></pre>\n</li>\n<li>\n<p>The range of integers.</p>\n<pre><code class=\"language-bash\">echo {1..10}\necho a{A{1,2},B{3,4}}b\n</code></pre>\n</li>\n<li>\n<p>Enverment Value List</p>\n<pre><code class=\"language-bash\">cli printenv | less\nset | less\n</code></pre>\n</li>\n</ul>\n<h2>History</h2>\n<ul>\n<li>\n<p>To see the history</p>\n<pre><code class=\"language-bash\">history\n</code></pre>\n</li>\n<li>\n<p>History Command</p>\n<p><a href=\"https://anzenkodo.github.io/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/History%20Command%205694bb062b694eb68fa66879592e9106.csv\">History Command</a></p>\n</li>\n<li>\n<p>History Expansion Commands</p>\n<p><a href=\"https://anzenkodo.github.io/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/History%20Expansion%20Commands%204935186cd0cd4e49a5c894c0463b2851.csv\">History Expansion Commands</a></p>\n</li>\n<li>\n<p>To record the command</p>\n<pre><code class=\"language-bash\">script\n</code></pre>\n</li>\n</ul>\n<h2>Permissions</h2>\n<ul>\n<li>\n<p>To see the group number</p>\n<pre><code class=\"language-bash\">id\n</code></pre>\n</li>\n<li>\n<p>File Type</p>\n<p><a href=\"https://anzenkodo.github.io/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/File%20Type%20b93329415ef14da18905fe8e533748f4.csv\">File Type</a></p>\n</li>\n<li>\n<p>Permission Attributes -rwxrwxr–</p>\n<p><a href=\"https://anzenkodo.github.io/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/Permission%20Attributes%20-rwxrwxr%E2%80%93%2035ff6cb19e8645a3b96ba09a33eba035.csv\">Permission Attributes -rwxrwxr–</a></p>\n</li>\n<li>\n<p>File Modes in Binary and Octal</p>\n<p><a href=\"https://anzenkodo.github.io/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/File%20Modes%20in%20Binary%20and%20Octal%208ac1bb600cca40ebb1db460155009adb.csv\">File Modes in Binary and Octal</a></p>\n</li>\n<li>\n<p>The attribute for changing the file permission</p>\n<ul>\n<li><code>7 (rwx)</code>, <code>6 (rw-)</code>, <code>5 (r-x)</code>, <code>4 (r--)</code>, and <code>0 (---)</code></li>\n</ul>\n</li>\n<li>\n<p><code>chmod</code> Symbolic Notation</p>\n<p><a href=\"https://anzenkodo.github.io/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/chmod%20Symbolic%20Notation%2036655aed32be491d8cf121e4b3981626.csv\">chmod Symbolic Notation</a></p>\n<p><a href=\"https://anzenkodo.github.io/notes/Bash%20da610a137ca64195bdf4ec37d6e4274b/chmod%20Symbolic%20Notation%20Examples%20d2fdf09328984fce96f5699222acfa25.csv\">chmod Symbolic Notation Examples</a></p>\n</li>\n<li>\n<p><code>umask</code> command controls the default permissions given to a file when it is created.</p>\n<pre><code class=\"language-bash\">umask 005\n</code></pre>\n</li>\n</ul>\n<h2>File System</h2>\n<ul>\n<li>\n<p>Testing and Repairing File Systems</p>\n<pre><code class=\"language-bash\">sudo fsck /dev/sdb1\n</code></pre>\n</li>\n<li>\n<p>Make bootable USB drive</p>\n<pre><code class=\"language-bash\">sudo dd bs=4M if=path/to/input.iso of=/dev/sd&lt;?&gt; conv=fdatasync  status=progress\n</code></pre>\n</li>\n</ul>\n<h2>Helpful Command</h2>\n<ul>\n<li>\n<p>Execute <code>find</code> file with command use <code>xargs</code></p>\n<pre><code class=\"language-bash\">find ~ -type f -name &quot;index.html&quot; | xargs ls -l\n</code></pre>\n</li>\n<li>\n<p>Use <code>find</code> to find the file</p>\n<pre><code class=\"language-bash\">find ~ -type f -name &quot;index.html&quot;\n</code></pre>\n</li>\n<li>\n<p>Best way to compress in tar</p>\n<pre><code class=\"language-bash\">tar cfJ playground.tar.xz playground\n</code></pre>\n</li>\n<li>\n<p>How to Mount ISO File on Linux</p>\n<pre><code class=\"language-bash\">mount -t iso9660 -o loop image.iso /mnt/iso_image\n</code></pre>\n</li>\n<li>\n<p>How to sort in Linux</p>\n<pre><code class=\"language-bash\">sort -nk 5\n\n# With command\n\nls -l /usr/share | sort -nk 5\n\n# Sort in ':'\n\nsort -ht ':' -k 3 /etc/passwd | head\n</code></pre>\n</li>\n<li>\n<p>Remove Duplicate use <code>uniq</code></p>\n<pre><code class=\"language-bash\">sort foo.txt | uniq\n</code></pre>\n</li>\n<li>\n<p>Spell check in Terminal</p>\n<pre><code class=\"language-bash\">aspell check filename\n\n# To check HTML code\n\naspell -H check html-filename\n</code></pre>\n</li>\n<li>\n<p>To make PDF</p>\n<pre><code class=\"language-bash\">ls -l ~/ | pr pr.ps | groff &gt; pr.ps\n\n# Convert PostScript file into Potable Document File\n\nps2pdf pr.ps pr.pdf\n</code></pre>\n</li>\n<li>\n<p>Good Locations for Scripts</p>\n<ul>\n<li><code>~/bin</code>Scripts intended for personal use.</li>\n<li><code>/usr/local/bin</code>Script that everyone on a system is allowed to use.</li>\n<li><code>/usr/local/sbin</code>Scripts intended for use by the system administrator</li>\n<li><code>/usr/local</code>Locally supplied software, scripts and compiled programs</li>\n</ul>\n</li>\n</ul>\n<h1>Shell Script</h1>\n<ul>\n<li>\n<p>Assigning Values to Variables and Constants.</p>\n<pre><code class=\"language-bash\">a=z # Assign the string &quot;z&quot; to variable a.\nb=&quot;a string&quot; # Embedded spaces must be within quotes.\nc=&quot;a string and $b&quot; # Other expansions such as variables can be expanded into the assignment.\nd=&quot;$(ls -l foo.txt)&quot; # Results of a command.\ne=$((5 * 7)) # Arithmetic expansion.\nf=&quot;\\t\\ta string\\n&quot; # Escape sequences such as tabs and newlines.\n</code></pre>\n</li>\n<li>\n<p>Using variables with other commands.</p>\n<pre><code class=\"language-bash\">filename=&quot;myFile&quot;\ntouch file\nmv file ${filename}\n</code></pre>\n</li>\n<li>\n<p>Here script</p>\n<pre><code class=\"language-bash\">command &lt;&lt; token\ntext\ntoken\n</code></pre>\n</li>\n<li>\n<p><code>_EOF_</code></p>\n<ul>\n<li>\n<p>Example</p>\n<pre><code class=\"language-bash\"># !/bin/bash\ndate=$(date +&quot;%x %r %Z&quot;)\n\ncat &lt;&lt; _EOF_\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Website&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Website&lt;/h1&gt;\n        &lt;p&gt;Hello World&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n_EOF_\n</code></pre>\n</li>\n<li>\n<p><code>_EOF_</code> with command</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# Script to retrieve a file via FTP\nFTP_SERVER=ftp.nl.debian.org\nFTP_PATH=/debian/dists/stretch/main/installer-amd64/current/images/\ncdrom REMOTE_FILE=debian-cd_info.tar.gz\nftp -n &lt;&lt; _EOF_\nopen $FTP_SERVER\nuser anonymous me@linuxbox\ncd $FTP_PATH\nhash\nget $REMOTE_FILE\nbye\n_EOF_\nls -l &quot;$REMOTE_FILE&quot;\n</code></pre>\n</li>\n<li>\n<p><code>_EOF_</code> with <code>-</code></p>\n<pre><code class=\"language-bash\"># !/bin/bash\ndate=$(date +&quot;%x %r %Z&quot;)\n\ncat &lt;&lt;- _EOF_\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Website&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Website&lt;/h1&gt;\n        &lt;p&gt;Hello World&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n_EOF_\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Shell Functions</p>\n<pre><code class=\"language-bash\"># !/bin/bash\n\nz=human # Gobal variable\n\necho_1() {\necho &quot;hello&quot;\nreturn\n}\n\necho_2() {\ni=world # local veariable\necho &quot;world&quot;\nreturn\n}\n\necho ${echo_1} ${echo_2} $z\n</code></pre>\n</li>\n<li>\n<p>Flow Control: Branching with if</p>\n<ul>\n<li>\n<p><code>if</code></p>\n<pre><code class=\"language-bash\">x=5\nif [ &quot;$x&quot; -eq 5 ]; then\necho &quot;x equals 5.&quot;\nelse\necho &quot;x does not equal 5.&quot;\nfi\n</code></pre>\n</li>\n<li>\n<p><code>if</code> in shell</p>\n<pre><code class=\"language-bash\">if [ “$x” -eq 5 ]; then echo &quot;equals 5&quot;; else echo &quot;does not equal 5&quot;; fi\n</code></pre>\n</li>\n<li>\n<p><code>if</code>, <code>elif</code> and <code>else</code></p>\n<pre><code class=\"language-bash\">if commands; then\ncommands\n[elif commands; then\ncommands...]\n[else\ncommands]\nfi\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Expressions Examples</h2>\n<ul>\n<li>\n<p>File Expressions</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# test-file: Evaluate the status of a file\nFILE=~/.bashrc\nif [ -e &quot;$FILE&quot; ]; then\nif [ -f &quot;$FILE&quot; ]; then\necho &quot;$FILE is a regular file.&quot;\nfi\nif [ -d &quot;$FILE&quot; ]; then\necho &quot;$FILE is a directory.&quot;\nfi\nif [ -r &quot;$FILE&quot; ]; then\necho &quot;$FILE is readable.&quot;\nfi\nif [ -w &quot;$FILE&quot; ]; then\necho &quot;$FILE is writable.&quot;\nfi\nif [ -x &quot;$FILE&quot; ]; then\necho &quot;$FILE is executable/searchable.&quot;\nfi\nelse\necho &quot;$FILE does not exist&quot;\nexit 1\nfi\nexit\n</code></pre>\n</li>\n<li>\n<p>String Expressions</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# test-string: evaluate the value of a string\nANSWER=maybe\nif [ -z &quot;$ANSWER&quot; ]; then\necho &quot;There is no answer.&quot; &gt;&amp;2\nexit 1\nfi\nif [ &quot;$ANSWER&quot; = &quot;yes&quot; ]; then\necho &quot;The answer is YES.&quot;\nelif [ &quot;$ANSWER&quot; = &quot;no&quot; ]; then\necho &quot;The answer is NO.&quot;\nelif [ &quot;$ANSWER&quot; = &quot;maybe&quot; ]; then\necho &quot;The answer is MAYBE.&quot;\nelse\necho &quot;The answer is UNKNOWN.&quot;\nfi\n</code></pre>\n</li>\n<li>\n<p>Integer Expressions</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# test-integer: evaluate the value of an integer.\nINT=-5\nif [ -z &quot;$INT&quot; ]; then\necho &quot;INT is empty.&quot; &gt;&amp;2\nexit 1\nfi\nif [ &quot;$INT&quot; -eq 0 ]; then\necho &quot;INT is zero.&quot;\nelse\nif [ &quot;$INT&quot; -lt 0 ]; then\necho &quot;INT is negative.&quot;\nelse\necho &quot;INT is positive.&quot;\nfi\nif [ $((INT % 2)) -eq 0 ]; then\necho &quot;INT is even.&quot;\nelse\necho &quot;INT is odd.&quot;\nfi\nfi\n</code></pre>\n</li>\n<li>\n<p>File Expressions</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Is True If:</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>file1 -ef file2</td>\n<td>file1 and file2 have the same inode numbers (the two filenames refer to the same file by hard linking).</td>\n</tr>\n<tr>\n<td>file1 -nt file2</td>\n<td>file1 is newer than file2.</td>\n</tr>\n<tr>\n<td>file1 -ot file2</td>\n<td>file1 is older than file2.</td>\n</tr>\n<tr>\n<td>-b file</td>\n<td>file exists and is a block-special (device) file.</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>file exists and is a character-special (device) file.</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>file exists and is a directory.</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>file exists.</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>file exists and is a regular file.</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>file exists and is set-group-ID.</td>\n</tr>\n<tr>\n<td>-G file</td>\n<td>file exists and is owned by the effective group ID.</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>file exists and has its “sticky bit” set.</td>\n</tr>\n<tr>\n<td>-L file</td>\n<td>file exists and is a symbolic link.</td>\n</tr>\n<tr>\n<td>-O file</td>\n<td>file exists and is owned by the effective user ID.</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>file exists and is a named pipe.</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>file exists and is readable (has readable permission for the effective user).</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>file exists and has a length greater than zero.</td>\n</tr>\n<tr>\n<td>-S file</td>\n<td>file exists and is a network socket.</td>\n</tr>\n<tr>\n<td>-t fd</td>\n<td>fd is a file descriptor directed to/from the terminal. This can be used to determine whether standard input/output/error is being redirected.</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>file exists and is setuid.</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>file exists and is writable (has write permission for the effective user).</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>file exists and is executable (has execute/search permission for the effective user).</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>String Expressions</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Is True If…</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td>string is not null.</td>\n</tr>\n<tr>\n<td>-n string</td>\n<td>The length of string is greater than zero.</td>\n</tr>\n<tr>\n<td>-z string</td>\n<td>The length of string is zero.</td>\n</tr>\n<tr>\n<td><code>string1 = string2</code> <code>string1 == string2</code></td>\n<td>string1 and string2 are equal. Single or double equal signs may be used. The use of double equal signs is supported by bash and is generally preferred, but it is not POSIX compliant.</td>\n</tr>\n<tr>\n<td>string1 != string2</td>\n<td>string1 and string2 are not equal.</td>\n</tr>\n<tr>\n<td>string1 &gt; string2</td>\n<td>string1 sorts after string2.</td>\n</tr>\n<tr>\n<td>string1 &lt; string2</td>\n<td>string1 sorts before string2.</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>Integer Expressions</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Is True If…</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>integer1 -eq integer2</td>\n<td>integer1 is equal to integer2.</td>\n</tr>\n<tr>\n<td>integer1 -ne integer2</td>\n<td>integer1 is not equal to integer2.</td>\n</tr>\n<tr>\n<td>integer1 -le integer2</td>\n<td>integer1 is less than or equal to integer2.</td>\n</tr>\n<tr>\n<td>integer1 is less than or equal to integer2.</td>\n<td>integer1 is less than integer2.</td>\n</tr>\n<tr>\n<td>integer1 -ge integer2</td>\n<td>integer1 is greater than or equal to integer2.</td>\n</tr>\n<tr>\n<td>integer1 -gt integer2</td>\n<td>integer1 is greater than integer2.</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>",
      "date_published": "2022-12-15T06:38:49.390Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=Bash&description=%23%20Bash%20%20%20Functions%20Info%20apropos%20-%20List%20of%20man%20pages%20for%20possible%20matches%20based%20on%20a%20search%20term.%20%20%20Commands%20%20%20Man%20Page%20Organization%20Man%20Page%20%20%20Redirecting%20Standard%20Output%20ls%20-l%20/usr/bin%20&gt;%20ls-output.txt%20%20%20This%20makes%20output%20of%20ls%20command%20%20%20%20About%20uniq%20%20uniq%20to%20remove%20any%20duplica&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/c.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/c.html",
      "title": "C",
      "content_html": "<h1>C</h1>\n<ul>\n<li>In fact, you should use the main() to do very little except call each of the other functions.</li>\n<li>A good rule of thumb is that a function should not take more lines than will fit on a single screen. If the function is longer than that, you’re probably making it do too much.</li>\n<li>The difference between local and global variables:\n<ul>\n<li>A variable is global only if you define the variable (such as inti;) before a function name.</li>\n<li>A variable is local only if you define it after an opening brace. A function always begins with opening braces. Some statements, such as while, also have opening braces, and you can define local variables within those braces as well.</li>\n</ul>\n</li>\n<li>Local variables are safer than global variables.</li>\n<li>Don’t define global variables in the middle of a program. They’re too hard to locate if you do.</li>\n</ul>",
      "date_published": "2022-12-15T06:38:49.390Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=C&description=C%20%20In%20fact,%20you%20should%20use%20the%20main()%20to%20do%20very%20little%20except%20call%20each%20of%20the%20other%20functions.%20A%20good%20rule%20of%20thumb%20is%20that%20a%20function%20should%20not%20take%20more%20lines%20than%20will%20fit%20on%20a%20single%20screen.%20If%20the%20function%20is%20longer%20than%20that,%20you’re%20probably%20making%20it%20do%20too%20much.%20The%20di&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/java.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/java.html",
      "title": "Java",
      "content_html": "<h1>Java</h1>\n<h2>1) Write a program to check number is even or odd using if else.</h2>\n<pre><code class=\"language-java\">import java.util.Scanner;\n\n/**\n * Java Program - Check if Number is Even or Odd\n */\n\npublic class Example {\n\n    public static void main(String[] args) {\n        //create a scanner to read bytes from console entered by user via keyboard\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(&quot;Enter a number : &quot;);\n        //read integer from user\n        int a = scanner.nextInt();\n\n        //check if the number is even or odd\n        if(a%2==0) {\n            System.out.println(&quot;The number is even.&quot;);\n        } else {\n            System.out.println(&quot;The number is odd.&quot;);\n        }\n\n        //close the scanner\n        scanner.close();\n    }\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Enter a number : 4\nThe number is even.\n</code></pre>\n<h2>2) Write a program to check switch case statement using character datatype.</h2>\n<pre><code class=\"language-java\">public class SwitchExample {\npublic static void main(String[] args) {\n    //Declaring a variable for switch expression\n    String name=&quot;a&quot;;\n    //Switch expression\n    switch(name){\n    //Case statements\n    case &quot;a&quot;: System.out.println(&quot;Aman is in Database.&quot;);\n    break;\n    case &quot;r&quot;: System.out.println(&quot;Ravi is in Database.&quot;);\n    break;\n    case &quot;g&quot;: System.out.println(&quot;Gita is in Database.&quot;);\n    break;\n    //Default case statement\n    default:System.out.println(&quot;Name is not in database.&quot;);\n    }\n}\n}\n</code></pre>\n<pre><code>Aman is in Database.\n</code></pre>\n<h2>3) Develop a program to print command line argument using for loop.</h2>\n<pre><code class=\"language-java\">class CommandLineExample{\n    public static void main(String args[]){\n        System.out.println(&quot;Your first argument is: &quot;+args[0]);\n        for (int i; i &lt;= 5; i++) {\n            System.out.println(arg[0]);\n        }\n    }\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>&gt; java CommandLineExample Hello\nYour first argument is: Hello\nHello\nHello\nHello\nHello\nHello\nHello\n</code></pre>\n<h2>4) Develop a program to show the use of implicit typecasting.</h2>\n<pre><code class=\"language-java\">public class ImplicitTypecastingExample {\n   public static void main(String args[]) {\n      byte p = 12;\n      System.out.println(&quot;byte value : &quot;+p);\n      // Implicit Typecasting\n      short q = p;\n      System.out.println(&quot;short value : &quot;+q);\n      int r = q;\n      System.out.println(&quot;int value : &quot;+r);\n      long s = r;\n      System.out.println(&quot;long value : &quot;+s);\n      float t = s;\n      System.out.println(&quot;float value : &quot;+t);\n      double u = t;\n      System.out.println(&quot;double value : &quot;+u);\n   }\n}\n</code></pre>\n<pre><code>byte value : 12\nshort value : 12\nint value : 12\nlong value : 12\nfloat value : 12.0\ndouble value : 12.0\n</code></pre>\n<h2>5) Write a program to implement different types of constructors to perform addition of complex numbers.</h2>\n<pre><code class=\"language-java\">public class ComplexNumber{\n   //for real and imaginary parts of complex numbers\n   double real, img;\n\n   //constructor to initialize the complex number\n   ComplexNumber(double r, double i){\n\tthis.real = r;\n\tthis.img = i;\n   }\n\n   public static ComplexNumber sum(ComplexNumber c1, ComplexNumber c2)\n   {\n\t//creating a temporary complex number to hold the sum of two numbers\n        ComplexNumber temp = new ComplexNumber(0, 0);\n\n        temp.real = c1.real + c2.real;\n        temp.img = c1.img + c2.img;\n\n        //returning the output complex number\n        return temp;\n    }\n    public static void main(String args[]) {\n\tComplexNumber c1 = new ComplexNumber(5.5, 4);\n\tComplexNumber c2 = new ComplexNumber(1.2, 3.5);\n        ComplexNumber temp = sum(c1, c2);\n        System.out.printf(&quot;Sum is: &quot;+ temp.real+&quot; + &quot;+ temp.img +&quot;i&quot;);\n    }\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Sum is: 6.7 + 7.5i\n</code></pre>\n<h2>6) Write a program to show the use of all methods of String class.</h2>\n<pre><code class=\"language-java\">public class StringMethodsDemo {\n\tpublic static void main(String[] args) {\n\t\tString targetString = &quot;Java is fun to learn&quot;;\n\t\tString s1= &quot;JAVA&quot;;\n\t\tString s2= &quot;Java&quot;;\n\t\tString s3 = &quot;  Hello Java  &quot;;\n\n\t\tSystem.out.println(&quot;Char at index 2(third position): &quot; + targetString.charAt(2));\n\t\tSystem.out.println(&quot;After Concat: &quot;+ targetString.concat(&quot;-Enjoy-&quot;));\n\t\tSystem.out.println(&quot;Checking equals ignoring case: &quot; +s2.equalsIgnoreCase(s1));\n\t\tSystem.out.println(&quot;Checking equals with case: &quot; +s2.equals(s1));\n\t\tSystem.out.println(&quot;Checking Length: &quot;+ targetString.length());\n\t\tSystem.out.println(&quot;Replace function: &quot;+ targetString.replace(&quot;fun&quot;, &quot;easy&quot;));\n\t\tSystem.out.println(&quot;SubString of targetString: &quot;+ targetString.substring(8));\n\t\tSystem.out.println(&quot;SubString of targetString: &quot;+ targetString.substring(8, 12));\n\t\tSystem.out.println(&quot;Converting to lower case: &quot;+ targetString.toLowerCase());\n\t\tSystem.out.println(&quot;Converting to upper case: &quot;+ targetString.toUpperCase());\n\t\tSystem.out.println(&quot;Triming string: &quot; + s3.trim());\n\t\tSystem.out.println(&quot;searching s1 in targetString: &quot; + targetString.contains(s1));\n\t\tSystem.out.println(&quot;searching s2 in targetString: &quot; + targetString.contains(s2));\n\n\t\tchar [] charArray = s2.toCharArray();\n\t\tSystem.out.println(&quot;Size of char array: &quot; + charArray.length);\n\t\tSystem.out.println(&quot;Printing last element of array: &quot; + charArray[3]);\n\n\t}\n\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Char at index 2(third position): v\nAfter Concat: Java is fun to learn-Enjoy-\nChecking equals ignoring case: true\nChecking equals with case: false\nChecking Length: 20\nReplace function: Java is easy to learn\nSubString of targetString: fun to learn\nSubString of targetString: fun\nConverting to lower case: java is fun to learn\nConverting to upper case: JAVA IS FUN TO LEARN\nTriming string: Hello Java\nsearching s1 in targetString: false\nsearching s2 in targetString: true\nSize of char array: 4\nPrinting last element of array: a\n</code></pre>\n<h2>7) Write a program to implement all methods of StringBuffer class.</h2>\n<pre><code class=\"language-java\">class StringBufferExample{\n    public static void main(String args[]){\n        StringBuffer sb=new StringBuffer(&quot;Hello&quot;);\n        sb.append(&quot; Java&quot;);\n        System.out.println(sb);\n        sb.insert(1,&quot;Java&quot;);\n        System.out.println(sb);\n        sb.replace(1,3,&quot;Java&quot;);\n        System.out.println(sb);\n        sb.delete(1,3);\n        System.out.println(sb);\n        sb.reverse();\n        System.out.println(sb);\n        System.out.println(sb.capacity());\n        sb.ensureCapacity(10);\n        System.out.println(sb.capacity());\n    }\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello Java\nHJavaello Java\nHJavavaello Java\nHvavaello Java\navaJ olleavavH\n21\n21\n</code></pre>\n<h2>8) Write a program to implement single inheritance.</h2>\n<pre><code class=\"language-java\">class Animal{\nvoid eat(){System.out.println(&quot;eating...&quot;);}\n}\nclass Dog extends Animal{\nvoid bark(){System.out.println(&quot;barking...&quot;);}\n}\nclass TestInheritance{\npublic static void main(String args[]){\nDog d=new Dog();\nd.bark();\nd.eat();\n}}\n</code></pre>\n<p>O/P</p>\n<pre><code>barking...\neating...\n</code></pre>\n<h2>9) Write a program to implement multilevel inheritance.</h2>\n<pre><code class=\"language-java\">class Animal{\nvoid eat(){System.out.println(&quot;eating...&quot;);}\n}\nclass Dog extends Animal{\nvoid bark(){System.out.println(&quot;barking...&quot;);}\n}\nclass BabyDog extends Dog{\nvoid weep(){System.out.println(&quot;weeping...&quot;);}\n}\nclass TestInheritance2{\npublic static void main(String args[]){\nBabyDog d=new BabyDog();\nd.weep();\nd.bark();\nd.eat();\n}}\n</code></pre>\n<p>O/P</p>\n<pre><code>weeping...\nbarking...\neating...\n</code></pre>\n<h2>10) Develop a program to find area of rectangle and circle using interface.</h2>\n<pre><code class=\"language-java\">class FindLargestShape {\n  public static void main(String arg[]) {\n    Rectangle r = new Rectangle(10, 4);\n    System.out.println(&quot;Rectangle Area : &quot; + r.getArea());\n    System.out.println();\n  }\n}\n\nclass Rectangle {\n  double length;\n  double breadth;\n  Rectangle(double length, double breadth) {\n    this.length = length;\n    this.breadth = breadth;\n  }\n  double getArea() {\n    return length * breadth;\n  }\n\n}\n</code></pre>\n<h2>11) Write a program to implement user defined packages in terms of creating a new package and importing the same.</h2>\n<pre><code class=\"language-java\">package example;\n\npublic class gfg {\n\n    public void show()\n    {\n        System.out.println(&quot;Hello geeks!! How are you?&quot;);\n    }\n\n    public static void main(String args[])\n    {\n        gfg obj = new gfg();\n        obj.show();\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\">import example.gfg;\n\npublic class GFG {\n    public static void main(String args[])\n    {\n        gfg obj = new gfg();\n        System.out.println(obj.show());\n    }\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello geeks!! How are you?\n</code></pre>\n<h2>12) Write a program to implement two thread use sleep method.</h2>\n<pre><code class=\"language-java\">class TestSleepMethod1 extends Thread{\n public void run(){\n  for(int i=1;i&lt;5;i++){\n  // the thread will sleep for the 500 milli seconds\n    try{Thread.sleep(500);}catch(InterruptedException e){System.out.println(e);}\n    System.out.println(i);\n  }\n }\n public static void main(String args[]){\n  TestSleepMethod1 t1=new TestSleepMethod1();\n  TestSleepMethod1 t2=new TestSleepMethod1();\n\n  t1.start();\n  t2.start();\n }\n}\n</code></pre>\n<pre><code>11\n2\n2\n3\n3\n4\n4\n</code></pre>\n<h2>13) Develop a program to accept a password from the user and throw “Authentication Failure” exception if the password is incorrect.</h2>\n<pre><code class=\"language-java\">import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nclass AuthenticationException extends Exception {\n\n public AuthenticationException(String message) {\n\n  super(message);\n }\n}\n\npublic class AuthenticationExcDemo {\n\n public static void main(String[] args) {\n\n  InputStreamReader isr = new InputStreamReader(System.in);\n  BufferedReader br = new BufferedReader(isr);\n  String pwd;\n\n  try {\n\n   System.out.print(&quot;Enter password :: &quot;);\n   pwd = br.readLine();\n\n   if(!pwd.equals(&quot;123&quot;))\n    throw new AuthenticationException(&quot;Incorrect password\\nType correct password&quot;);\n   else\n    System.out.println(&quot;Welcome User !!!&quot;);\n\n  }\n  catch (IOException e) {\n   e.printStackTrace();\n  }\n  catch (AuthenticationException a) {\n   a.printStackTrace();\n  }\n  System.out.println(&quot;BYE BYE&quot;);\n }\n\n}\n</code></pre>\n<h2>14) Develop a program to draw a polygon using applet.</h2>\n<pre><code class=\"language-java\">import java.awt.*;\nimport javax.swing.*;\n\npublic class poly extends JApplet {\n\n    // called when applet is started\n    public void init()\n    {\n        // set the size of applet to 300, 300\n        setSize(200, 200);\n        show();\n    }\n\n    // invoked when applet is started\n    public void start()\n    {\n    }\n\n    // invoked when applet is closed\n    public void stop()\n    {\n    }\n\n    public void paint(Graphics g)\n    {\n        // x coordinates of vertices\n        int x[] = { 10, 30, 40, 50, 110, 140 };\n\n        // y coordinates of vertices\n        int y[] = { 140, 110, 50, 40, 30, 10 };\n\n        // number of vertices\n        int numberofpoints = 6;\n\n        // set the color of line drawn to blue\n        g.setColor(Color.blue);\n\n        // draw the polygon using drawPolygon function\n        g.drawPolygon(x, y, numberofpoints);\n    }\n}\n</code></pre>\n<h2>15) Develop an applet for drawing a human face.</h2>\n<pre><code class=\"language-java\">import java.applet.*;\nimport java.awt.*;\npublic class Human_Face extends Applet\n{\n    //Initialize the applet\n    public void init()\n    {\n\tsetBackground(Color.white);\n    }\n    //Draw the human face\n    public void paint(Graphics g)\n    {\n        //Change color to cream\n        Color clr=new Color(255,179,86);\n        g.setColor(clr);\n        //Draw and fill the face\n        g.drawOval(100,100,250,300);\n        g.fillOval(100,100,250,300);\n        //Change color to black\n        g.setColor(Color.black);\n        //Draw the left eye\n        g.drawOval(160,185,40,25);\n        g.fillOval(160,185,40,25);\n        //Draw the right eye\n        g.drawOval(250,185,40,25);\n        g.fillOval(250,185,40,25);\n        //Draw the Left Eyebrow\n        g.drawArc(160,170,35,10,0,180);\n        //Draw the Right Eyebrow\n        g.drawArc(250,170,35,10,0,180);\n        //Draw the Nose\n        g.drawLine(210,265,210,275);\n        g.drawLine(240,265,240,275);\n        g.drawArc(210,275,30,10,0,-180);\n       //Draw the smile\n        g.drawArc(175,300,100,50,0,-180);\n    }\n}\n</code></pre>\n<h2>16) Develop a program to draw square inside a circle using applet.</h2>\n<pre><code class=\"language-java\">import java.applet.&quot;;\nimport java.awt.*;\n/* &lt;applet code=shapes width=10 height=10&gt; &lt;/applet&gt;*/\npublic class shapes extends Applet {\n    public void paint(Graphics g) {\n    g.drawString(&quot;Square inside a circle&quot;, 150,110);\n    g.drawOval(180,10,80,80);\n    g.drawRect(192,22,55,55):\n    g.drawString(&quot;Circle inside a square&quot;, 290, 110);\n    g.drawRect(290, 10, 80, 80);\n    g.drawOval(290, 10, 80, 80);\n    }\n}\n</code></pre>\n<h2>17) Develop a program to copy characters from one file to another.</h2>\n<pre><code class=\"language-java\">import java.io.*;\nimport java.util.*;\nclass Copyfile {\n public static void main(String arg[]) throws Exception {\n  Scanner sc = new Scanner(System.in);\n  System.out.print(&quot;Provide source file name :&quot;);\n  String sfile = sc.next();\n  System.out.print(&quot;Provide destination file name :&quot;);\n  String dfile = sc.next();\n  FileReader fin = new FileReader(sfile);\n  FileWriter fout = new FileWriter(dfile, true);\n  int c;\n  while ((c = fin.read()) != -1) {\n   fout.write(c);\n  }\n  System.out.println(&quot;Copy finish...&quot;);\n  fin.close();\n  fout.close();\n }\n}\n</code></pre>",
      "date_published": "2022-12-15T06:38:49.390Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=Java&description=Java%201)%20Write%20a%20program%20to%20check%20number%20is%20even%20or%20odd%20using%20if%20else.%20import%20java.util.Scanner;%20%20/**%20%20*%20Java%20Program%20-%20Check%20if%20Number%20is%20Even%20or%20Odd%20%20*/%20%20public%20class%20Example%20{%20%20%20%20%20%20public%20static%20void%20main(String[]%20args)%20{%20%20%20%20%20%20%20%20%20//create%20a%20scanner%20to%20read%20bytes%20from%20console%20en&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/php/ut2-6s.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/php/ut2-6s.html",
      "title": "UT2 6S",
      "content_html": "<h1>PHP Unit 2 AB</h1>\n<h3>1. Write the syntax for creating Cookie.</h3>\n<ul>\n<li>To set cookie in PHP, the <code>setcookie()</code> function is used.</li>\n<li>Syntex:<pre><code class=\"language-php\">setcookie($name, $value, $expire_time, $path, $domain)\n</code></pre>\n</li>\n<li><code>setcookie()</code> function the parameters.\n<ul>\n<li><strong>name</strong> - Name of the cookie, which is used with $_COOKIE function to get\nvalue.</li>\n<li><strong>value</strong> - Value of the named variable.</li>\n<li><strong>expire time</strong> - Time when cookie will expire.</li>\n<li><strong>path</strong> - Directory where cookie will valied.</li>\n<li><strong>domain</strong> - The default server hostname.</li>\n</ul>\n</li>\n</ul>\n<h3>2. WAP to connect PHP with MySQL.</h3>\n<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif ($conn) {\n\techo &quot;MySQL connected&quot;;\n} else {\n\techo &quot;MySQL can't connect&quot;;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>MySQL connected\n</code></pre>\n<h3>3. Differentiate between Session and Cookies.</h3>\n<table>\n<thead>\n<tr>\n<th>SESSION</th>\n<th>COOKIES</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Session are stored in server side</td>\n<td>Cookies are stored in client browser.</td>\n</tr>\n<tr>\n<td>Session is server resource.</td>\n<td>Cookies are client-side resource.</td>\n</tr>\n<tr>\n<td>It stores unlimeted data.</td>\n<td>It stores limited data.</td>\n</tr>\n<tr>\n<td>It holds multiple variables.</td>\n<td>It doen’t hold multiple variables.</td>\n</tr>\n<tr>\n<td>Session values can’t accessed easily.</td>\n<td>Cookies values can accessed easily.</td>\n</tr>\n<tr>\n<td>It is more secure.</td>\n<td>It is less secure.</td>\n</tr>\n</tbody>\n</table>\n<h3>4. Define session and explain how it works.</h3>\n<ul>\n<li>A session is a way to store information in variables to be used across\nmultiple pages.</li>\n<li>Sessions allow us to store data on the web server that associated with a\nsession ID.</li>\n<li>Once we create a session, PHP sends a cookie that contains the session ID to\nthe web browser.</li>\n<li>A session is started with the session_start() function.</li>\n<li>The session_start() function first checks if a session is already started and\nif none is started then it starts one.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\nsession_start();\n\n$_SESSION[&quot;color&quot;] = &quot;Red&quot;;\n$_SESSION[&quot;animal&quot;] = &quot;Cat&quot;;\necho $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>5. Write update and delete operations on table.</h3>\n<pre><code class=\"language-php\">UPDATE:\n&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n\techo &quot;Can't connect to MySQL&quot;;\n}\n\n$sql = &quot;UPDATE my_table SET name='Jonney' WHERE id=2&quot;;\nif (!mysqli_query($conn, $sql)) {\n\tdie(&quot;Can't Update Table&quot;);\n}\necho &quot;Update data&lt;/br&gt;&quot;;\n?&gt;\nDELETE:\n&lt;?php\n$sql = &quot;DELETE my_table WHERE id=1&quot;;\nif (!mysqli_query($conn, $sql)) {\n\tdie(&quot;Can't Delete data&quot;);\n}\necho &quot;Deleted data&lt;/br&gt;&quot;;\n\nmysqli_close($conn);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>UPDATE:Update data\nDELETE:Deleted data\n</code></pre>\n<h3>6. Answer the following</h3>\n<h4>i) Get session variables</h4>\n<ul>\n<li>The session variables are not passed individually to each new page, instead\nthey are retrieved from the session we open at the beginning of each page.</li>\n<li>All session variable values are stored in the global <code>$_SESSION</code> variable.</li>\n</ul>\n<h4>ii) Destroy session.</h4>\n<ul>\n<li>To remove all global session variables and destroy the session, we use\n<code>session_unset()</code> and <code>session_destroy()</code> functions.</li>\n<li>No arguments are needed in <code>session_destroy()</code> function.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\nsession_start();\n\n$_SESSION[&quot;color&quot;] = &quot;red&quot;;\n$_SESSION[&quot;animal&quot;] = &quot;Lion&quot;;\necho $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];\nsession_unset();\nsession_destroy();\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>7. Explain inserting and retrieving the query result operations.</h3>\n<ul>\n<li>For inserting a data into the table we use the INSERT query.</li>\n<li>For retrieving the data, we use the SELECT query.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n\techo &quot;Can't connect to MySQL&quot;;\n}\n\n// Insert the data\n$sql = &quot;INSERT INTO my_table(id, name) VALUES (1, 'Jonney'), (2, 'Jone')&quot;;\nif (!mysqli_query($conn, $sql)) {\n\techo &quot;Can't Insert the data&quot;;\n}\n\n// Retriving\n$sql = &quot;SELECT * FROM my_table&quot;;\n$result = mysqli_connect($conn, $sql);\n\nif ($mysqli_num_rows($result) &gt; 0) {\n\twhile ($row = mysqli_fetch_array($result)) {\n\t\techo &quot;Name: &quot;.$row['name'].&quot;, ID: &quot;.$row['id'].&quot;&lt;br/&gt;&quot;;\n\t}\n} else {\n\techo &quot;Rows can't be zero.&quot;;\n}\n</code></pre>\n<h3>8. Explain web page validation with example.</h3>\n<ul>\n<li>For validating a web page we use preg_match() function.</li>\n<li>The preg_match() function searches string for pattern, returning true if\npattern exists, and false otherwise.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\tName:&lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif (!preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;])) {\n\techo &quot;Only letter and whitespace is allowed&quot;;\n}\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>9.  Elaborate the following:</h3>\n<h4>i) <code>mysqli_query()</code></h4>\n<p>This function in php is used to pass a sql query to mysql database.\nThis function returns the query handle for SELECT queries, TRUE/FALSE for other\nqueries, or FALSE on failure.</p>\n<ul>\n<li>Syntex:<pre><code class=\"language-php\">mysqli_query(string, query, resource link_identifier])\n</code></pre>\n</li>\n</ul>\n<h4>ii) <code>mysqli_connect()</code></h4>\n<ul>\n<li>This function opens a connection to a MySQL server.</li>\n<li>It returns a MySQL link identifier on success, or FALSE on failure.</li>\n<li>Syntax:<pre><code class=\"language-php\">mysqli_connect($server, $username, $password)\n</code></pre>\n</li>\n<li>Example:<pre><code class=\"language-php\">$conn = mysqli_connect(&quot;mydb&quot;, &quot;root&quot;, &quot;root&quot;);\n</code></pre>\n</li>\n</ul>\n<h3>10. Explain the use of mail() function in php.</h3>\n<ul>\n<li><code>mail()</code> function is useful to sending the mail.</li>\n<li>Syntex:<pre><code class=\"language-php\">mail($to, $subject, $message, $header, $parametes);\n</code></pre>\n</li>\n<li><code>mail()</code> function parametes:\n<ul>\n<li><strong>to</strong> - represents the address of receiver.</li>\n<li><strong>subject</strong> - it specifies the subject of mail.</li>\n<li><strong>message</strong> - it defines the message which is to be sent.</li>\n<li><strong>headers</strong> - it is optional and specifies the additional headers like Cc, Bcc.</li>\n<li><strong>parameters</strong> - it is optional and specifies the additional parameters.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$sent = mail(&quot;AnzenKodo@altmail.com&quot;, &quot;Title&quot;, &quot;Message&quot;);\n\nif (!$sent) {\n  echo &quot;Message is not sent.&quot;;\n} else {\n  echo &quot;Message is sent.&quot;;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Message is sent.\n</code></pre>\n<h3>11. How to use radio button in form? Give suitable example.</h3>\n<ul>\n<li>The radio buttons are for single choice from multiple options.</li>\n<li>All radio buttons in the group have the same name attribute.</li>\n<li>Only one button can be selected per group.</li>\n<li>The value attribute is mandatory for checkboxes and radio buttons.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\tColor:\n\t&lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;White&quot;&gt;White&lt;/input&gt;\n\t&lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;Blue&quot;&gt;Blue&lt;/input&gt;\n\t&lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;Red&quot;&gt;Red&lt;/input&gt;\n\t&lt;input type=&quot;Submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif (isset($_POST[&quot;color&quot;])) {\n\techo $_POST[&quot;color&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>12. WAP in php to counting no. of rows in table.</h3>\n<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n\tdie(&quot;Can't connect to MySQL&quot;);\n}\n\n$sql = &quot;SELECT * FROM my_table&quot;;\nif ($result = mysqli_query($conn, $sql)) {\n\techo &quot;No of rows: &quot;.mysqli_num_rows($result);\n} else {\n\techo &quot;Can't connect&quot;;\n}\n\nmysqli_close($conn);\n?&gt;\n</code></pre>\n<h3>13. WAP in php to counting no. of fields in table.</h3>\n<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n\tdie(&quot;Can't connect to MySQL&quot;);\n}\n\n$sql = &quot;SELECT * FROM my_table&quot;\nif ($result = mysqli_query($conn, $sql)) {\n\techo &quot;No of fields: &quot;.mysqli_num_fields($result);\n}\nmysqli_close();\n?&gt;\n</code></pre>\n<h3>14. WAP in php to create database and creation of table.</h3>\n<pre><code class=\"language-php\">Creating database:\n&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;);\nif (!$conn) {\n\tdie(&quot;Can't connect to MySQL&quot;);\n}\n\n$sql = &quot;CREATE DATABASE db&quot;;\nif (!mysqli_query($conn, $sql) {\n\tdie(&quot;Can't create Database&quot;);\n}\necho &quot;Created database&lt;/br&gt;&quot;;\n\nmysqli_close($conn);\n?&gt;\n\nCreating Table:\n&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;db&quot;);\nif (!$conn) {\n\tdie(&quot;Can't create Table&quot;);\n}\n\n$sql = &quot;CREATE TABLE my_table(name VARCHAR(22), id INT(4))&quot;;\nif(!mysqli_query($conn, $sql) {\n\tdie(&quot;Error: &quot;.mysqli_error($conn));\n}\necho &quot;Created table&lt;br/&gt;&quot;;\n\nmysqli_close($conn);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Created database\nCreated table\n</code></pre>\n<h3>15. How to used list and button in form? Give suitable example.</h3>\n<ul>\n<li>List\n<ul>\n<li>The list represents a windows control to display a list of items to a user.</li>\n<li>A user can select an item from the list.</li>\n<li>User can either select one option from a list or multiple options, depending\non the type of list.</li>\n</ul>\n</li>\n<li>Button\n<ul>\n<li>A button is a control, which is an interactive component that enables users\nto communicate with an application which we click and release to perform\nsome actions.</li>\n<li>A button can be clicked by using the mouse, ENTER key, or SPACEBAR if the\nbutton has focus.</li>\n</ul>\n</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\t&lt;select name=&quot;language&quot;&gt;\n\t\t&lt;option name=&quot;C&quot;&gt;C&lt;/option&gt;\n\t\t&lt;option name=&quot;C++&quot;&gt;C++&lt;/option&gt;\n\t\t&lt;option name=&quot;PHP&quot;&gt;PHP&lt;/option&gt;\n\t&lt;/select&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif (isset($_POST[&quot;language&quot;])) {\n\techo &quot;Selected: &quot;.$_POST[&quot;language&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h3>16. Answer the following</h3>\n<h4>i) Use of cookies</h4>\n<ul>\n<li>Cookie save the data in browser, so next time refresh the browser it will not\ndelete from browser.</li>\n<li>Cookie is used to identify the user.</li>\n<li>A cookie is a small file that server embeds to user’s computer.</li>\n<li>Each time the same computer requests a page with a browser, it will send the\ncookie too.</li>\n</ul>\n<h4>ii) How to set the cookie?</h4>\n<ul>\n<li>Use <code>setcookie</code> function to create cookie.</li>\n<li>Syntex:<pre><code>setcookie($cookie_name, $cookie_value, $time, $location)\n</code></pre>\n</li>\n</ul>\n<h4>iii) How to modify?</h4>\n<ul>\n<li>Set cookie agien with <code>setcookie</code> function.</li>\n</ul>\n<h4>iv) How to delete the cookies?</h4>\n<ul>\n<li>To delete cookie, we can use <code>setcookie</code> function with expiration date in\npast.</li>\n<li>Example:<pre><code>setcookie($cookie_name, &quot;&quot;, time() - 3600);\n</code></pre>\n</li>\n<li>We can also put <code>null</code> in time section to delete cookie.</li>\n<li>Example<pre><code>setcookie($cookie_name, &quot;&quot;, null);\n</code></pre>\n</li>\n</ul>\n<h3>17. Define GET and POST methods.</h3>\n<h4>GET</h4>\n<ul>\n<li>It sends the encoded user information appended to the page request (to the\nURL).</li>\n<li>The page and the encoded information are separated by the ? character.</li>\n<li>The GET method produces a long string the appears in our server logs, in the\nbrowser’ location box.</li>\n<li>The GET method is restricted to send up to 1024 characters only.</li>\n<li>Never use GET method if we have password or other sensitive information.</li>\n<li>GET cannot be used to send binary data to the server.</li>\n<li>The php provides $_GET assoiative array to a access all the sent information\nusing GET method.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;GET&quot;&gt;\n\tName: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ($_GET[&quot;name&quot;]) {\n\techo $_GET[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n<li>Output:<pre><code>Name: Joey\nSubmit\n\nJoey\n</code></pre>\n</li>\n</ul>\n<h4>POST</h4>\n<ul>\n<li>It transfers information via HTTP header, not throought the URL.</li>\n<li>The POST method does not have any restriction on data size.</li>\n<li>The POST method can be used to send ASCII as well as binary data.</li>\n<li>The data sent by POST  method goes through HTTP header, so security depends on\nHTTP protocol.</li>\n<li>By using secure HTTP, we can make sure that our information is secure.</li>\n<li>The PHP provides $_POST associative array to access all the sent information\nusing POST method.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\tName: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ($_POST[&quot;name&quot;]) {\n\techo $_POST[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n<li>Output<pre><code>Name: Joey\nSubmit\n\nJoey\n</code></pre>\n</li>\n</ul>",
      "date_published": "2022-12-15T06:38:49.390Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=UT2 6S&description=PHP%20Unit%202%20AB%201.%20Write%20the%20syntax%20for%20creating%20Cookie.%20%20To%20set%20cookie%20in%20PHP,%20the%20setcookie()%20function%20is%20used.%20Syntex:setcookie($name,%20$value,%20$expire_time,%20$path,%20$domain)%20%20%20setcookie()%20function%20the%20parameters.%20%20name%20-%20Name%20of%20the%20cookie,%20which%20is%20used%20with%20$_COOKIE%20function%20to&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/php/ut1-6s.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/php/ut1-6s.html",
      "title": "UT1 6S",
      "content_html": "<h2>Write a php program to find the largest number among three numbers.</h2>\n<pre><code class=\"language-php\">&lt;?php\n  function largest($x, $y, $z) {\n    if ($x &gt;= $y) {\n      if($x &gt;= $z) {\n        echo $x;\n      } else {\n        echo $z;\n      }\n    }\n    else {\n      if($y &gt;= $z) {\n        echo $y;\n      } else {\n        echo $z;\n      }\n    }\n  }\n\n  largest(100, 50, 25);\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>100\n</code></pre>\n<h2>Write a php code for creating a basic image.</h2>\n<pre><code class=\"language-php\">&lt;?php\n$image = imagecreatetruecolor(500, 300);\nimagefilledrectangle($image, 20, 20, 480, 280);\nheader(&quot;Content-type: image/png&quot;);\nimagepng($image);\n?&gt;\n</code></pre>\n<h2>Explain inheritance with examples.</h2>\n<p>In Inheritance  the new class can inherit the properties and methods from the\nold class.</p>\n<p>The old class is the base class also called a parent class and then the new\nclass is a derived  class also called a subclass.</p>\n<p><strong>Example</strong>:</p>\n<pre><code class=\"language-php\">&lt;?php\n  class Person {\n    var $name, $age;\n  }\n  class Employee extends Person {\n    var $salary, $designation;\n  }\n?&gt;\n</code></pre>\n<h2>Explain the concept of introspection in php with an example.</h2>\n<p>PHP Introspection is the ability of a program to examine an object’s\ncharacteristics such as its name, parent class (if any), properties and methods.</p>\n<p>Introspection  in PHP offers a useful Ability  to examine classes’ interfaces\nproperties methods. With introspection we can write  code that operates on any\nobject or class.</p>\n<p><strong>Example</strong>:</p>\n<pre><code class=\"language-php\">&lt;?php\n  if (class_exists('MyClass')) {\n    $myclass = new MyClass();\n  }\n?&gt;\n</code></pre>\n<h2>How to use overloading and overriding functions in php?</h2>\n<h2>Overloading</h2>\n<p>Method overloading is the ability to create a multiple function\nof the same name with a different implementation  depending upon the types of\narguments.</p>\n<p>How to use overloading in PHP?</p>\n<pre><code class=\"language-php\">&lt;?php\nclass First {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Second extends First {\n  function func() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$o = new Second;\n$o-&gt;func();\n</code></pre>\n<p>O/P</p>\n<pre><code>Bye World\n</code></pre>\n<h2>Overriding</h2>\n<p>In function overriding, both parent and child classes should have the same\nfunction name with and number of arguments. It is used to replace the parent\nmethod in child class.</p>\n<pre><code class=\"language-php\">&lt;?php\n&lt;?php\nclass First {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Second extends First {\n  function func() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$f = new First;\n$s = new Second;\n$f-&gt;func();\n$s-&gt;func();\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Hello World\nBye World\n</code></pre>\n<h2>How to use the flip function in php.</h2>\n<p>The array_flip function flips/All keys with their associated values in array.</p>\n<p>This function is very useful when we have a big/ large array.and we want to\nknow if a given value  is in the array.</p>\n<p><strong>Syntax</strong>:</p>\n<pre><code>array_flip(array_name)\n</code></pre>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  $a = array(&quot;a&quot;);\n  print_r(array_flip($a));  //flip function is used\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Array( [0]=&gt; a )\n</code></pre>\n<h2>How to define properties and methods of a class? Explain with suitable examples.</h2>\n<ol>\n<li>Objects have access to special variables called. properties.</li>\n<li>A property Can be valued as an array and even another object.</li>\n<li>All properties go inside the curly braces.</li>\n<li>The characteristics of a class are known as its properties.</li>\n</ol>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  class Student {\n    var $roll_no;\n    var $name;\n    function display() {\n      echo &quot;Roll No: &quot; . $this-&gt;roll_no. &quot;&lt;br&gt;&quot;;\n      echo &quot;Name: &quot; $this-&gt;name;\n    }\n  }\n\n  $s1 = new Student;\n  $s1-&gt;roll_no = 10;\n  $s1-&gt;name = &quot;Amar&quot;;\n  $si-&gt;display();\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Roll No: 10\nName: Amar\n</code></pre>\n<p>A class method is exactly similar to PHP functions.</p>\n<ol>\n<li>Method is a function defined within the class.</li>\n<li>Methods on the other hand are functions that operate on the data.</li>\n<li>Method is also written within the braces {}.</li>\n</ol>\n<p>The method can be accessed from outside the class.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\nclass Person {\n\tpublic $age = 25;\n\n\tpublic function printAge() {\n\t\techo &quot;The age is: $this-&gt;age&quot;;\n\t}\n}\n\n$person = new Person;\n$person-&gt;age = 20;\n$person-&gt;printAge();\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>The age is: 20\n</code></pre>\n<h2>Explain the arithmetic operators that can be used in php with examples.</h2>\n<p>The PHP arithmetic operators are used with numeric values to perform common\narithmetical operations, such as addition, subtraction, multiplication etc.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  $a = 42;\n  $b = 20;\n\n  $c = $a + $b;\n  echo &quot;Addition is: $c &lt;br/&gt;&quot;;\n  $c = $a - $b;\n  echo &quot;Subtraction is: $c &lt;br/&gt;&quot;;\n  $c = $a * $b;\n  echo &quot;Multiplication is: $c &lt;br/&gt;&quot;;\n  $c = $a / $b;\n  echo &quot;Division is: $c &lt;br/&gt;&quot;;\n  $c = $a % $b;\n  echo &quot;Modulus is: $c &lt;br/&gt;&quot;;\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Addition is: 62\nSubtraction is: 22\nMultiplication is: 840\nDivision is: 2.1\nModulus is: 2\n</code></pre>\n<h2>What is the use of anonymous functions in php? Explain with examples.</h2>\n<p>Anonymous functions, also known as closures, allow the creation of functions\nwhich have no specified name. They are most useful as the value of callable\nparameters, but they have many other uses.</p>\n<pre><code class=\"language-php\">&lt;?php\n$func = function () { echo &quot;Hello World&quot;; };\n$func();\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>Explain cloning objects with examples.</h2>\n<p>Object cloning is the process in PHP to create a copy of an object. An object\ncopy is created by using the clone keyword when the object is cloned PHP will\nperform Shallow copy  of all the object properties and properties that are\nreferenced to their variables will remain references.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  public $name;\n}\n\n$o = new Obj;\n$c = clone $o;\n\n$o-&gt;name = &quot;Jonney&quot;;\n$c-&gt;name = &quot;Jone&quot;;\n\necho &quot;Origenal: &quot;.$o-&gt;name.&quot;, Clone: &quot;.$c-&gt;name;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Origenal: Jonney, Clone: Jone\n</code></pre>\n<h2>Explain indexed and associative arrays with examples.</h2>\n<p>Indexed array: An array having only integer keys is typically referred to as an\nindexed array and index arrays can store numbers, drinks and any object but\ntheir index will be represented by number.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  $colors = array(&quot;Red&quot;);\n  print_r($colors);\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Array ( [0] =&gt; Red )\n</code></pre>\n<p>The associative arrays are very similar to numeric arrays in terms of\nfunctionality but they are different in terms of their index. Associative arrays\nwill have their index as string so that you can establish a strong association\nbetween key and values.</p>\n<pre><code class=\"language-php\">&lt;?php\n  $ages = array( &quot;Peter&quot;=&gt;22 );\n  print_r($ages);\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>Array ( [Peter] =&gt; 22 )\n</code></pre>\n<h2>How to define constructor and destructor in php with an example?</h2>\n<ul>\n<li><strong>constructor</strong> - When we create a new object it is useful to initialize its\nproperties.</li>\n<li><strong>destructor</strong> - The destructor method will be called as soon as there are no\nother references to a particular object.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  function __construct() {\n    echo &quot;Class created&quot;;\n  }\n\n  function __destruct() {\n    echo &quot;Class destroyed&quot;;\n  }\n}\n\n$o = new Obj;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Class Created\nClass Destroyed\n</code></pre>\n<h2>Explain the following string function with an example.</h2>\n<ol>\n<li>strpos()</li>\n<li>strlen()</li>\n<li>strcmp()</li>\n<li>str_word_count()</li>\n<li>strpos()</li>\n</ol>\n<ul>\n<li><strong>strpos()</strong> - Returns the position of the first occurrence of a string.</li>\n<li><strong>strlen()</strong> - Returns the length of a string.</li>\n<li><strong>strcmp()</strong> - Compares two strings.</li>\n<li><strong>str_word_count()</strong> - Count the number of words in a string.</li>\n<li><strong>strrpos()</strong> - Finds the position of the last occurrence of a string.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\necho strpos(&quot;Hello World&quot;, &quot;Hello&quot;);\necho strlen(&quot;Hello World&quot;);\necho strcmp(&quot;Hello World&quot;, &quot;Hello World&quot;);\necho str_word_count(&quot;Hello World&quot;);\necho strrpos(&quot;Hello World&quot;, &quot;Hello&quot;);\n</code></pre>\n<p>O/P</p>\n<pre><code>0\n11\n0\n2\n0\n</code></pre>\n<h2>Write a program using a foreach loop.</h2>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(1, 2, 3, 4, 5);\nforeach ($a as $n) {\n  echo $n;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>12345\n</code></pre>\n<h2>Explain serialization with suitable examples.</h2>\n<p>A string representation of any object in the form of byte-stream is obtained by\nserialize() function in PHP. All property variables of the object are contained\nin the string and methods are not saved. This string can be stored in any file.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\necho serialize(array(&quot;Red&quot;));\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>a:1:{i:0;s:3:&quot;Red&quot;;}\n</code></pre>\n<h2>Define <code>imagecolorallocate()</code> function along with suitable examples.</h2>\n<p><code>imagecolorallocate()</code> function is another inbuilt PHP function mainly used to\nimplement a new color to an image. It returns the color of an image in an RGB\nformat (RED GREEN BLUE).</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  $im = imagecreate(100, 100);\n  // sets background to red\n  $background = imagecolorallocate($im, 255, 0, 0);\n  // sets some colors\n  $white = imagecolorallocate($im, 255, 255, 255);\n  $black = imagecolorallocate($im, 0, 0, 0);\n  // hexadecimal way\n  $white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);\n  $black = imagecolorallocate($im, 0x00, 0x00, 0x00);\n?&gt;\n</code></pre>\n<h2>Write a program to create a filled rectangle.</h2>\n<pre><code class=\"language-php\">&lt;?php\n$image = imagecreatetruecolor(500, 300);\nimagefilledrectangle($image, 20, 20, 480, 280);\nheader(&quot;Content-type: image/png&quot;);\nimagepng($image);\n?&gt;\n</code></pre>\n<h2>Explain any three data types used in php.</h2>\n<ol>\n<li><strong>Integer:</strong> integer data type used to specify a numeric value  without a fractional component the range of integers.</li>\n<li><strong>Strings:</strong> a string is a sequence of characters where characters are the same as a byte.</li>\n<li><strong>Boolean:</strong>   boolean  value can be either true or false both are  case-insensitive.</li>\n</ol>\n<h2>Differentiate between implode and explode function.</h2>\n<table>\n<thead>\n<tr>\n<th>No.</th>\n<th>Implode</th>\n<th>Explode</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>The implode() function returns a string from the elements of an array.</td>\n<td>explode function breaks a string  into smaller parts and stores it  as an array.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>The implode() function accepts its  parameters in either order.  However, for consistency with explode(),  you should use the documented order of  arguments.</td>\n<td>The explode() function splits  these strings based on a specific  delimiter and returns an array that  contains elements which are sustained  by the splitting operation.</td>\n</tr>\n<tr>\n<td>3</td>\n<td>syntax :-string implode (pieces)</td>\n<td>array explode (delimiter, string, limit)</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>Example</strong>:  <code>php &lt;?php $arr = array(&quot;I&quot;, &quot;love&quot;, &quot;PHP.&quot;); $pole = implode(&quot; &quot;, $arr); \\ echo &quot;$pole&quot;; ?&gt; </code>  Output: I love PHP.</td>\n<td>Example: <?php  $string = \"I love php.\"; $pole = explode(\" \", $string); \\ \\ print_r($pole); ?>  Output: Array ( [0] =&gt; I [1] =&gt; love [2] =&gt; php. )</td>\n</tr>\n</tbody>\n</table>\n<h2>State the variable function. Explain it with an example.</h2>\n<p>PHP supports the concept of variable function means that we can call a function\nbased on a value of a variable if a variable name has a round parentheses\nappended to it PHP will look for a function with the same name as a whatever\nvariable Evaluates to and will attempt to execute it.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-php\">&lt;?php\n  function add($x, $y){\n    echo $x + $y;\n  }\n  $var =  &quot;add&quot;;\n  $var(10,20);\n?&gt;\n</code></pre>\n<p><strong>Output:</strong></p>\n<pre><code>30\n</code></pre>",
      "date_published": "2022-12-15T06:38:49.390Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=UT1 6S&description=Write%20a%20php%20program%20to%20find%20the%20largest%20number%20among%20three%20numbers.%20&lt;?php%20%20%20function%20largest($x,%20$y,%20$z)%20{%20%20%20%20%20if%20($x%20&gt;=%20$y)%20{%20%20%20%20%20%20%20if($x%20&gt;=%20$z)%20{%20%20%20%20%20%20%20%20%20echo%20$x;%20%20%20%20%20%20%20}%20else%20{%20%20%20%20%20%20%20%20%20echo%20$z;%20%20%20%20%20%20%20}%20%20%20%20%20}%20%20%20%20%20else%20{%20%20%20%20%20%20%20if($y%20&gt;=%20$z)%20{%20%20%20%20%20%20%20%20%20echo%20$y;%20%20%20%20%20%20%20}%20&right_meta=AK%23Notes&background_color=%23bd8bf2"
    },
    {
      "id": "https://anzenkodo.github.io/notes/programming/languages/php/notes.html",
      "url": "https://anzenkodo.github.io/notes/programming/languages/php/notes.html",
      "title": "Notes",
      "content_html": "<h1>1. Expressions and Control Statements in PHP</h1>\n<h2>1. What is web application?</h2>\n<ul>\n<li>A Web application is a computer software or program that performs some\nspecific tasks at its client by using a Web browser.</li>\n<li>The Web-based applications are also known as Web apps.</li>\n<li>Web applications are usually based on the client-server architecture where\nthe client input/request data while the server stores and responds with\nresult.</li>\n</ul>\n<h2>3. What is PHP?</h2>\n<ul>\n<li>PHP is a widely used open source language that is specifically used for web\napplication development and can be embedded within HTML.</li>\n<li>PHP is a server-side scripting language that is used in Web based\napplications.</li>\n<li>PHP is a general-purpose programming language originally designed for web\napplication development. PHP is a recursive. acronym for “PHP: Hypertext\nPreprocessor”.</li>\n</ul>\n<h2>4. Enlist features of PHP.</h2>\n<ul>\n<li><strong>Web Application Features</strong> - PHP is a programming language support most\ncommonly used Web application features like HTTP Cookie, Session, File\nUpload, etc.</li>\n<li><strong>CLI (Command Line Interface)</strong> - PHP is commonly used to write Web\napplications to be integrated to Web servers using the Common Gateway\nInterface (CGI).</li>\n<li><strong>Built-in Modules</strong> - The standard PHP build comes with many free and open\nsource libraries included as built-in modules.</li>\n<li><strong>Object-Oriented Programming (OOP)</strong> - PHP supports object-oriented\nprogramming features like object.</li>\n<li><strong>Pre-Compilation</strong> - PHP Web applications are usually deployed in source\ncode, which will be interpreted on-the-fly when Web requests arrive to the\nserver.</li>\n<li><strong>Real Time Access Monitoring</strong> - PHP provides access logging by creating the\nsummary of recent accesses for the user.</li>\n<li><strong>File I/O</strong> - PHP supports most commonly used file I/O features like local\nfile and path management, remote resource access using Internet protocols\nlike HTTP and FTP.</li>\n</ul>\n<h2>5. What is variable? How to declare it? Explain with example.</h2>\n<ul>\n<li>PHP variables are nothing but a named storage locations in the memory.</li>\n<li>A variable is a named container in a PHP script in which a data value can be\nstored.</li>\n<li>A variable starts with the ($) sign, followed by the name of the variable.</li>\n<li><strong>Syntax</strong> - $var</li>\n</ul>\n<pre><code class=\"language-php\">$var = &quot;Hello World&quot;;\necho $var;\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>6. Explain constants in PHP with example.</h2>\n<ul>\n<li>A PHP script is executed on the server, and the plain HTML result is sent\nback to the browser.</li>\n<li>A PHP script can be placed anywhere in the document. A PHP programming script\nstarts with <code>&lt;?php</code> and ends with <code>?&gt;</code>.</li>\n<li>The default file extension for PHP files is “.php”.</li>\n<li>A PHP file normally contains HTML tags and some PHP scripting code.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?phh\n  $var = &quot;Hello World&quot;\n  echo $var;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>7. What are the decision statements used by PHP?</h2>\n<h3><code>if</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$x = -12;\n\nif ($x &gt; 0) {\n  echo &quot;The number is positive&quot;;\n}\n\nelse{\n  echo &quot;The number is negative&quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>The number is negative\n</code></pre>\n<h3><code>if else</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$x = &quot;August&quot;;\n\nif ($x == &quot;January&quot;) {\n  echo &quot;Happy Republic Day&quot;;\n} elseif ($x == &quot;August&quot;) {\n  echo &quot;Happy Independence Day!!!&quot;;\n} else {\n  echo &quot;Nothing to show&quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Happy Independence Day!!!\n</code></pre>\n<h3>Nested <code>if</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$a = 10;\n$b = 20;\n\nif ($a == 10) {\n  if ($b == $20) {\n      echo &quot;The addiotion is: &quot;.($a + b);\n  }\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>The addition is 30\n</code></pre>\n<h3><code>switch case</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$n = &quot;Monday&quot;;\n\nswitch($n) {\n  case &quot;Monday&quot;:\n    echo &quot;Its Monday&quot;;\n    break;\n  case &quot;Tuesday&quot;:\n    echo &quot;Its Tuesday&quot;;\n    break;\n  case &quot;Wednesday&quot;:\n    echo &quot;Its Wednesday&quot;;\n    break;\n  case &quot;Thuesday&quot;:\n    echo &quot;Its Thuesday&quot;;\n    break;\n  case &quot;Friday&quot;:\n    echo &quot;Its Friday&quot;;\n    break;\n  case &quot;Saturday&quot;:\n    echo &quot;Its Saturday&quot;;\n    break;\n  case &quot;Sunday&quot;:\n    echo &quot;Its Suday&quot;;\n    break;\n  default:\n    echo &quot;Doesn't exist&quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Its Monday\n</code></pre>\n<h2>8. Describe loops in PHP.</h2>\n<h3><code>while</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$num = 0;\n\nwhile ($num &lt;= 10) {\n  echo $num;\n  $num++;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>012345678910\n</code></pre>\n<h3><code>do while</code> statement</h3>\n<pre><code class=\"language-php\">&lt;?php\n$x = 1;\n\ndo {\n  echo &quot;The number is: $x &lt;br&gt;&quot;;\n  $x++;\n} while ($x &lt;= 5);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>The number is: 1\nThe number is: 2\nThe number is: 3\nThe number is: 4\nThe number is: 5\n</code></pre>\n<h3><code>for</code> loop</h3>\n<pre><code class=\"language-php\">&lt;?php\nfor ($i = 1; $i &lt;= 10; $i++) {\n  echo $i.&quot; &quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>1 2 3 4 5 6 7 8 9 10\n</code></pre>\n<h2>10. Define the term expressions with example.</h2>\n<ul>\n<li>An expression is a piece of code that evaluates to a value.</li>\n<li>A value a number, a string of text, or a Boolean.</li>\n<li>An expression is a combination of values, variables, operators, and functions\nthat results in a value.</li>\n<li>Like <code>$z = $x+$y</code>, where <code>$x + $y</code> is the expression.</li>\n</ul>\n<h2>11. Describe data types in PHP in detail.</h2>\n<ul>\n<li>A data type is defined as, “a set of values and the allowable operations on\nthose values”.</li>\n<li>The data type determines the operations that we can perform on it.</li>\n<li>PHP supports eight primitive types:\n<ul>\n<li>Four Scalar Types:\n<ul>\n<li><strong>Integer</strong> - The integer data type is used to specify a numeric value.</li>\n<li><strong>Float</strong> - Floating point numbers are real numbers, representing numeric\nvalues with decimal digits.</li>\n<li><strong>String</strong> - A string is a sequence of characters where a character is\nthe same as a byte.</li>\n<li><strong>Boolean</strong> - .Boolean value can be either TRUE value or FALSE value.</li>\n</ul>\n</li>\n<li>Two Compound Types:\n<ul>\n<li><strong>Array</strong> - An array stores group of values under single variable name.</li>\n<li><strong>Object</strong> - PHP supports Object Oriented Programming (OOP).</li>\n</ul>\n</li>\n<li>Two Special Types:\n<ul>\n<li><strong>Resource</strong> - The resource is a special PHP data type that refers to\nexternal resource (e.g. file, image etc.).</li>\n<li><strong>Null</strong> - The null value represents a variable that has no value.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>12. Explain variable scope in PHP.</h2>\n<ul>\n<li>Scope of variable is an area or part of program in which it is\naccessible/visible.</li>\n<li>There are two type of scope in PHP:\n<ul>\n<li><strong>Local Scope</strong> - A variable which is declared inside the function is\ncalled as local variable.</li>\n<li><strong>Global Scope</strong> - Variables declared outside function are by default\nglobal variables and can accessed from any part of program.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$a = &quot;Hello&quot; // Global Scope\n\nfunction func() {\n  $b = &quot;World&quot;; // Local scope\n}\n</code></pre>\n<h2>13. Write the difference between break and continue statement of PHP with example.</h2>\n<h3><code>break</code></h3>\n<ul>\n<li>You have already seen the break statement used in an earlier chapter of this\ntutorial. It was used to “jump out” of a switch statement.</li>\n<li>The break statement can also be used to jump out of a loop.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nfor ($x = 0; $x &lt; 10; $x++) {\n  if ($x == 4) {\n    break;\n  }\n  echo $x.&quot; &quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>0 1 2 3\n</code></pre>\n<h3><code>continue</code></h3>\n<ul>\n<li>The continue statement breaks one iteration (in the loop), if a specified\ncondition occurs, and continues with the next iteration in the loop.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nfor ($x = 0; $x &lt; 10; $x++) {\n  if ($x == 4) {\n    continue;\n  }\n  echo $x.&quot; &quot;;\n}\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>0 1 2 3 5 6 7 8 9\n</code></pre>\n<h2>16. Find output:</h2>\n<pre><code class=\"language-php\">&lt;?php\n  $a= &quot;9 Lives.&quot; -1;\n  var_dump($a);\n?&gt;\n</code></pre>\n<h2>17. Find the output.</h2>\n<pre><code class=\"language-php\">&lt;?php\n  $str = &quot;welcome&quot;;\n  echo &quot;You are $str&quot;;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>You are welcome\n</code></pre>\n<h2>18. Write program to find a area of rectangle.</h2>\n<pre><code class=\"language-php\">&lt;?php\n $length = 14;\n $width = 12;\n echo &quot;area of rectangle is $length * $width= &quot; . ($length * $width) . &quot;&lt;br /&gt;&quot;;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>area of rectangle is 14 * 12= 168\n</code></pre>\n<h1>2. Arrays, Function and Graphics</h1>\n<h2>2. How to create an array? Explain with example.</h2>\n<ul>\n<li>An array is a special variable, which can hold more than one value at a time.</li>\n<li>To create array we use <code>array()</code> function.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$array = array(&quot;Hello&quot;, &quot;World&quot;);\nprint_r($array);\n</code></pre>\n<p>O/P</p>\n<pre><code>Array ( [0] =&gt; &quot;Hello&quot;, [1] =&gt; &quot;World&quot; )\n</code></pre>\n<h2>3. What is string?</h2>\n<ul>\n<li>A string is collection of characters.</li>\n<li>A string is series of characters, where a character is the same as a byte.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$string = &quot;Hello World&quot;;\n?&gt;\n</code></pre>\n<h2>4. What is function?</h2>\n<ul>\n<li>A function is a block of statements that can be used repeatedly in a program.</li>\n<li>A function will be executed by a call to the function.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nfunction func() {\n  echo &quot;Hello World&quot;;\n}\nfunc();\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>5. How to extract data from array? Explain with example.</h2>\n<ul>\n<li>The extract() function imports variables into the local symbol table from an\narray.</li>\n<li>This function uses array keys as variable names and values as variable\nvalues. For each element it will create a variable in the current symbol\ntable.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$color[&quot;red&quot;] = &quot;#rrr&quot;;\nextract($color);\necho $red;\n</code></pre>\n<p>O/P</p>\n<pre><code>#rrr\n</code></pre>\n<h2>6. Enlist types of arrays. Describe with example.</h2>\n<h3>Indexed array</h3>\n<p>Indexed Arrays are arrays in which the elements are ordered based on index.</p>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;);\necho &quot;My fav color is: &quot;.$a[0];\n</code></pre>\n<p>O/P</p>\n<pre><code>My fav color is: Red\n</code></pre>\n<h3>Associative Arrays</h3>\n<p>Associative arrays are arrays that use named keys that you assign to them.</p>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(&quot;Red&quot;=&gt;1, &quot;Blue&quot;=&gt;2, &quot;Green&quot;=&gt;3);\necho $a[&quot;Red&quot;].$a[&quot;Blue&quot;],$a[&quot;Green&quot;];\n</code></pre>\n<p>O/P</p>\n<pre><code>123\n</code></pre>\n<h3>Multidimensional array</h3>\n<p>A multidimensional array is an array containing one or more arrays.</p>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(array(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;));\necho &quot;My fav color is: &quot;.$a[0][1];\n</code></pre>\n<p>O/P</p>\n<pre><code>My fav color is: Blue\n</code></pre>\n<h2>8. How to add image in PHP? Explain with example.</h2>\n<pre><code class=\"language-php\">&lt;?php\n$image = imagecreatetruecolor(500, 300);\nimagefilledrectangle($image, 20, 20, 480, 280);\nheader(&quot;Content-type: image/png&quot;);\nimagepng($image);\n?&gt;\n</code></pre>\n<h2>14. With the help of example describe traversing of array.</h2>\n<p>Traversing an array means to visit each and every element of array using a\nlooping structure and iterator functions.</p>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(1, 2, 3, 4, 5);\nforeach ($a as $n) {\n  echo $n;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>12345\n</code></pre>\n<h2>16. Which operations performed on string in PHP?</h2>\n<ul>\n<li><strong>strrev()</strong> - Reverses a string.</li>\n<li><strong>strpos()</strong> - Returns the position of the first occurrence of a string.</li>\n<li><strong>strrpos()</strong> - Finds the position of the last occurrence of a string.</li>\n<li><strong>str_replace()</strong> - Replaces some characters in a string.</li>\n<li><strong>ucwords()</strong> - Converts the first character of each word in a string to\nuppercase.</li>\n<li><strong>strtoupper()</strong> - Converts a string to uppercase letters.</li>\n<li><strong>strtolower()</strong> - Converts a string to lowercase letters.</li>\n<li><strong>strcmp()</strong> - Compares two strings.</li>\n<li><strong>str_word_count()</strong> - Count the number of words in a string.</li>\n<li><strong>strlen()</strong> - Returns the length of a string.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nstrrev(&quot;Hello World&quot;);\nstrpos(&quot;Hello World&quot;, &quot;Hello&quot;);\nstrrpos(&quot;Hello World&quot;, &quot;Hello&quot;);\nstr_replace(&quot;Hello&quot;, &quot;Bye&quot;, &quot;Hello World&quot;);\nucwords(&quot;hello world&quot;);\nstrtoupper(&quot;Hello World&quot;);\nstrtolower(&quot;Hello World&quot;);\nstrcmp(&quot;Hello World&quot;, &quot;Hello World&quot;);\nstr_word_count(&quot;Hello World&quot;);\nstrlen(&quot;Hello World&quot;);\n</code></pre>\n<p>O/P</p>\n<pre><code>dlroW olleH\n0\n0\nBye World\nHello World\nHELLO WORLD\nhello world\n0\n2\n11\n</code></pre>\n<h2>18. Explain the following types of functions with example:</h2>\n<h3>(i) User defined functions</h3>\n<p>A function is a block of statements that can be used repeatedly in a program.</p>\n<pre><code class=\"language-php\">&lt;?php\nfunction func() {\n  echo &quot;Hello World&quot;;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h3>(ii) Variable function</h3>\n<p>If a variable name has parentheses appended to it, PHP will look for a function\nwith the same name as whatever the variable evaluates</p>\n<pre><code class=\"language-php\">&lt;?php\nfunction func() {\n  echo &quot;Hello World&quot;;\n}\n\n$f = &quot;func&quot;;\n$f();\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h3>(iii) Anonymous function.</h3>\n<p>Anonymous function is a function without any user defined name.</p>\n<pre><code class=\"language-php\">&lt;?php\n$func = function () { echo &quot;Hello World&quot;; };\n$func();\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\n</code></pre>\n<h2>18. How to create PDF in PHP? Describe with example.</h2>\n<pre><code class=\"language-php\">&lt;?php\nrequire('fpdf.php');\n$pdf = new FPDF();\n$pdf-&gt;AddPage();\n$pdf-&gt;SetFont('Arial', 'B', 16);\n$pdf-&gt;Cell(40, 10, &quot;Hello World&quot;);\n$pdf-&gt;Output();\n?&gt;\n</code></pre>\n<h2>19. How to scaling an image in PHP?</h2>\n<pre><code class=\"language-php\">&lt;?php\n$image = imagecreatefrompng(&quot;image.png&quot;);\n$img = imagescale($image, 500, 500);\nheader(&quot;Content-type: image/png&quot;);\nimagepng($img);\n</code></pre>\n<h2>20. Explain array_flip() function with example.</h2>\n<ul>\n<li>The array_flip() function flips/exchanges all keys with their associated\nvalues in an array.</li>\n<li><strong>Syntax</strong> - <code>array_flip($array)</code></li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$a = array(&quot;Hello&quot;, &quot;World&quot;);\nprint_r(array_flip($a));\n</code></pre>\n<p>O/P</p>\n<pre><code>Array ( [Hello] =&gt; 0, [World] =&gt; 1 )\n</code></pre>\n<h1>3. Apply Object Oriented Concepts in PHP</h1>\n<h2>1. What is OOP?</h2>\n<ul>\n<li>In object oriented programming, everything will be around the objects and\nclass.</li>\n<li>By using OOP in PHP we can create modular web application.</li>\n<li>By using OOP in PHP we can perform any activity in the object model structure.</li>\n<li>OPP helps in building complex, reusable web applications.</li>\n<li>Object Oriented is an approach to software development that models\napplication around real world objects such as employees, cars, bank accounts,\netc.</li>\n<li>A class defines the properties and methods of a real world object.</li>\n<li>An object is an occurrence of a class.</li>\n</ul>\n<h2>2. What is object?</h2>\n<ul>\n<li>An object is an instance or occurrence of a class.</li>\n<li>Anything in the world is an object like laptop, books, car etc. even object\nhas two thing properties and behaviors.</li>\n<li>The data associated with an object are called its properties.</li>\n<li>The functions associated with an object are called its methods.</li>\n<li>We can group similar objects with the same characteristics and behaviors in\ninto one class.</li>\n</ul>\n<h2>5. What is inheritance?</h2>\n<ul>\n<li>The old class is the base class, also called as parent class or super class,\nand the new class is the derived class also called as child class or sub\nclass.</li>\n<li>The derived class has its own variables and methods plus variables and\nmethods from the base class.</li>\n<li>The <code>extends</code> keyword is used for the inheritance.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Class1 {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Class2 extends Class1 {\n  function echo() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$o = new Class2;\n$o-&gt;func();\n$o-&gt;echo();\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\nBye World\n</code></pre>\n<h2>6. Describe method overloading with example.</h2>\n<p>If the derived class is having the same method name as the base class then the method in the derived class takes precedence over or overrides the base class method.</p>\n<pre><code class=\"language-php\">&lt;?php\nclass First {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Second extends First {\n  function func() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$o = new Second;\n$o-&gt;func();\n</code></pre>\n<h2>7. Explain sleep and wakeup functions?</h2>\n<ul>\n<li>These functions are used to notify objects that they are being serialized or\nunserialised.</li>\n</ul>\n<h3><code>__sleep()</code></h3>\n<ul>\n<li>serialize() checks if our class has a function with the magic name sleep().</li>\n<li>If so, that function is executed prior (i.e. just before) to any\nserialization.</li>\n</ul>\n<h3><code>__wakeup()</code></h3>\n<ul>\n<li>unserialize() checks for the presence of a function with the magic name ___\nwakeup().</li>\n<li>If present, this function can reconstruct any resources that the object may\nhave.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  function __sleep() {\n    $this-&gt;name = &quot;Jonney&quot;;\n    echo &quot;Obj is serialize()&quot;;\n    return array(&quot;name&quot;);\n  }\n\n  function __wakeup() {\n    echo &quot;Obj is unserialize()&quot;;\n  }\n}\n\n$o = new Obj;\n$s = serialize($o);\nunserialize($s);\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Obj is serialize()\nObj is unserialize()\n</code></pre>\n<h2><code>__call</code></h2>\n<ul>\n<li>The __call() method is invoked automatically when a non-existing method or\ninaccessible method is called.</li>\n<li>The __call() method accepts two arguments:\n<ul>\n<li>$name is the name of the method that is being called by the object.</li>\n<li>$arguments is an array of arguments passed to the method call.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  function __call($method, $parameters) {\n    print_r($method);\n    print_r($parameters);\n  }\n}\n\n$o = new Obj;\n$o-&gt;hello(&quot;World&quot;);\n</code></pre>\n<p>O/P</p>\n<pre><code>hello\nArray ( [0] =&gt; &quot;World&quot; )\n</code></pre>\n<h2>8. What serialization in PHP?</h2>\n<ul>\n<li>Serialization of data means converting it into a string of bytes in such a\nway that you can produce the original data again from the string via a\nprocess as unserialization.</li>\n<li>After you have the ability to serialize/unserialize, you can store your\nserialized string anywhere and recreate a copy of the data again when needed.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\necho serialize(array(&quot;Red&quot;));\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>a:1:{i:0;s:3:&quot;Red&quot;;}\n</code></pre>\n<ul>\n<li>O/P means:\n<ul>\n<li>a:1 - <strong>a</strong>rray - There are <strong>1</strong> array.</li>\n<li>i:0 - <strong>i</strong>tem - This is <strong>0</strong>th item.</li>\n<li>s:3 - <strong>s</strong>tring - There are <strong>3</strong> string in <strong>“Red”</strong>.</li>\n</ul>\n</li>\n</ul>\n<h2>10. Define method overriding.</h2>\n<ul>\n<li>In function overriding, both parent and child classes should have same\nfunction name with and number of arguments.</li>\n<li>It is used to replace parent method in child class.</li>\n<li>The purpose of overriding is to change the behavior of parent class method.</li>\n<li>The two methods with the same name and same parameter is called overriding.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass First {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\nclass Second extends First {\n  function func() {\n    echo &quot;Bye World&quot;;\n  }\n}\n\n$f = new First;\n$s = new Second;\n$f-&gt;func();\n$s-&gt;func();\n</code></pre>\n<p>O/P</p>\n<pre><code>Hello World\nBye World\n</code></pre>\n<h2>12. What is object cloning? Describe with example.</h2>\n<ul>\n<li>Object cloning is the process in PHP to create a copy of an object.</li>\n<li>An object copy is created by using the clone keyword when the object is\ncloned PHP will perform Shallow copy of all the object properties and\nproperties that are referenced to their variables will remain references.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  public $name;\n}\n\n$o = new Obj;\n$c = clone $o;\n\n$o-&gt;name = &quot;Jonney&quot;;\n$c-&gt;name = &quot;Jone&quot;;\n\necho &quot;Origenal: &quot;.$o-&gt;name.&quot;, Clone: &quot;.$c-&gt;name;\n?&gt;\n</code></pre>\n<h2>13. Define the terms:</h2>\n<h3>(i) Object</h3>\n<p>Objects are the things you create out of a class.</p>\n<h3>(ii) Class</h3>\n<p>A class is what you use to define the properties, methods and behavior of objects.</p>\n<h3>(iii) Inheritance</h3>\n<ul>\n<li>The old class is the base class, also called as parent class or super class,\nand the new class is the derived class also called as child class or sub\nclass.</li>\n</ul>\n<h3>(iv) Constructor.</h3>\n<ul>\n<li>When we create a new object it is useful to initialize its properties.</li>\n<li>PHP provides us with a special method to help initialize an object’s\nproperties called a constructor.</li>\n</ul>\n<h2>16. Differentiate between constructor and destructor.</h2>\n<ul>\n<li><strong>constructor</strong> - When we create a new object it is useful to initialize its\nproperties.</li>\n<li><strong>destructor</strong> - The destructor method will be called as soon as there are no\nother references to a particular object.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  function __construct() {\n    echo &quot;Class created&quot;;\n  }\n\n  function __destruct() {\n    echo &quot;Class destroyed&quot;;\n  }\n}\n\n$o = new Obj;\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Class Created\nClass Destroyed\n</code></pre>\n<h2>17. Compare object and class.</h2>\n<ul>\n<li>A class is what you use to define the properties, methods and behavior of\nobjects.</li>\n<li>Objects are the things you create out of a class.</li>\n</ul>\n<h2>18. How to examine classes in introspection? Explain with example.</h2>\n<ul>\n<li>PHP Introspection is the ability of a program to examine an object’s\ncharacteristics such as its name, parent class (if any), properties and\nmethods.</li>\n<li>Introspection in PHP offers a useful Ability to examine classes’ interfaces\nproperties methods. With introspection we can write code that operates on any\nobject or class.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {}\n\nclass Obj2 extends Obj {\n  public $hello = &quot;world&quot;;\n  function func() {}\n}\n$o = new Obj2;\n\nif (class_exists('Obj2')) {\n  echo &quot;Class exists&quot;;\n}\nif (is_object($o)) {\n  echo &quot;Is object&quot;;\n}\n\nprint_r(get_class($o));\nprint_r(get_class_methods($o));\nprint_r(get_class_vars('Obj'));\nprint_r(get_parent_class($o));\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>class exists\nIs object\nObj2\nArray ( [0] =&gt; func )\nArray ( [hello] =&gt; world )\nObj\n</code></pre>\n<h2>Examining an Object</h2>\n<ul>\n<li><code>is_object()</code> - Checks if an object.</li>\n<li><code>get_class()</code> - Return object’s class name.</li>\n<li><code>method_exists()</code> - Checks if method exists.</li>\n<li><code>class_exists()</code> - Checks if class exists.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nclass Obj {\n  function func() {\n    echo &quot;Hello World&quot;;\n  }\n}\n\n$o = new Obj;\necho is_object($o);\necho get_class($o);\necho method_exists($o, 'func');\necho class_exists('Obj');\n</code></pre>\n<p>O/P</p>\n<pre><code>1\nObj\n1\n1\n</code></pre>\n<h1>4. Creating and Validating forms</h1>\n<h2>1. What is form? How to create it?</h2>\n<h3>What is form?</h3>\n<ul>\n<li>Forms are essential parts in web development. Forms are used to get input from\nthe user and submi it to the web server for processing.</li>\n<li>Forms are used to communicate between users and the server.</li>\n</ul>\n<h3>How to create it?</h3>\n<ul>\n<li>A document that containing blank fields, that the user can fill the data or\nuser can select the data. It is known as Form.</li>\n<li>Generally, the data will store in the database. We can create and use forms\nin PHP. To get form data, we need to use PHP superglobals <code>$_GET</code>and $_POST</li>\n<li>The form request may be get or post. To retrieve data from get request, we\nneed to use <code>$_GET</code>, for post request <code>$_POST</code></li>\n</ul>\n<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_SELF_PHP ?&gt;&quot; method=&quot;post&quot;&gt;\n  &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n  &lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif (isset($_POST[&quot;name&quot;])) {\n  echo &quot;Your name is: &quot;.$_POST[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n<h2>2. What is form control?</h2>\n<ul>\n<li>There are different types of form controls that we can use to collect data\nusing form namely, Textbox, Checkbox, Radio button, and so on.</li>\n<li><strong>TEXTBOX</strong> - A text input field allows the user to enter a singel text.</li>\n<li><strong>TEXTAREA</strong> - A textarea field is similar a text input field but it allows\nthe user to enter multiple lines of text.</li>\n<li><strong>RADIO BUTTON</strong> - The radio buttons are for single choice from multiple\noptions. All radio buttons in the group have the same name attribute.</li>\n<li><strong>CHECKBOX</strong> - A checkbox field is a simple toggle button. It can be either\nON or OFF. The value attribute should contain the value that will be sent to\nthe server when the checkbox is selected.</li>\n<li><strong>LIST</strong> - There are two type of list:\n<ul>\n<li><strong>Singleline LIST</strong> - The list represents a Windows control to display a\nlist of items to a user. A user can select an item from the list.</li>\n<li><strong>Multiline LIST</strong> - A multi-select list allows the user to select multiple\nitems. To turn a normal list into a multi-select list, add the attribute\nmultiple with a value of “multiple” to the select element.</li>\n</ul>\n</li>\n</ul>\n<h2>3. Write short note on: Server role.</h2>\n<ul>\n<li>PHP is a server-side scripting language.</li>\n<li>Using PHP we can create dynamic web sites.</li>\n<li>That means its processing happens in the server by consuming server’s\nresources and sends only the output to the client.</li>\n</ul>\n<h2>5. When to use GET and POST method.</h2>\n<h3>GET</h3>\n<ul>\n<li>It sends the encoded user information appended to the page request (to the\nURL).</li>\n<li>The page and the encoded information are separated by the ? character.</li>\n<li>The GET method produces a long string the appears in our server logs, in the\nbrowser’ location box.</li>\n<li>The GET method is restricted to send up to 1024 characters only.</li>\n<li>Never use GET method if we have password or other sensitive information.</li>\n<li>GET cannot be used to send binary data to the server.</li>\n<li>The php provides $_GET assoiative array to a access all the sent information\nusing GET method.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;GET&quot;&gt;\n\tName: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ($_GET[&quot;name&quot;]) {\n\techo $_GET[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n<li>Output:<pre><code>Name: Joey\nSubmit\n\nJoey\n</code></pre>\n</li>\n</ul>\n<h3>POST</h3>\n<ul>\n<li>It transfers information via HTTP header, not throought the URL.</li>\n<li>The POST method does not have any restriction on data size.</li>\n<li>The POST method can be used to send ASCII as well as binary data.</li>\n<li>The data sent by POST  method goes through HTTP header, so security depends on\nHTTP protocol.</li>\n<li>By using secure HTTP, we can make sure that our information is secure.</li>\n<li>The PHP provides $_POST associative array to access all the sent information\nusing POST method.</li>\n<li>Example:<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n\tName: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ($_POST[&quot;name&quot;]) {\n\techo $_POST[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n</li>\n<li>Output<pre><code>Name: Joey\nSubmit\n\nJoey\n</code></pre>\n</li>\n</ul>\n<h2>7. What is cookie? How to create it? Explain with example.</h2>\n<h3>What is cookie?</h3>\n<ul>\n<li>Cookie save the data in browser, so next time refresh the browser it will not\ndelete from browser.</li>\n<li>Cookie is used to identify the user.</li>\n<li>A cookie is a small file that server embeds to user’s computer.</li>\n<li>Each time the same computer requests a page with a browser, it will send the\ncookie too.</li>\n</ul>\n<h3>How to create it?</h3>\n<ul>\n<li>Use <code>setcookie</code> function to create cookie.</li>\n<li>Syntex:<pre><code>setcookie($cookie_name, $cookie_value, $time, $location)\n</code></pre>\n</li>\n</ul>\n<h3>Example</h3>\n<pre><code class=\"language-php\">&lt;?php\nsetcookie(&quot;name&quot;, &quot;Jonney&quot;, time() + (86400 * 30), &quot;/&quot;);\nif (isset($_COOKIE[&quot;name&quot;])) {\n  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Name: Jonney\n</code></pre>\n<h2>8. What is session? Explain with example.</h2>\n<ul>\n<li>A session is a way to store information in variables to be used across\nmultiple pages.</li>\n<li>Sessions allow us to store data on the web server that associated with a\nsession ID.</li>\n<li>Once we create a session, PHP sends a cookie that contains the session ID to\nthe web browser.</li>\n<li>A session is started with the session_start() function.</li>\n<li>The session_start() function first checks if a session is already started and\nif none is started then it starts one.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\nsession_start()\n?&gt;\n&lt;?php\n$_SESSION[&quot;name&quot;] = &quot;Jonney&quot;;\necho &quot;Name: &quot;.$_SESSION[&quot;name&quot;];\n?&gt;\n</code></pre>\n<p>O/P</p>\n<pre><code>Name: Jonney\n</code></pre>\n<h2>9. How we can get the cookie values and destroy the cookies?</h2>\n<h3>To get cookie value.</h3>\n<pre><code class=\"language-php\">&lt;?php\nsetcookie(&quot;name&quot;, &quot;Jonney&quot;, time() + (83400 * 30), &quot;/&quot;);\n\nif ( isset($_COOKIE[&quot;name&quot;]) ) {\n  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];\n}\n?&gt;\n</code></pre>\n<h3>To destroy the cookie.</h3>\n<pre><code class=\"language-php\">&lt;?php\nsetcookie(&quot;name&quot;, &quot;&quot;, time() - 3600, &quot;/&quot;);\n?&gt;\n</code></pre>\n<h2>11. What is form validation? Explain with suitable example.</h2>\n<ul>\n<li>For validating a web page we use preg_match() function.</li>\n<li>The preg_match() function searches string for pattern, returning true if\npattern exists, and false otherwise.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;\n  &lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;\n  &lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;?php\nif ( isset($_POST[&quot;name&quot;]) ) {\n  if ( !preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;]) ) {\n    echo &quot;Only Words and Whitespaces are allowed.&quot;;\n  }\n}\n?&gt;\n</code></pre>\n<h2>14. How to send e-mail? Describe with example.</h2>\n<ul>\n<li><code>mail()</code> function is useful to sending the mail.</li>\n<li>Syntex:<pre><code class=\"language-php\">mail($to, $subject, $message, $header, $parametes);\n</code></pre>\n</li>\n<li><code>mail()</code> function parametes:\n<ul>\n<li><strong>to</strong> - represents the address of receiver.</li>\n<li><strong>subject</strong> - it specifies the subject of mail.</li>\n<li><strong>message</strong> - it defines the message which is to be sent.</li>\n<li><strong>headers</strong> - it is optional and specifies the additional headers like Cc, Bcc.</li>\n<li><strong>parameters</strong> - it is optional and specifies the additional parameters.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$sent = mail(&quot;AnzenKodo@altmail.com&quot;, &quot;Title&quot;, &quot;Message&quot;);\n\nif (!$sent) {\n  echo &quot;Message is not sent.&quot;;\n} else {\n  echo &quot;Message is sent.&quot;;\n}\n</code></pre>\n<p>O/P</p>\n<pre><code>Message is sent.\n</code></pre>\n<h1>5. Database Operations</h1>\n<h2>1. What is database?</h2>\n<ul>\n<li>A database is a collection of related data.</li>\n<li>A database is a collection of information that is organized so that it can\neasily be accessed, managed and updated.</li>\n<li>With PHP, we can connect to and manipulate databases.</li>\n</ul>\n<h2>2. What is DBMS?</h2>\n<ul>\n<li>A DataBase Management System (DBMS) is system software for creating and\nmanaging databases.</li>\n<li>The DBMS provides users and programmers with a systematic way to create,\nretrieve, update and manage data.</li>\n</ul>\n<h2>3. What is MySQL? How it is used in PHP?</h2>\n<ul>\n<li>MySQL is an open-source relational database management system (RDBMS).</li>\n<li>It is the most popular database system used with PHP.</li>\n<li>Using my sql:<pre><code class=\"language-php\">&lt;?php\n  // Creating connection\n  $conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\n\n  // Checking connection\n  if (!$conn) {\n      die(&quot;Connection failed.&quot;);\n  }\n  echo &quot;Connected successfully&quot;;\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h2>4. How to create and delete a database in MySQL?</h2>\n<ul>\n<li>We can create a MySQL database by using MySQL Command Line Client.</li>\n<li>Open the MySQL console and write down password, if we set one while\ninstallation.</li>\n<li>We will get the following:\n<ul>\n<li>To create the data base enter <code>CREATE DATABASE database_name</code></li>\n<li>To check the database is crated enter <code>SHOW DATABASES</code></li>\n</ul>\n</li>\n<li>Creating database through php:<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\n\nif (!$conn) {\n  die(&quot;Can't connect to MySQL &quot;);\n}\n\n$sql = &quot;CRATE DATABASE emp&quot;;\n\nif (!mysqli_query($conn, $sql)) {\n  die(&quot;Can't create database &quot;.mysqli_error($conn);\n}\n\necho &quot;Created database &lt;br/&gt;&quot;;\n?&gt;\n</code></pre>\nO/P<pre><code>Created database\n</code></pre>\n</li>\n</ul>\n<h2>5. Explain mysqli_connect() function with example.</h2>\n<ul>\n<li>The mysqli_connect() function is used to connect with MySQL database.</li>\n<li>It returns resource if connection is established or null.</li>\n<li>Syntax: <code>mysqli_connect(server, username, password, dbname, port, socket)</code></li>\n<li>Example:<pre><code class=\"language-php\">&lt;?php\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\n\nif (!$conn) {\n  echo &quot;Can't connect to database.&quot;;\n  exit();\n} else {\n  echo &quot;Databse is connected.&quot;;\n}\nmysqli_close($conn);\n</code></pre>\n</li>\n</ul>\n<h2>7. Write a program to create an employee table to perform insert, delete and update operations.</h2>\n<pre><code class=\"language-php\">&lt;?php\n// Connect MySQL\n$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);\nif (!$conn) {\n  echo &quot;Error: &quot;.mysqli_error($conn);\n}\n\n// Create table\n$table = &quot;CREATE TABLE employee(id INT(4), name VARCHAR(22), salary INT(4))&quot;;\nif (!mysqli_query($conn, $table)) {\n  echo &quot;Can't create table.&quot;;\n}\necho &quot;Created table&lt;br/&gt;&quot;;\n\n// Insert data\n$insert = &quot;INSERT INTO employee(id, name, salary) VALUES (1, 'Sam', 3200), (2, 'Jonney', 4500), (3, 'Jone', 2000)&quot;;\nif (!mysqli_query($conn, $insert)) {\n  echo &quot;Can't insert data.&quot;;\n}\n\n// Dalete data\n$delete = &quot;DELETE FROM employee WHERE id=2&quot;;\nif (!mysqli_query($conn, $delete)) {\n  echo &quot;Can't delete data.&quot;;\n}\n\n// Retrive data\n$retrive = &quot;SELECT * FROM employee&quot;;\n$result = mysqli_query($conn, $retrive);\n\nif (mysqli_num_rows($result)) {\n  while ($row = mysqli_fetch_assoc($result)) {\n    echo &quot;Name: &quot;.$row['name'].&quot;, Salary: &quot;.$row['salary'].&quot;, ID: &quot;.$row['id'].&quot;&lt;/br&gt;&quot;;\n  }\n}\n?&gt;\n</code></pre>",
      "date_published": "2022-12-15T06:38:49.390Z",
      "banner_image": "https://ogsupa.com/api/v1?font_style=font-sans&title=Notes&description=1.%20Expressions%20and%20Control%20Statements%20in%20PHP%201.%20What%20is%20web%20application?%20%20A%20Web%20application%20is%20a%20computer%20software%20or%20program%20that%20performs%20some%20specific%20tasks%20at%20its%20client%20by%20using%20a%20Web%20browser.%20The%20Web-based%20applications%20are%20also%20known%20as%20Web%20apps.%20Web%20applications%20are%20usuall&right_meta=AK%23Notes&background_color=%23bd8bf2"
    }
  ]
}