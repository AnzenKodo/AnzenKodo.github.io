<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AK#Notes</title>
    <link>https://anzenkodo.github.io/notes/</link>
    <description>This my personal website where I post my notes about thing that I have learn.</description>
    <language>en-US</language>
    <lastBuildDate>2022-12-29T20:07:13.766Z</lastBuildDate>
    <image>
      <url>https://anzenkodo.github.io/notes/favicon.png</url>
      <title>AK#Notes</title>
      <link>https://anzenkodo.github.io/notes/</link>
      <width>500</width>
      <height>500</height>
    </image>
    <atom:link href="https://anzenkodo.github.io/notes/feed.xml" rel="self" type="application/rss+xml" />
    <atom:link href="https://anzenkodo.github.io/notes/feed.xml" rel="alternate" type="application/rss+xml" />
      <item>
    <title>Home</title>
    <link>https://anzenkodo.github.io/notes/</link>
    <pubDate>2022-12-29T20:07:13.766Z</pubDate>
    <description><![CDATA[<p>This my personal website where I post my notes about thing that I have learn.</p>
<h2>Features</h2>
<ul>
<li>Easy to:
<ul>
<li>Setup</li>
<li>Configure</li>
<li>Write</li>
</ul>
</li>
<li>Supports:
<ul>
<li>Tags</li>
<li>Search (Power by <a href="https://duckduckgo.com/">DuckDuckGo</a>)</li>
<li>Canonical</li>
<li><a href="https://ogp.me/">Open Graph</a></li>
<li>Analytics</li>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
</ul>
</li>
<li>Auto generate:
<ul>
<li>GitHub Pages Actions file</li>
<li>Favicon</li>
<li>Sitemap</li>
<li>404 page</li>
<li>CSS</li>
<li><code>mainfest.json</code> file</li>
<li>Feeds
<ul>
<li>RSS</li>
<li>JSON</li>
<li>Atom</li>
</ul>
</li>
</ul>
</li>
<li>No Client side JavaScript</li>
<li>Minified HTML &amp; Inline CSS</li>
<li>Lightweight</li>
</ul>
<h2>Getting Started</h2>
<h3>Installing</h3>
<ul>
<li>Download deno from <a href="https://deno.land/">https://deno.land/</a> and install it.</li>
<li>After installing deno run following commands.</li>
</ul>
<pre><code class="language-sh"># Install the dblog
deno run https://deno.land/x/dblog/install.js # Add deno to path, if you didn't already.

# See all the options that are available
dblog --help

# Setup the your blog (Skip this if already your blog setup)
dblog --setup

# Make your blog and Run on localhost
dblog --serve
</code></pre>
<h3>Update</h3>
<p>To update dblog, rerun the installation command.</p>
<pre><code class="language-sh">deno run https://deno.land/x/dblog/install.js
</code></pre>
<h3>Run dblog without installing dblog</h3>
<pre><code class="language-sh">deno run -A https://deno.land/x/dblog/mod.js --help
</code></pre>
<h2>Live Demo &amp; Folder</h2>
<ul>
<li><a href="https://anzenkodo.github.io/dblog">Live Demo</a></li>
<li><a href="https://github.com/AnzenKodo/dblog/tree/gh-pages">Generated Files</a></li>
</ul>
<h2>Configuration</h2>
<p>Place <code>config.json</code> in root folder to edit default configuration. The
<code>config.json</code> is optional.</p>
<p><strong>The <code>config.json</code> with default configuration:</strong></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;dblog&quot;,
  &quot;start_url&quot;: &quot;https://AnzenKodo.github.io/dblog/&quot;,
  &quot;description&quot;: &quot;dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.&quot;,
  &quot;email&quot;: &quot;&quot;,
  &quot;author&quot;: &quot;AnzenKodo&quot;,
  &quot;posts&quot;: &quot;./posts&quot;,
  &quot;output&quot;: &quot;./site&quot;,
  &quot;favicon&quot;: &quot;favicon.svg&quot;,
  &quot;lang&quot;: &quot;en-US&quot;,
  &quot;port&quot;: 8000,
  &quot;background&quot;: &quot;#ffffff&quot;,
  &quot;foreground&quot;: &quot;#000000&quot;,
  &quot;theme&quot;: &quot;#01a252&quot;,
  &quot;footer&quot;: &quot;&lt;p&gt;Made by &lt;a href=\&quot;https://AnzenKodo.github.io/AnzenKodo\&quot;&gt;AnzenKodo&lt;/a&gt; under &lt;a href=\&quot;https://anzenkodo.github.io/dblog/LICENSE\&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;\n&quot;,
  &quot;page404&quot;: &quot;404 Page Not Found, Sorry :(&quot;,
  &quot;backup&quot;: false,
  &quot;exclude&quot;: [
    &quot;config.json&quot;,
    &quot;backup.json&quot;
  ],
  &quot;nav&quot;: {},
  &quot;head&quot;: &quot;&quot;
}
</code></pre>
<p><strong>Note:</strong> Every option is optional.</p>
<ul>
<li><strong>name</strong> - Name of your blog.</li>
<li><strong>start_url</strong> - Start URL of your site. <em>Example:</em> ‘<a href="https://example.com/">https://example.com/</a>’,
‘<a href="https://blog.example.com/">https://blog.example.com/</a>’, ‘<a href="https://example.com/blog/">https://example.com/blog/</a>’</li>
<li><strong>email</strong> - Your email address. This will enable ‘Reply with Email’ button in
posts.</li>
<li><strong>author</strong> - Your name or username.</li>
<li><strong>posts</strong> - Path of posts.</li>
<li><strong>output</strong> - Folder where your blog build will be placed. <em>Example:</em> ‘./blog’,
‘…/site/blog’, ‘site/blog’.</li>
<li><strong>favicon</strong> - <em><strong>Recommended 500x500px</strong></em>. Favicon location. <em>If empty,
generated favicon will be used</em>. <em>Example:</em> ‘./favicon.png’,
‘./static/favicon.icon’, ‘…/favicon.jpg’.</li>
<li><strong>lang</strong> - Blog language in ‘RFC 5646’ format. Example: ‘ja’ for Japanese,
‘sv’ for Swedish, ‘it’ for Italian. See
<a href="https://wikipedia.org/wiki/IETF_language_tag#List_of_common_primary_language_subtags">List of common primary language subtags in Wikipedia</a></li>
<li><strong>footer</strong> - Footer of your website. <em>Supports CommonMark Markdown format</em>.
<em>Example:</em>
<code>Made by [AnzenKodo](https://AnzenKodo.github.io/AnzenKodo) uder [MIT License](https://anzenkodo.github.io/dblog/LICENSE.html)</code>.</li>
<li><strong>port</strong> - Port of your blog on localhost. <em>Example</em>: ‘8080’, ‘8300’, ‘8400’.</li>
<li><strong>background</strong> - Background color in light mode. Becomes foreground color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>foreground</strong> - Foreground color in light mode. Becomes background color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>theme</strong> - Blog theme color. <em>Example:</em> ‘#0583f2’, ‘#f20544’, ‘#f2b705’.</li>
<li><strong>page404</strong> - 404 page message. <em>Example:</em> ‘Sorry, page not found :(’.</li>
<li><strong>backup</strong> - Backup file location. <em>Example:</em> <code>false</code> to don’t generate
<code>backup.json</code> file, ‘./backup.json’, ‘./site/backup.json’, ‘…/backup.json’.</li>
<li><strong>exclude</strong> - Exclude files or folder. <em>Example:</em><pre><code class="language-json">&quot;exclude&quot;: [ &quot;.env&quot;, &quot;todo.md&quot;, &quot;drafts&quot; ],
</code></pre>
</li>
<li><strong>nav</strong> - Nav bar item list. Example:<pre><code class="language-json">&quot;nav&quot;: {
  &quot;about&quot;: &quot;./about.md&quot;,
  &quot;stie&quot;: &quot;https://anzenkodo.github.io/AnzenKodo&quot;
}
</code></pre>
</li>
<li><strong>head</strong> - If you analytics or any other tags you want to put on head tag.
<em>Example:</em>
<code>&lt;link rel=&quot;preconnect&quot; href=&quot;//www.google-analytics.com&quot; crossorigin=&quot;&quot;&gt;</code>.</li>
</ul>
<h2>CLI Options</h2>
<pre><code class="language-sh">dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.

Website: https://anzenkodo.github.io/dblog
Package: https://deno.land/x/dblog
Repo: https://github.com/AnzenKodo/dblog
Docs: https://anzenkodo.github.io/dblog/posts/dblog-Docs.html

USAGE:
  dblog [OPTIONS]

OPTIONS:
  --serve   Build blog and Start localhost.
    --noopen  Don't open browser, when starting localhost.
  --build   Build blog without starting localhost.
  --setup   Setup new blog.
  --backup  Restore blog if 'backup.json' file available.
  --readme  Generate 'README.md' file.
  --help    Print help information.
</code></pre>
<h2>File Options</h2>
<pre><code>---
title: If empty the file name will be used
description: If empty the first paragraph will be used.
tags: [ &quot;tag1&quot;, &quot;tag2&quot; ]
date: 20/08/2020
canonical:
---
</code></pre>
<ul>
<li><strong>date</strong> - If empty, the file date will be used. <em>Note:</em> The file <code>date</code> might
not always right. So always give you own date.</li>
<li><strong>canonical</strong> - Share content between multiple sites without impacting SEO.
Just put canonical URL. Know more about
<a href="https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls">canonical url</a>.</li>
</ul>
<h3>If file name start with underscore “_” it will be consider as draft.</h3>
<p><strong>Example:</strong> <code>posts/_This is draft.md</code></p>
<h2>Markdown Guide</h2>
<h3><a href="https://commonmark.org/help/">CommonMark</a> Syntex</h3>
<h4>Heading</h4>
<pre><code class="language-md"># H1

## H2

### H3

#### H4

##### H5

###### H6
</code></pre>
<h1>H1</h1>
<h2>H2</h2>
<h3>H3</h3>
<h4>H4</h4>
<h5>H5</h5>
<h6>H6</h6>
<h4>Inline style</h4>
<pre><code class="language-md">**Bold** _Italic_ ~~Strikethrough~~
</code></pre>
<p><strong>Bold</strong> <em>Italic</em> <s>Strikethrough</s></p>
<h4>Link and Image</h4>
<pre><code class="language-md">[website](https://anzenkodo.github.io/dblog)
![Jurassic Deno by Samip Poudel](https://deno.land/images/artwork/jurassicDeno.jpg)
</code></pre>
<p><a href="https://anzenkodo.github.io/dblog">website</a>
<img src="https://deno.land/images/artwork/jurassicDeno.jpg" alt="Jurassic Deno by Samip Poudel"></p>
<h4>Blockquote</h4>
<pre><code class="language-md">&gt; 'The road to hell is paved with good intentions' by Abbot Bernard
</code></pre>
<blockquote>
<p>‘The road to hell is paved with good intentions’ by Abbot Bernard</p>
</blockquote>
<h4>List</h4>
<pre><code class="language-md">- List
  - List
- List

1. One
2. Two
3. Three
</code></pre>
<ul>
<li>List
<ul>
<li>List</li>
</ul>
</li>
<li>List</li>
</ul>
<ol>
<li>One</li>
<li>Two</li>
<li>Three</li>
</ol>
<h4>Horizontal rule</h4>
<pre><code class="language-md">---
</code></pre>
<hr>
<h4>Code block</h4>
<div class="highlight highlight-source-lisp notranslate position-relative overflow-auto">
<pre>
`Inline code` with backticks
```js
  console.log("Code Blog in JavaScript");
```
</pre>
</div>
<p><code>Inline code</code> with backticks</p>
<pre><code class="language-js">console.log(&quot;Code Blog in JavaScript&quot;);
</code></pre>
<h3>Additional Markdown syntax</h3>
<h4>Checkbox</h4>
<pre><code class="language-md">- [ ] Checkbox
- [x] Checkbox with tick
</code></pre>
<ul class="task-list">
<li class="task-list-item"><input type="checkbox" id="cbx_0" disabled="true"><label for="cbx_0"> Checkbox</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> Checkbox with tick</label></li>
</ul>
<h4>Image with caption</h4>
<pre><code class="language-md">![Deno](https://deno.land/images/artwork/deno_matrix.png &quot;Matrix by bramaudi&quot;)
</code></pre>
<figure data-type="image"><img src="https://deno.land/images/artwork/deno_matrix.png" alt="Deno" loading="lazy" decoding="async"><figcaption>Matrix by bramaudi</figcaption></figure>
<h4>Footer</h4>
<pre><code class="language-md">Here is a footnote reference[^1]. [^1]: Here is the footnote.
</code></pre>
<p>Here is a footnote reference[^1]. [^1]: Here is the footnote.</p>
<h4>Additional inline syntax</h4>
<pre><code class="language-md">~sub~ ^sup^ ==mark== [[kbd]] _underline_ ++insert++ ~~delete~~
</code></pre>
<p><sub>sub</sub>
<sup>sup</sup>
<mark>mark</mark>
<kbd>kbd</kbd>
<u>underline</u>
<ins>insert</ins>
<del>delete</del></p>
<h4>Description list</h4>
<pre><code class="language-md">: Definition 1 Term 2 with _inline markup_ : Definition 2 Third paragraph of
definition 2.
</code></pre>
<dl>
  <dt>Definition 1</dt>
  <dd>Term 2 with inline.</dd>
  <dt>Definition 2</dt>
  <dd>Third paragraph of definition 2.</dd>
</dl>
<h4>Abbreviation</h4>
<pre><code class="language-md">*[abbr]: Abbreviation
</code></pre>
<p><abbr title="Abbreviation">abbr</abbr></p>
<h4>Table</h4>
<h5>Normal</h5>
<pre><code class="language-md">| Syntax    | Description |
| --------- | ----------- |
| Header    | Title       |
| Paragraph | Text        |
</code></pre>
<table>
<thead>
<tr>
<th>Syntax</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Header</td>
<td>Title</td>
</tr>
<tr>
<td>Paragraph</td>
<td>Text</td>
</tr>
</tbody>
</table>
<h5>Multiline</h5>
<pre><code class="language-md">| Markdown  | Rendered HTML |
| --------- | ------------- |
| _Italic_  | _Italic_      |
|           |               |
| - Item 1  | - Item 1      |
| - Item 2  | - Item 2      |
| ```python | ```python \   |
| .1 + .2   | .1 + .2       |
</code></pre>
<table><thead><tr><th>Markdown</th><th>Rendered HTML</th></tr></thead> <tbody>
  <tr> <td> <pre><code>*Italic* </code></pre> </td> <td> <p><em>Italic</em></p>
  </td> </tr> <tr> <td> <pre><code>- Item 1 - Item 2</code></pre> </td> <td>
  <ul> <li>Item 1</li> <li>Item 2</li> </ul> </td> </tr> <tr> <td>
<pre><code>
```python
.1 + .2
```
</code></pre> </td> <td> <pre><code class="language-python">.1 + .2
  </code></pre> </td> </tr> </tbody> </table>
<h5>Rowspan</h5>
<pre><code class="language-md">|                       Stage | Direct Products | ATP Yields |
| --------------------------: | --------------: | ---------: |
|                  Glycolysis |           2 ATP |            |
|                          ^^ |          2 NADH |   3--5 ATP |
|          Pyruvaye oxidation |          2 NADH |      5 ATP |
|           Citric acid cycle |           2 ATP |            |
|                          ^^ |          6 NADH |     15 ATP |
|                          ^^ |         2 FADH2 |      3 ATP |
|              **30--32** ATP |                 |            |
| [Net ATP yields per hexose] |                 |            |
</code></pre>
<table> <caption id="netatpyieldsperhexose">Net ATP yields per hexose</caption>
  <thead> <tr> <th align="right">Stage</th> <th align="right">Direct
Products</th> <th align="right">ATP Yields</th> </tr> </thead> <tbody> <tr> <td
align="right" rowspan="2">Glycolysis</td> <td align="right" colspan="2">2
ATP</td> </tr> <tr> <td align="right">2 NADH</td> <td align="right">3–5
ATP</td> </tr> <tr> <td align="right">Pyruvaye oxidation</td> <td
align="right">2 NADH</td> <td align="right">5 ATP</td> </tr> <tr> <td
align="right" rowspan="3">Citric acid cycle</td> <td align="right"
colspan="2">2 ATP</td> </tr> <tr> <td align="right">6 NADH</td> <td
align="right">15 ATP</td> </tr> <tr> <td align="right">2 FADH2</td> <td
align="right">3 ATP</td> </tr> <tr> <td align="right"
colspan="3"><strong>30–32</strong> ATP</td> </tr> </tbody> </table>
<h4>Headerless</h4>
<pre><code class="language-md">|--|--|--|--|--|--|--|--| |♜| |♝|♛|♚|♝|♞|♜| | |♟|♟|♟| |♟|♟|♟| |♟| |♞| | | | | |
| |♗| | |♟| | | | | | | | |♙| | | | | | | | | |♘| | | |♙|♙|♙|♙| |♙|♙|♙|
|♖|♘|♗|♕|♔| | |♖|
</code></pre>
<table> <tbody> <tr> <td>♜</td> <td></td> <td>♝</td> <td>♛</td> <td>♚</td>
  <td>♝</td> <td>♞</td> <td>♜</td> </tr> <tr> <td></td> <td>♟</td> <td>♟</td>
  <td>♟</td> <td></td> <td>♟</td> <td>♟</td> <td>♟</td> </tr> <tr> <td>♟</td>
  <td></td> <td>♞</td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr>
  <tr> <td></td> <td>♗</td> <td></td> <td></td> <td>♟</td> <td></td> <td></td>
  <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td>♙</td>
  <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td>
  <td></td> <td></td> <td>♘</td> <td></td> <td></td> </tr> <tr> <td>♙</td>
  <td>♙</td> <td>♙</td> <td>♙</td> <td></td> <td>♙</td> <td>♙</td> <td>♙</td>
  </tr> <tr> <td>♖</td> <td>♘</td> <td>♗</td> <td>♕</td> <td>♔</td> <td></td>
  <td></td> <td>♖</td> </tr> </tbody> </table>]]></description>
  </item>
  <item>
    <title>your music and people</title>
    <link>https://anzenkodo.github.io/notes/books/your-music-and-people.html</link>
    <pubDate>2022-12-29T20:07:13.766Z</pubDate>
    <description><![CDATA[<h1>Your Music and People</h1>
<p>Author: Derek Sivers Created time: April 13, 2021 9:01 PM Page No.: 146
Progress: ✔️</p>
<p>A philosophy of getting your work to the world by being creative, considerate,
resourceful, and connected.</p>
<h1>What I am going to to do after reading it?</h1>
<ul>
<li>Make database of people &amp; and how often I should contact them.</li>
<li>Build some persona for people to look up to.</li>
<li>Never give to I am contacting someone.</li>
</ul>
<h1>Points</h1>
<ul>
<li>Socialize
<ul>
<li>How to use friends database?
<ul>
<li>Every person you’ve ever met has the potential to help you.</li>
</ul>
<ol>
<li>A list: Very important people. Contact every three weeks.</li>
<li>B list: Important people. Contact every two months.</li>
<li>C list: Most people. Contact every six months.</li>
<li>D list: Demoted people. Contact once a year, to make sure you still have
their correct info.</li>
</ol>
</li>
<li>Normal World &amp; Business World
<ul>
<li>As teenagers, we learned the hard way that if you contact someone and they
don’t reply, they’re just not into you. If you keep trying, you must be a
total loser.</li>
<li>But in the business world, it’s the opposite. If you don’t keep trying,
you’re a loser!</li>
</ul>
</li>
<li>How to be cool?
<ul>
<li>But people want someone to look up to. Someone who’s not of their normal
boring world. Someone who’s being who they wish they could be, if they had
the courage.</li>
<li>It takes some extra effort to look and act cool instead of normal, but
it’s considerate and part of your art.</li>
<li>Look back at artists like Andy Warhol or Miles Davis, who were not only
great at their art, but also knew how to play their image — to be cool.</li>
<li>You have to give people a good reason! Say a few words to make them
curious.</li>
<li>Make public persona — the image you show the world — should be an extreme
character. It can be a version of yourself, or it can be a mask.</li>
</ul>
</li>
<li>About People
<ul>
<li>Are fans telling friends? If not, don’t promote.</li>
<li>Even if it starts professional, get personal as soon as possible. Be a
friend. That’s how things are done</li>
<li>We love when someone hates the same thing we hate — especially if that
thing is popular.</li>
<li>Take some of that searching time, and spend it on keeping in touch with
your existing contacts.</li>
</ul>
</li>
</ul>
</li>
<li>Business
<ul>
<li>How beat competitor?
<ul>
<li>Look at what your competitors are doing, then vow not to do that.</li>
<li>Don’t try to beat them at their game.</li>
<li>Play a completely different game.</li>
<li>Be radically opposite</li>
</ul>
</li>
<li>Early adopters &amp; Late adopters
<ul>
<li>Give a few early adopters the courage to jump in together with the first.
Make sure they stick together as a group.</li>
<li>Now it’s not about you, it’s about them. Publicize the group, not
yourself. Make it fun to join.</li>
<li>Make sure all late-adopters can see what fun the early adopters are
having.</li>
</ul>
</li>
<li>Don’t reinvent any of these wheels. Focus on what’s left — what hasn’t been
done.
<ul>
<li>Video aspect? Let YouTube handle that part. E-Commerce aspect? Use
Amazon’s system. Payments? Use Stripe.</li>
</ul>
</li>
<li>If you do it persistently enough, you will own that niche. People will not
be able to imagine that niche without you.</li>
<li>Ask yourself why a certain headline or photo or article caught your
attention</li>
<li>My advice is to assume nobody is coming. It’s more useful to assume that
it’s all up to you. This is not hopeless, but helpful and empowering.</li>
<li>Pour your personality and philosophy into the way you do business.</li>
<li>Nobody knows the future, and anyone who pretends to know can’t be trusted</li>
</ul>
</li>
</ul>
<h1>Meaning</h1>
<p><strong>Market mindset</strong> - strictly business: being paid for time and effort,
competition, you get what you pay for, and cost/benefit analysis.</p>
<p><strong>Social mindset</strong> - is warm and fuzzy social human nature: helping friends,
being a good generous person, doing what’s right.</p>
<p><strong>Money</strong> - neutral exchange of value. If people give you money, it’s proof that
you’re giving them something valuable in return.</p>
<p><strong>Marketing</strong> - Marketing means making it easy for people to notice you, relate
to you, remember you, and tell their friends about you.</p>
<h1>Stories</h1>
<p>How dealt with the flood:</p>
<p>Whenever someone sent their music, it would go into an inbox. That inbox was
completely ignored.</p>
<p>Whenever someone contacted her to follow-up the first time, to ask if she’d
received it, she would take their music out of that first inbox, and put it in a
second inbox. That second inbox was also ignored.</p>
<p>Then if they followed-up with her a second time, asking again if she’d had the
chance to listen, she would take their music out of the second inbox, and put it
in a third inbox. That third inbox would get a listen if she had some spare
time.</p>
<p>Finally, if they followed-up a third time, she would take their music out of the
third inbox, and make it a priority to give it a real listen.</p>
<hr>
<p>One of the top music industry lawyers in Los Angeles was speaking at a
conference.</p>
<p>She’s an expert in copyright law, so someone asked her advice on a licensing
problem. They had recorded their version of a famous song, but were unable to
get the rights to sell it because they couldn’t get a response from the
publisher.</p>
<p>The lawyer shocked the audience when she said, “Sell it anyway. Don’t wait for
permission. Save the proof that you tried your best to reach them. If they
contact you to ask for money some day, pay them then. But never wait.”</p>
<p>Coming from a copyright lawyer, that was a bold statement.</p>
<p>It was a reminder that your career is more important than its details.</p>
<p>Success is your top priority. Never let anything stop you.</p>
<hr>
<p>Many musicians get into music because they love playing their instrument. They
love it so much they want to do it full-time. But then well-meaning people say,
“If you’re going to be in the music business, you have to read this book on
music business law, and you have to learn networking skills, and marketing, and
tech skills, and accounting, and writing good newsletters, and blah blah blah.”
Soon those musicians are spending all their time doing everything but playing
their instrument, and decide it’s not worth it! They give up, get a dumb job,
and lose interest in their instrument, because a career in music seems tedious
and overwhelming.</p>
<h1>Resources</h1>
<ul>
<li>Predictably Irrational — Dan Ariely</li>
</ul>
<h1>Quote</h1>
<blockquote>
<p>Whatever excites you, go do it. Whatever drains you, stop doing it.</p>
</blockquote>
<p>— Derek Sivers</p>
<blockquote>
<p>Once people start wondering, they can’t stand not knowing.</p>
</blockquote>
<p>— Derek Sivers</p>
<blockquote>
<p>When things aren’t working, be smarter, not louder.</p>
</blockquote>
<p>— Derek Sivers</p>
<blockquote>
<p>You have to make your own success first, before you ask the industry for help.</p>
</blockquote>
<p>— Derek Sivers</p>
<blockquote>
<p>If you’re not happy with the way things are, don’t just complain. Go make
things how they should be.</p>
</blockquote>
<p>— Derek Sivers</p>]]></description>
  </item>
  <item>
    <title>show your work</title>
    <link>https://anzenkodo.github.io/notes/books/show-your-work.html</link>
    <pubDate>2022-12-29T20:07:13.766Z</pubDate>
    <description><![CDATA[<h1>Show your work</h1>
<p>Author: Austin Kieon Created time: March 19, 2021 9:03 PM Page No.: 224
Progress: ✔️</p>
<h1>What I am going to do after reading it?</h1>
<ul>
<li>Improve my social media account.
<ul>
<li>Start posting more then three content on twitter.</li>
<li>Try instagram reels.</li>
</ul>
</li>
<li>Capture more my life in camera
<ul>
<li>Organize in Google Photos or Instagram.</li>
<li>Put camera app in home screen.</li>
</ul>
</li>
<li>Use Google Keep to capture my voice recording.</li>
</ul>
<h1>Points</h1>
<ul>
<li>About Amateurs
<ul>
<li>Why being amateurs are better than Professionals?
<ul>
<li>They have little to lose</li>
<li>Amateurs are willing to try anything.</li>
<li>They can share share anything without worry looking good.</li>
<li>Amateurs know that contributing something is better than contributing
nothing.</li>
</ul>
</li>
<li>How to stay amateurs?
<ul>
<li>For professionals, the best way to flourish is to retain an amateur’s
spirit and embrace uncertainty and the unknown.</li>
<li>I you feel like being to comfortable then try something new.</li>
</ul>
</li>
</ul>
</li>
<li>Social Media
<ul>
<li>
<p>Own Website &amp; Blog with own domain name is more important than Social Media.</p>
</li>
<li>
<p>How to start social media?</p>
<ul>
<li>Pay attention to what others are sharing, and then start taking note of
what they’re not sharing.</li>
<li>Be on the lookout for voids that you can fill with your own efforts, no
matter how bad they are at first.</li>
<li>Don’t worry, for now, about how you’ll make money or a career off it.</li>
<li>Forget about being an expert or a professional.</li>
<li>Share what you love.</li>
</ul>
</li>
<li>
<p>What to share in social media?</p>
<ul>
<li>Sort your content with only so meaningful bits thing left behind.</li>
<li>Make you content into small bits</li>
<li>Share you small bits in different pieces.</li>
<li>Share your influences and what’s inspiring you.</li>
</ul>
</li>
<li>
<p>How to share about projects?</p>
<ul>
<li>If you’re in the middle of executing a project, write about your methods
or share works in progress.</li>
<li>If you’ve just completed a project, show the final product.</li>
<li>Share scraps from the cutting-room floor, or write about what you learned.</li>
<li>If you have lots of projects out into the world, you can report on how
they’re doing you can tell stories about how people are interacting with
your work.</li>
</ul>
</li>
<li>
<p>Crediting</p>
<ul>
<li>Attribution is all about providing context for what you’re sharing.
<ul>
<li>What the work is?</li>
<li>Who made it?</li>
<li>How they made it?</li>
<li>When and where it was made?</li>
<li>Why you’re sharing it?</li>
<li>Why people should care about it?</li>
<li>Where people can see some more work like it?</li>
</ul>
</li>
<li>Give proper credit to inspiration or creater of content you make.</li>
<li>If you don’t know who made then don’t share it.</li>
<li>You give credit because people are lazy they don’t search in google to
find the credated artist.</li>
</ul>
</li>
<li>
<p>How to make or find content for social media?</p>
<p>This isn’t about making art, it’s about simply keeping track of what’s going
on</p>
<ul>
<li>Start a work journal.</li>
<li>Take a lot of photographs of your work at different stages in your
process.</li>
<li>Shoot video of you working.</li>
<li>If you can’t find a good use for a platform, feel free to abandon it.</li>
<li>Set timer for Times you are going to use social media.</li>
<li>Find content in other people abandoned work.</li>
</ul>
</li>
<li>
<p>What to put on social media?</p>
<ul>
<li>So don’t post things online that you’re not ready for everyone in the
world to see.</li>
<li>You need feedback but don’t share absolutely everything.</li>
<li>Only put something online if helpful or entertaining.</li>
<li>If you don’t know to put something online or not then put it for only 24 H
and see the response.</li>
</ul>
</li>
<li>
<p>Flow to Stock</p>
<ul>
<li>First put small bits of content (like: tweet, photos, short video).</li>
<li>Then all bits of content in large content (like: blog, full length video,
podcast).</li>
<li>Large content into evergreen content (like: books).</li>
</ul>
</li>
<li>
<p>Format of content</p>
<ul>
<li>Speak to them directly in plain language.</li>
<li>Be brief. Learn to speak. Learn to write.</li>
<li>Use spell-check</li>
<li>Use less 2 hashtag in tweets.</li>
</ul>
</li>
<li>
<p>How to get friends?</p>
<ul>
<li>Email is most important form of friends collecting.
<ul>
<li>Start Newsletter.</li>
<li>Ask people to ask something to you through email.</li>
<li>Never ever add someone’s email address to your mailing list without her
permission.</li>
<li>Don’t spam people.</li>
</ul>
</li>
<li>Engage with others (like: tweet, comment, share, like).</li>
<li>Don’t accept anything in return.</li>
<li>Anyone say something listen first full without thinking to what to say
next.</li>
<li>Don’t worry about followers, like, viewers.</li>
<li>Get good at something rather than getting connection.</li>
<li>Only make and post stuff that you love to make &amp; share.</li>
<li>Don’t be creepy. Don’t be a jerk. Don’t waste people’s time. Don’t ask too
much.</li>
<li>Don’t ask for anything in return.</li>
</ul>
</li>
<li>
<p>How to make money?</p>
<ul>
<li>Put free stuff first.</li>
<li>If people like it start putting premium content.</li>
<li>Ask for Donation.</li>
<li>For start-up project Kickstarter and Indiegogo.</li>
<li>Sell your products.</li>
<li>Paid content and newsletter.</li>
</ul>
</li>
</ul>
</li>
<li>People
<ul>
<li>Meet online friends in real life also.</li>
<li>Don’t waste time with people with you feel low energy.</li>
<li>Handle other people success.
<ul>
<li>Don’t be one of those horrible fans who stops listening to your favorite
band just because they have a hit single.</li>
<li>Don’t write off your friends because they’ve had a little bit of success.</li>
<li>Don’t be jealous when the people you like do well celebrate their victory
as if it’s your own.</li>
</ul>
</li>
<li>Best Friends
<ul>
<li>The people who share your obsessions.</li>
<li>The people who have same objective as you.</li>
<li>The people with whom you share a mutual respect.</li>
<li>Praise them, engage with them always.</li>
<li>Invite them to collaborate.</li>
<li>Show them work before you show anybody else.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1>Meaning</h1>
<p><strong>Human spam -</strong> They just post content but don’t engage with others people
content.</p>
<p><strong>Hoarder -</strong> They don’t post many thing just engage for something in return.</p>
<p><strong>Contributor -</strong> They engage and put good stuff also.</p>
<p><strong>Troll -</strong> Who isn’t interested in improving your work, only provoking you with
hateful, aggressive, or upsetting talk.</p>
<h1>Stories</h1>
<p>John T. Unger tells this terrific story from his days as a street poet. He would
do a poetry reading and afterward some guy would come up to him and say, “Your
poem changed my life, man!” And John would say, “Oh, thanks. Want to buy a book?
It’s five dollars.” And the guy would take the book, hand it back to John, and
say, “Nah, that’s okay.” To which John would respond, “Geez, how much is your
life worth?”</p>
<hr>
<p>In 2013, the Internet fell in love with astronaut Chris Hadfield, commander of
the International Space Station. Three years earlier, Hadfield and his family
were sitting around the dinner table, trying to figure out ways to generate
interest for the Canadian Space Agency, which, like many space programs, faced
major budget cuts and needed more public support. “Dad wanted a way to help
people connect with the real side of what an astronaut’s life is,” said
Hadfield’s son Evan. “Not just the glamour and science, but also the day-to-day
activities.”</p>
<p>Commander Hadfield wanted to show his work.</p>
<p>Things fell into place when his sons explained social media to him and got him
set up on Twitter and other social networks. During his next five-month mission,
while performing all his regular astronautical duties, he tweeted, answered
questions from his followers, posted pictures he’d taken of Earth, recorded
music, and filmed YouTube videos of himself clipping his nails, brushing his
teeth, sleeping, and even performing maintenance on the space station. Millions
of people ate it all up, including my agent, Ted, who tweeted, “Wouldn’t
normally watch live video of a couple of guys doing plumbing repair, but IT’S IN
SPACE!”</p>
<hr>
<p>When George Lucas was a teenager, he almost died in a car accident. He decided
“every day now is an extra day,” dedicated himself to film, and went on to
direct Star Wars . Wayne Coyne, lead singer of The Flaming Lips, was 16 when he
was held up while working at a Long John Silver’s. “I realized I was going to
die,” he says. “And when that gets into your mind . . . it utterly changed me .
. . I thought, <em>I’m not going to sit here and wait for things to happen, I’m
going to make them happen, and if people think I’m an idiot I don’t care.</em>”</p>
<p>Tim Kreider, in his book We Learn Nothing , says that getting stabbed in the
throat was the best thing to ever happen to him. For a whole year, he was happy
and life was good. “You’d like to think that nearly getting killed would be a
permanently life-altering experience,” Kreider writes, but “the illumination
didn’t last.” Eventually, he was back to “the busy work of living.” The writer
George Saunders, speaking of his own near-death experience, said, “For three or
four days after that, it was the most beautiful world. To have gotten back in
it, you know? And I thought, if you could walk around like that all the time, to
really have that</p>
<hr>
<p>When the late film critic Roger Ebert went through several intense surgeries to
treat his cancer, he lost the ability to speak. He lost his voice either
scribble responses on a pad of paper, or type on his Mac and have the awkward
computer voice read it out loud through his laptop speakers.</p>
<p>Cut off from everyday conversation, he poured himself into tweeting, posting to
Facebook, and blogging at <a href="http://rogerebert.com/">rogerebert.com</a> . He ripped
out posts at a breakneck speed, writing thousands and thousands of words about
everything he could think of—his boyhood in Urbana, Illinois, his love for Steak
’n Shake, his conversations with famous movie actors, his thoughts on his
inevitable death. Hundreds and hundreds of people would respond to his posts,
and he would respond back. Blogging became his primary way of communicating with
the world. “On the web, my real voice finds expression,” he wrote.</p>
<hr>
<h1>Resources</h1>
<ul>
<li>Steal Like an Artist - Austin Kleon</li>
<li><a href="https://youtu.be/oww7oB9rjgw">Steal Like An Artist: Austin Kleon at TEDxKC</a></li>
<li><a href="https://youtu.be/WMc3yh4Buvk">Keep Going with Austin Kleon and Debbie Millman | SXSW 2019</a></li>
<li>Brian Eno, A Year With Swollen Appendices</li>
<li>Steven Johnson, Where Good Ideas Come From</li>
<li>David Byrne, How Music Works</li>
<li>Mike Monteiro, Design Is a Job</li>
<li>Kio Stark, Don’t Go Back to School</li>
<li>Ian Svenonius, Supernatural Strategies for Making a Rock ‘n’ Roll</li>
<li>Sidney Lumet, Making Movies</li>
<li>P.T. Barnum, The Art of Money Getting</li>
<li>A Life of Picasso - John Richardson</li>
</ul>
<h1>Quote</h1>
<blockquote>
<p>“Connections don’t mean shit, I’ve never had any connections that weren’t a
natural outgrowth of doing things I was doing anyway.”</p>
</blockquote>
<ul>
<li>Steve Albini</li>
</ul>
<blockquote>
<p>“Books are made out of books.”</p>
</blockquote>
<ul>
<li>Cormac McCarthy</li>
</ul>
<blockquote>
<p>“Anyone who isn’t embarrassed of who they were last year probably isn’t
learning enough,”</p>
</blockquote>
<ul>
<li>Alain de Botton.</li>
</ul>
<blockquote>
<p>“Whenever Picasso learned how to do something, he abandoned it.”</p>
</blockquote>
<ul>
<li>—Milton Glaser</li>
</ul>
<blockquote>
<p>“We work because it’s a chain reaction, each subject leads to the next.”</p>
</blockquote>
<ul>
<li>—Charles Eames</li>
</ul>
<blockquote>
<p>“Work is never finished, only abandoned.”</p>
</blockquote>
<ul>
<li>—Paul Valéry</li>
</ul>
<blockquote>
<p>“We don’t make movies to make money, we make money to make more movies.”</p>
</blockquote>
<ul>
<li>—Walt Disney</li>
</ul>
<blockquote>
<p>“The trick is not caring what EVERYBODY thinks of you and just caring about
what the RIGHT people think of you.”</p>
</blockquote>
<ul>
<li>—Brian Michael Bendis</li>
</ul>
<blockquote>
<p>“I ain’t going to give up. Every time you think I’m one place, I’m going to
show up someplace else. I come pre-hated. Take your best shot.”</p>
</blockquote>
<ul>
<li>—Cyndi Lauper</li>
</ul>
<blockquote>
<p>“You and I will be around a lot longer than Twitter, and nothing substitutes
face to face.”</p>
</blockquote>
<ul>
<li>—Rob Delaney</li>
</ul>
<blockquote>
<p>“It’s all about paying attention. Attention is vitality. It connects you with
others.”</p>
</blockquote>
<ul>
<li>Susan Sontag</li>
</ul>
<blockquote>
<p>“Part of the act of creating is in discovering your own kind. They are
everywhere. But don’t look for them in the wrong places.”</p>
</blockquote>
<ul>
<li>—Henry Miller</li>
</ul>
<blockquote>
<p>“Whatever excites you, go do it. Whatever drains you, stop doing it.”</p>
</blockquote>
<ul>
<li>—Derek Sivers</li>
</ul>
<blockquote>
<p>“When people realize they’re being listened to, they tell you things.”</p>
</blockquote>
<ul>
<li>—Richard Ford</li>
</ul>
<blockquote>
<p>“Whatever we say, we’re always talking about ourselves.”</p>
</blockquote>
<ul>
<li>—Alison Bechdel</li>
</ul>
<blockquote>
<p>“You got to make your case.”</p>
</blockquote>
<ul>
<li>—Kanye West</li>
</ul>
<blockquote>
<p>“In the first act, you get your hero up a tree. The second act, you throw
rocks at him. For the third act, you let him down.”</p>
</blockquote>
<ul>
<li>—George Abbott</li>
</ul>
<blockquote>
<p>“‘The cat sat on a mat’ is not a story. ‘The cat sat on the dog’s mat’ is a
story.”</p>
</blockquote>
<ul>
<li>—John le Carré</li>
</ul>
<blockquote>
<p>Work doesn’t speak for itself .</p>
</blockquote>
<ul>
<li>Austin Kleon</li>
</ul>
<blockquote>
<p>“To fake a photograph, all you have to do is change the caption. To fake a
painting, change the attribution.”</p>
</blockquote>
<ul>
<li>Errol Morris</li>
</ul>
<blockquote>
<p>“Do what you do best and link to the rest.”</p>
</blockquote>
<ul>
<li>—Jeff Jarvis</li>
</ul>
<blockquote>
<p>“I don’t believe in guilty pleasures. If you f—ing like something, like it.”</p>
</blockquote>
<ul>
<li>—Dave Grohl</li>
</ul>
<blockquote>
<p>“You’re only as good as your record collection.”</p>
</blockquote>
<ul>
<li>—DJ Spooky</li>
</ul>
<blockquote>
<p>“All of us who do creative work, we get into it because we have good taste,
But there is this gap. For the first couple years you make stuff, it’s just
not that good. It’s trying to be good, it has potential, but it’s not. But
your taste, the thing that got you into the game, is still killer.”</p>
</blockquote>
<ul>
<li>Ira Glass.</li>
</ul>
<blockquote>
<p>“I’m basically a curator, Making books has always felt very connected to my
bookselling experience, that of wanting to draw people’s attention to things
that I liked, to shape things that I liked into new shapes.”</p>
</blockquote>
<ul>
<li>Jonathan Lethem</li>
</ul>
<blockquote>
<p>“Carving out a space for yourself online, somewhere where you can express
yourself and share your work, is still one of the best possible investments
you can make with your time.”</p>
</blockquote>
<ul>
<li>—Andy Baio</li>
</ul>
<blockquote>
<p>“If you work on something a little bit every day, you end up with something
that is massive.”</p>
</blockquote>
<ul>
<li>—Kenneth Goldsmith</li>
</ul>
<blockquote>
<p>“Post as though everyone who can read it has the power to fire you.”</p>
</blockquote>
<ul>
<li>Lauren Cerand</li>
</ul>
<blockquote>
<p>“The Internet is a copy machine, Once anything that can be copied is brought
into contact with the Internet, it will be copied, and those copies never
leave.”</p>
</blockquote>
<ul>
<li>Kevin Kelly</li>
</ul>
<blockquote>
<p>“Make no mistake: This is not your diary. You are not letting it all hang out.
You are picking and choosing every single word.”</p>
</blockquote>
<ul>
<li>—Dani Shapiro</li>
</ul>
<blockquote>
<p>“One day at a time. It sounds so simple. It actually is simple but it isn’t
easy: It requires incredible support and fastidious structuring.”</p>
</blockquote>
<ul>
<li>—Russell Brand</li>
</ul>
<blockquote>
<p>Overnight success is a myth. Dig into almost every overnight success story and
you’ll find about a decade’s worth of hard work and perseverance.</p>
</blockquote>
<ul>
<li>Austin Kleon</li>
</ul>
<blockquote>
<p>“Put yourself, and your work, out there every day, and you’ll start meeting
some amazing people.”</p>
</blockquote>
<ul>
<li>—Bobby Solomon</li>
</ul>
<blockquote>
<p>“You have to make stuff, No one is going to give a damn about your résumé;
they want to see what you have made with your own little fingers.”</p>
</blockquote>
<p>David Carr</p>
<blockquote>
<p>“In order for connection to happen, we have to allow ourselves to be
seen—really seen.”</p>
</blockquote>
<p>Brené Brown</p>
<blockquote>
<p>“A lot of people are so used to just seeing the outcome of work. They never
see the side of the work you go through to produce the outcome.”</p>
</blockquote>
<p>—Michael Jackson</p>
<blockquote>
<p>The Thing About Life Is That One Day You’ll Be Dead</p>
</blockquote>
<p>David Shields</p>
<blockquote>
<p>“Find your voice, shout it from the rooftops, and keep doing it until the
people that are looking for you find you.”</p>
</blockquote>
<p>— Dan Harmon</p>
<blockquote>
<p>“Creativity is not a talent. It is a way of operating.”</p>
</blockquote>
<p>—John Cleese</p>
<blockquote>
<p>“Give what you have. To someone, it may be better than you dare to think.”</p>
</blockquote>
<p>—Henry Wadsworth Longfellow</p>
<blockquote>
<p>“That I don’t know what I’m doing.”</p>
</blockquote>
<p>Thom Yorke</p>
<blockquote>
<p>“That’s all any of us are: amateurs. We don’t live long enough to be anything
else.”</p>
</blockquote>
<p>—Charlie Chaplin</p>]]></description>
  </item>
  <item>
    <title>your first year in code</title>
    <link>https://anzenkodo.github.io/notes/books/your-first-year-in-code.html</link>
    <pubDate>2022-12-29T20:07:13.766Z</pubDate>
    <description><![CDATA[<h1>Your First Year in Code</h1>
<p>Author: Isaac Lyman Created time: March 12, 2021 8:36 PM Page No.: 184 Progress:
✔️</p>
<ol>
<li>Code is more about People then line.</li>
<li>Bad Tools can waste your time sometimes.</li>
<li>Don’t be religious about your tools it is just a tool not a human even a
living thing.</li>
<li>Nobody cars about your code</li>
</ol>
<ul>
<li>You can use whatever coding language or framework you want it is just a line
of code that can change by anybody. It is doesn’t matter that much.</li>
<li>It’s all about the product. The user cares about what you’ve built and how it
solves their problem, not so much about how you got there.</li>
</ul>
<ol>
<li>Understanding the people using our software is the highest priority of
development.</li>
<li>If you create something using company time or computers, it may legally
belong to your employer, so check your contract to make sure you’re aware of
that possibility.</li>
<li>Use a side project to remind myself why I love to code.</li>
<li>Well-organized folders and files. Most programming languages and frameworks
have conventions for how things are organized.</li>
<li>Consistent code style. It doesn’t matter what styles you choose.</li>
<li>start with something simple: a tic-tac-toe game, an “About Me” web page, a
metric unit converter.</li>
<li>Burned out</li>
</ol>
<ul>
<li>I didn’t want to go to work when I woke up in the morning.</li>
<li>You can potentially identify it through a decrease in work performance or
long-term changes in mood, it can be as simple as asking if they are okay</li>
<li>Engaging in non-work related hobbies and activities.</li>
<li>Keep your personal life separate from your work life.</li>
</ul>
<ol>
<li>Be the change you wish to see in our industry.</li>
<li>What I call myself</li>
</ol>
<ul>
<li>Coder had the lowest Glassdoor salary of any position I looked at, even lower
than Junior Software Developer.</li>
<li>The programmer is a term that’s gone the way of the dinosaur.</li>
<li>The developer is, as previously noted, an unnecessarily ambiguous title. If
your job involves building condominiums, you’re reading the wrong book.</li>
<li>Front End Developer is a very volatile title. Not only does it have almost the
highest salary variability of all the job titles researched, but anecdotally
I’ve heard it defined in contradictory ways.</li>
<li>JavaScript Developer, a Vue Developer, or a .NET Engineer, and this is a good
name.</li>
</ul>
<ol>
<li>DevOps</li>
</ol>
<ul>
<li>The DevOps discipline was created to bridge the gap between developers and
operations people.</li>
<li>The container, for the sake of simplicity, can be thought of like a tiny
operating system that runs on top of your existing one and is completely
portable.</li>
<li>If you don’t understand something, Google it. If you can’t figure it out
easily, ask. No one expects you to know everything and you never have to.</li>
<li>If someone has told you otherwise, you’re in the wrong company. Automate as
much as you can. Anything that has to be done manually is error-prone and far
more time-consuming.</li>
<li>Never stop learning. DevOps is a great field and is evolving rapidly. You need
to keep your knowledge up to avoid becoming outdated or obsolete.</li>
</ul>
<ol>
<li>If you know how to write clear and organized documentation, you can reduce
these expenses dramatically.</li>
<li>Good planning helps to avoid wasted time and effort if the requirements
change or a solution already exists.</li>
<li>Valuing simplicity and trusting their developers.</li>
<li>Any standard that a group of experts has decided is the “best way” to do
something.</li>
<li>The three virtues.</li>
</ol>
<ul>
<li>Laziness: The quality that makes you go to great effort to reduce overall
energy expenditure. It makes you write labor-saving programs that other people
will find useful and document what you wrote so you don’t have to answer so
many questions about it.</li>
<li>Impatience: The anger you feel when the computer is being lazy. This makes you
write programs that don’t just react to yo needs, but actually anticipate
them. Or at least pretend to.</li>
<li>Hubris: The quality that makes you write (and maintain) programs that other
people won’t want to say bad things about.</li>
</ul>
<h1>Q&amp;A</h1>
<ol>
<li>When you’re first reading about something new in code.</li>
</ol>
<ul>
<li>Why is this important or useful?</li>
<li>How does it fit with other topics or technologies?</li>
<li>What’s the problem that it’s trying to solve?</li>
</ul>]]></description>
  </item>
  <item>
    <title>range</title>
    <link>https://anzenkodo.github.io/notes/books/range.html</link>
    <pubDate>2022-12-29T20:07:13.766Z</pubDate>
    <description><![CDATA[<h1>Range</h1>
<p>Author: David Epstein
Created time: March 13, 2021 6:02 AM
Page No.: 354
Progress: ✔️</p>
<h1>Points</h1>
<ul>
<li>Eventual elites typically devote less time early on to deliberate practice in the activity in which they will eventually become experts.</li>
<li>They play a variety of sports, usually in an unstructured or lightly structured environment; they gain a range of physical proficiencies from which they can draw; they learn about their own abilities and proclivities.</li>
<li>They learn about their own abilities and proclivities; and only later do they focus in and ramp up technical practice in one area.</li>
<li>The more contexts in which something is learned, the more the learner creates abstract models, and the less they rely on any particular example.</li>
<li>Learners become better at applying their knowledge to a situation they’ve never seen before, which is the essence of creativity.</li>
<li><strong>Learn with Mix things</strong> not a Single thing.</li>
<li>The more likely an expert was to have his or her predictions featured on op-ed pages and television, <strong>the more likely they were always wrong.</strong></li>
<li>The best forecasters view their own ideas as <strong>hypotheses in need of testing.</strong>
<ul>
<li>Their aim is not to convince their teammates of their own expertise, <strong>but to encourage their teammates to help them falsify their own notions.</strong></li>
</ul>
</li>
<li>Crew leadership not as decision making, but as sensemaking.
<ul>
<li>If I make a decision, it is a possession, I take pride in it, I tend to defend it and not listen to those who question it.</li>
<li>If I make sense, then this is more dynamic and I listen and I can change it.</li>
</ul>
</li>
</ul>
<h1>Storys</h1>
<p>Dark horses were on the hunt for match quality. “They never look around and say, ‘Oh, I’m going to fall behind, these people started earlier and have more than me at a younger age,’”</p>
<p>Ogas told me.</p>
<p>“They focused on, ‘Here’s who I am at the moment, here are my motivations, here’s what I’ve found I like to do, here’s what I’d like to learn, and here are the opportunities. Which of these is the best match right now? And maybe a year from now I’ll switch because I’ll find something better.’”</p>
<hr>
<h1>Quotes</h1>
<blockquote>
<p>Learning stuff was less important than learning about oneself. — David Epstein</p>
</blockquote>]]></description>
  </item>
  <item>
    <title>self discipline</title>
    <link>https://anzenkodo.github.io/notes/books/self-discipline.html</link>
    <pubDate>2022-12-29T20:07:13.766Z</pubDate>
    <description><![CDATA[<h1>Self-Discipline</h1>
<p>Author: Mark Manson Created time: March 12, 2021 8:36 PM Page No.: 50 Progress:
✔️</p>
<h1>Quote</h1>
<ul>
<li>Just because something makes us feel bad doesn’t mean we are bad.</li>
</ul>
<h1>Points</h1>
<ul>
<li>Demons and Shame?
<ul>
<li>Find it. Address it. And most importantly: accept it. Find that deep, dark
ugly part of yourself. Confront it, head-on, allowing yourself to feel all
the awful, icky emotions that come with it. Then accept that this is a part
of you and it’s never going away. And that’s fine. You can work with this,
rather than against it.</li>
</ul>
</li>
<li>Self Discipline is easy with people than without them.</li>
<li>You pursue it rather than run from it. And with every pursuit, you get
stronger and healthier and happier.</li>
<li>Goal vs Habits
<ul>
<li>Goals are a one-time bargain. They are the spending mindset. “I will spend X
amount of energy to receive Y reward.”</li>
<li>Habits are an investing mindset. Habits require one to invest one’s efforts
for a little while and then take the rewards of that effort and re-invest
them in a greater effort to form even better habits.</li>
</ul>
</li>
<li>It is okay to miss a day inhabit just remember it is part of the purposes.</li>
<li>People don’t develop and acquire habits at the same rate; everyone is
different.</li>
<li>Some habits are better than other habits because some habits once acquired,
make other positive habits much easier to acquire as well.
<ul>
<li>eg: quitting smoking is hard. But some data suggests that taking up some
form of exercises such as jogging or biking can make it easier for someone
to quit</li>
</ul>
</li>
<li>You wouldn’t keep watching a TV show you don’t like. You wouldn’t eat an
entire plate of food you don’t like. So why the hell are you trying to read a
book you don’t like?</li>
</ul>
<h1>Stores</h1>
<ul>
<li>Waight Loss
<ul>
<li>I know someone who lost a lot of weight (almost 80 lbs) over a 2-year
period. He was running marathons by the time he was in shape, but you know
how he started out? Four minutes a day on the exercise bike. That’s all he
could do at first, but he did it every single day and increased his workout
as he lost more weight and gained more confidence.</li>
<li>Once he knew he could do a few minutes on the bike, he figured he could do a
few more, then he figured he could go for a run, then he believed he could
run competitively, then he set a goal to run a marathon and did it.</li>
<li>He didn’t say, “OK, I’m ridiculously overweight so I should run a marathon.”
He instead started where he was, which was in his basement on an exercise
bike for four minutes a day. This kept him engaged and he didn’t feel too
overwhelmed while he was working to create a healthier lifestyle.</li>
</ul>
</li>
<li>Making Friends
<ul>
<li>Now, I don’t mean just bullshitty Facebook chatter. I mean genuine, “Hey
man, what’s been going on with you lately? How have things been?” followed
by a couple, “Oh, that’s cool, tell me about that,” and finally finished off
with a, “We should get together soon, what are you doing next week?” for
good measure.</li>
<li>It would take maybe 15-20 minutes at most. And it was surprising how easy it
was to reconnect with many people. Most of the time it was touching base
with some friends who I had kind of lost touch with.</li>
<li>Other times it was reaching out and taking a chance with getting to know
someone whom I barely knew. Other times it was going out and meeting
somebody new, maybe at a party or a conference or being introduced</li>
</ul>
</li>
</ul>]]></description>
  </item>
  <item>
    <title>steal like an artist</title>
    <link>https://anzenkodo.github.io/notes/books/steal-like-an-artist.html</link>
    <pubDate>2022-12-29T20:07:13.766Z</pubDate>
    <description><![CDATA[<h2>Steal Like an Artist</h2>
<p>Author: Austin Kieon Created time: March 20, 2021 11:47 PM Page No.: 160
Progress: ✔️</p>
<h2>What I am going to to do after reading it?</h2>
<ul>
<li>Say good thing to people on twitter. Write a blog post about someone you like.</li>
<li>See other people ideas to copy from online.</li>
<li>Make a folder and put the when people say valuable thing to you.</li>
</ul>
<h2>Points</h2>
<ul>
<li>Life in general.
<ul>
<li>Keep good reply, comment &amp; post about you in a “Nice People” folder. And
delete the trolls content immediately.</li>
<li>Don’t ask a question before you Google it.</li>
<li>If you have two or three real passions, don’t feel like you have to pick and
choose between them. Don’t discard. Keep all your passions in your life.</li>
</ul>
</li>
<li>Why being unknown is good thing.
<ul>
<li>There’s no pressure when you’re unknown.</li>
<li>You can do what you want.</li>
<li>You can experiment.</li>
<li>Do things just for the fun of it.</li>
<li>There’s nothing to distract you from getting better.</li>
<li>You don’t have to show anyone you can be yourself.</li>
</ul>
</li>
<li>How to make people love your idea?
<ul>
<li>The best way to make friends on the Internet? Say nice things about them.</li>
<li>Copy the people you want to become and admire.</li>
<li>People love it when you give your secrets away, and sometimes, if you’re
smart about it, they’ll reward you.</li>
<li>Write a blog post about someone’s work that you admire and link to their
site.</li>
<li>Answer a question they’ve asked, solve a problem for them, or improve on
their work and share it online.</li>
<li>Show your appreciation without expecting anything in return.</li>
</ul>
</li>
<li>How to improve the idea?
<ul>
<li>When idea gets better share with people.</li>
<li>If don’t like the idea move on to next idea.</li>
<li>Act like what you want to become in the feature.</li>
<li>Write about what you love &amp; like not what you know.</li>
</ul>
</li>
<li>How to make idea?
<ul>
<li>Every good ideas is the mixer of old ideas. It is like remix.</li>
<li>Collect good ideas, mix them one by one.</li>
<li>If you copy and mix hundreds of people idea you will become original.</li>
<li>Copy the thinking behind the idea.</li>
<li>Start with as few things as possible. (example: Paint a painting with only
one color. Start a business without any start-up capital. friends. Build a
machine out of spare parts.)</li>
</ul>
</li>
<li>Artist vs Hoarder
<ul>
<li>Hoarder collect anything for money or follies resonans.</li>
<li>Artist collect because they know how rich it &amp; they love it by heart.</li>
</ul>
</li>
</ul>
<h2>Meaning</h2>
<h2>Stories</h2>
<p>Dr. Seuss wrote The Cat in the Hat with only 236 different words, so his editor
bet him he couldn’t write a book with only 50 different words. Dr. Seuss came
back and won the bet with Green Eggs and Ham , one of the bestselling children’s
books of all time.</p>
<hr>
<p>Some mornings, when I can’t wake up, I lie in bed and read email and Twitter
until my blood starts boiling and I get fired up enough to spring out of bed.
But instead of wasting my anger on complaining or lashing out at people, I try
to channel it into my writing and my drawing.</p>
<hr>
<p>I spent my teenage years obsessed with songwriting and playing in bands, but
then I decided I needed to focus on just writing, so I spent half a decade
hardly playing any music at all. The phantom limb pain got worse and worse.</p>
<p>About a year ago I started playing in a band again. Now, I’m starting to feel
whole. And the crazy thing is, rather than the music taking away from my
writing, I find it interacting with my writing and making it better—I can tell
that new synapses in my brain are firing, and new connections are being made.</p>
<hr>
<p>“There isn’t a move that’s a new move.” The basketball star Kobe Bryant has
admitted that all of his moves on the court were stolen from watching tapes of
his heroes. But initially, when Bryant stole a lot of those moves, he realized
he couldn’t completely pull them off because he didn’t have the same body type
as the guys he was thieving from. He had to adapt the moves to make them his
own.</p>
<hr>
<h2>Resources</h2>
<ul>
<li>Linda Barry, What It Is</li>
<li>Hugh MacLeod, Ignore Everybody</li>
<li>Jason Fried + David Heinemeier Hansson, Rework</li>
<li>Lewis Hyde, The Gift</li>
<li>Jonathan Lethem, The Ecstasy of Influence</li>
<li>David Shields, Reality Hunger</li>
<li>Scott McCloud, Understanding Comics</li>
<li>Anne Lamott, Bird by Bird</li>
<li>Mihaly Csikszentmihalyi, Flow</li>
<li>Ed Emberley, Make a World</li>
<li>Dr. Seuss, The Cat in the Hat</li>
</ul>
<h2>Quote</h2>
<blockquote>
<p>When people call something “original,” nine out of ten times they just don’t
know the references or the original sources involved.</p>
</blockquote>
<p>— Jonathan Lethem</p>
<blockquote>
<p>“Everything that needs to be said has already been said. But, since no one was
listening, everything must be said again.”</p>
</blockquote>
<p>— André Gide</p>
<blockquote>
<p>“What is originality? Undetected plagiarism.”</p>
</blockquote>
<p>— William Ralph Inge</p>
<blockquote>
<p>“You start out as a phony and become real.”</p>
</blockquote>
<p>—Glenn O’Brien</p>
<blockquote>
<p>“Start copying what you love. Copy copy copy copy. At the end of the copy, you
will find yourself.”</p>
</blockquote>
<p>—Yohji Yamamoto</p>
<blockquote>
<p>Practice productive procrastination.</p>
</blockquote>
<p>— Austin Kleon</p>
<blockquote>
<p>“You can’t connect the dots looking forward, you can only connect them looking
backwards.”</p>
</blockquote>
<p>—Steve Jobs</p>
<blockquote>
<p>Enjoy your obscurity while it lasts. Use it.</p>
</blockquote>
<p>— Austin Kleon</p>
<blockquote>
<p>“Don’t worry about people stealing your ideas. If your ideas are any good,
you’ll have to ram them down people’s throats.”</p>
</blockquote>
<p>—Howard Aiken</p>
<blockquote>
<p>“There’s only one rule I know of: You’ve got to be kind.”</p>
</blockquote>
<p>—Kurt Vonnegut</p>
<blockquote>
<p>“The only mofos in my circle are people that I can learn from.”</p>
</blockquote>
<p>—Questlove</p>
<blockquote>
<p>“Complain about the way other people make software by making software.”</p>
</blockquote>
<p>—Andre Torrez</p>
<blockquote>
<p>“It’s better to burn out than to fade away.”</p>
</blockquote>
<p>— Neil Young</p>
<blockquote>
<p>“Telling yourself you have all the time in the world, all the money in the
world, all the colors in the palette, anything you want—that just kills
creativity.”</p>
</blockquote>
<p>— Jack White</p>
<blockquote>
<p>“Find the most talented person in the room, and if it’s not you, go stand next
to him. Hang out with him. Try to be helpful.”</p>
</blockquote>
<p>— Harold Ramis</p>]]></description>
  </item>
  <item>
    <title>Computer Paradigms</title>
    <link>https://anzenkodo.github.io/notes/programming/computer-paradigms.html</link>
    <pubDate>2022-12-29T20:07:13.766Z</pubDate>
    <description><![CDATA[<h2>1. Explain the difference between declarative and imperative programming paradigm.</h2>
<h3>Imperative Programing</h3>
<p>Imperative programming consists of sets of detailed instructions that are given
to the computer to execute in a given order. It’s called “imperative” because as
programmers we dictate exactly what the computer has to do, in a very specific
way.</p>
<pre><code class="language-js">const nums = [1, 4, 3, 6, 7, 8, 9, 2];
const result = [];

for (let i = 0; i &lt; nums.length; i++) {
  if (nums[i] &gt; 5) result.push(nums[i]);
}

console.log(result); // Output: [ 6, 7, 8, 9 ]
</code></pre>
<h3>Declarative Programming</h3>
<p>Declarative programming is all about hiding away complexity and bringing
programming languages closer to human language and thinking. It’s the direct
opposite of imperative programming in the sense that the programmer doesn’t give
instructions about how the computer should execute the task, but rather on what
result is needed.</p>
<pre><code class="language-js">const nums = [1, 4, 3, 6, 7, 8, 9, 2];

console.log(nums.filter((num) =&gt; num &gt; 5)); // Output: [ 6, 7, 8, 9 ]
</code></pre>
<h2>2. Explain</h2>
<p>Reference: <a href="https://youtu.be/fnZjrNfQVdo">https://youtu.be/fnZjrNfQVdo</a></p>
<h3>Names</h3>
<p>Identifiers that allow us to refer to variables, constants, functions, types,
operations, and so on.</p>
<h3>Bindings</h3>
<p>An association of a name with an object</p>
<h3>Scopes</h3>
<p>The lifetime of a binding of a name to an object</p>
<p><strong>Example:</strong></p>
<pre><code class="language-js">function x() {
  let y = &quot;Hello World&quot;; // Y is only avaiable inside x() scope
  return y;
}
console.log(x());
// &quot;Hello World&quot;
</code></pre>
<h4>Static Scope</h4>
<p>Scope of a variable determined at compile time.</p>
<h4>Dynamic Scope</h4>
<p>Scope of variable determined at runtime.</p>
<h2>3. Explain different storage allocation mechanisms.</h2>
<p>Reference:
<a href="https://www.youtube.com/watch?v=nZG0bQYHB9U">Storage allocation | Static, Stack&amp; Heap | Compiler Design | Lec- 49</a></p>
<p>There are three types:</p>
<ol>
<li>Static stroage allocation</li>
<li>Stack storage allocation</li>
<li>Heap storage allocation</li>
</ol>
<h3>1. Static stroage allocation</h3>
<ul>
<li>In static allocation, names are bond to <strong>storage locations</strong>.</li>
<li>If memory is created at compile time then the memory will be creted in static
area adn only once.</li>
<li>Static allocation supports the <strong>dynamic data structure</strong> that means, memory
is created only at comple time and deallocated after program completion.</li>
<li>The drawback with static storage allocation is that the size and position of
data objects should be know at compile time.</li>
<li>Another drawback is restriction of the recursion proccess.</li>
<li>Example in JavaScript:<pre><code class="language-js">// Declare a variable with the &quot;const&quot; keyword
const x = 10;

// Access the value of the variable
console.log(x); // Output: 10

// Attempt to reassign the value of the variable
x = 20;

// This will throw an error because the value of a const variable cannot be changed
</code></pre>
</li>
</ul>
<h3>2. Stack storage allocation</h3>
<ul>
<li>In this storage is organized as a <strong>stack</strong>(LIFO).</li>
<li>Activation records are pushed and popped.</li>
<li>Activation record contains the locals so that they are bound to fresh storage
in each activation record.</li>
<li>The value of local is deleted when the activation ends.</li>
<li>It works on the basis of <strong>LIFO</strong> and this allocation supports the recursion
process.</li>
<li>Example in JavaScript:<pre><code class="language-js">function foo(x) {
  // Declare a local variable y
  let y = x + 1;

  // Access the value of the local variable
  console.log(y); // Output: x + 1

  // Reassign the value of the local variable
  y = x + 2;

  // The value of the local variable can be changed
  console.log(y); // Output: x + 2
}

// Call the function with an argument
foo(10);
</code></pre>
</li>
</ul>
<h3>3. Heap storage allocation</h3>
<ul>
<li>It is the most flexible allocation scheme.</li>
<li>It is flexible because it is dynamica nature.</li>
<li>Allocation and deallocation of memory can be done at any time and at any place
depending upon the users requirement.</li>
<li>Advantage of Heap allocation is used to allocate memory to the variables
dynamically and when the variables are no more used then claim it back.</li>
<li>Heap storage allocation supports teh recursion process.</li>
<li>Example in JavaScript:<pre><code class="language-js">// Create a new object using the object literal notation
let obj = {};

// Add a property to the object
obj.name = &quot;John&quot;;

// Access the value of the property
console.log(obj.name); // Output: &quot;John&quot;

// Reassign the value of the property
obj.name = &quot;Jane&quot;;

// The value of the property can be changed
console.log(obj.name); // Output: &quot;Jane&quot;
</code></pre>
</li>
</ul>
<h2>4. What is Lambda Calculus? Explain Free variable and Bound variable.</h2>
<p>Lambda calculus is a formal system that is used to define and study functions
and their properties. It consists of three main elements: variables, functions,
and application.</p>
<ul>
<li><strong>Variables</strong> are symbols that represent values. In lambda calculus, variables
are denoted by a single lowercase letter, such as x or y.</li>
<li><strong>Functions</strong> are expressions that take one or more arguments and return a
result. In lambda calculus, functions are denoted by the Greek letter “lambda”
(λ), followed by a list of variables (the function’s arguments), and a body
expression (the function’s result). For example, the function f(x, y) = x + y
could be written as λx.λy.x + y in lambda calculus.</li>
<li><strong>Application</strong> is the process of applying a function to its arguments. In
lambda calculus, application is denoted by placing the function expression and
its arguments within parentheses, separated by spaces. For example, the
application f(x, y) could be written as (f x y) in lambda calculus.</li>
</ul>
<h3>Free variable</h3>
<p>In lambda calculus, a free variable is a variable that is not bound to any
particular value or function. It can be used freely within an expression, and
its value is not determined until the expression is evaluated.</p>
<p>Example:</p>
<pre><code class="language-lambda">(λx.x + y) 2
</code></pre>
<h3>Bound variable.</h3>
<p>A bound variable, on the other hand, is a variable that is bound to a particular
value or function within an expression. It cannot be used freely, and its value
is determined by the binding.</p>
<p>Example:</p>
<pre><code class="language-lambda">(λx.x + y) (λy.y * 2)
</code></pre>
<h2>5. Different between</h2>
<h3>Functional Programming</h3>
<ul>
<li>Functional programming is the form of programming that attempts to avoid
changing state and mutable data.</li>
<li>In a functional program, the output of a function should always be the same,
given the same exact inputs to the function.</li>
<li>This is because the outputs of a function in functional programming purely
relies on arguments of the function, and there is no magic that is happening
behind the scenes.</li>
<li>It works particularly well when there are no boundaries required, or those
boundaries are already predefined.</li>
<li>Functional programming provides the advantages like efficiency, lazy
evaluation, nested functions, bug-free code, parallel programming.</li>
<li>Each small function does its part and only its part.</li>
<li>The function can be easily invoked and reused at any point. It also helps the
code to be managed and the same thing or statements does not need to be
written again and again.</li>
<li>Example: if you call function getSum() it calculates the sum of two inputs and
returns the sum. Given the same inputs for x and y, we will always get the
same output for sum.</li>
</ul>
<h3>Object Oriented Programming(OOP).</h3>
<ul>
<li>Object oriented programming is a programming paradigm in which you program
using objects to represent things you are programming about (sometimes real
world things).</li>
<li>The objects hold data about them in attributes.</li>
<li>The attributes in the objects are manipulated through methods or functions
that are given to the object.</li>
<li>Example:
<ul>
<li>We might have a Person object that represents all of the data a person would
have: weight, height, skin color, hair color, hair length, and so on.</li>
<li>Those would be the attributes.</li>
<li>Then the person object would also have things that it can do such as: pick
box up, put box down, eat, sleep, etc.</li>
<li>These would be the functions that play with the data the object stores.</li>
</ul>
</li>
<li>The main deal with OOP is the ability to encapsulate data from outsiders.
Encapsulation is the ability to hide variables within the class from outside
access — which makes it great for security reasons, along with leaky, unwanted
or accidental usage.</li>
</ul>
<h2>6. What is higher order function?</h2>
<p>Higher-order functions are functions that either accept other functions as
arguments, or return a function as a result.</p>
<p>The result of one higher-order function can be used as the input to another
higher-order function. Any time we pass a lambda expression to a method, that
method is a higher-order function.</p>
<p>A higher order function (HOF) is a function that follows at least one of the
following conditions −</p>
<ul>
<li>Takes on or more functions as argument</li>
<li>Returns a function as its result</li>
</ul>
<h3>Example:</h3>
<pre><code class="language-js">function add(x) {
  return function (y) {
    return x + y;
  };
}

const addTwo = add(2);
console.log(addTwo(3)); // Output: 5
console.log(addTwo(4)); // Output: 6
</code></pre>
<p>The add function is a higher-order function because it takes a function as an
argument (in this case, the anonymous function that returns x + y) and returns a
function as a result (the addTwo function). The addTwo function is a closure,
which is a function that references variables from its outer scope. In this
case, the addTwo function closes over the variable x, which is set to 2. When
the addTwo function is called with an argument, it adds that argument to the
value of x and returns the result.</p>
<p>Higher-order functions are a powerful tool in functional programming, and are
widely used in many programming languages. They allow you to create flexible,
reusable code, and can make your programs more expressive and easier to
understand.</p>
<h2>7. Difference between</h2>
<h3>Normal Evaluation</h3>
<p>Normal order evaluation, also known as call-by-name, is a evaluation strategy
that evaluates the arguments to a function before the function itself. This
means that the arguments are evaluated every time they are used within the
function, rather than being evaluated once before the function is called.</p>
<p>Example in Python:</p>
<pre><code class="language-python">from functools import partial

def foo(x, y):
  print(&quot;x =&quot;, x)
  print(&quot;y =&quot;, y)
  return x + y

def bar(x):
  print(&quot;x =&quot;, x)
  return x * 2

lazy_bar = partial(bar, eval=lambda: bar(1))

print(foo(lazy_bar(), lazy_bar()))  # Output: x = 1, x = 1, y = 2, 3
</code></pre>
<h3>Application order evaluation</h3>
<p>Application order evaluation, also known as call-by-value, is a evaluation
strategy that evaluates the function before the arguments. This means that the
arguments are evaluated once before the function is called, and the resulting
values are passed to the function as inputs.</p>
<p>Example in Python:</p>
<pre><code class="language-python">def foo(x, y):
  print(&quot;x =&quot;, x)
  print(&quot;y =&quot;, y)
  return x + y

def bar(x):
  print(&quot;x =&quot;, x)
  return x * 2

print(foo(bar(1), bar(2)))  # Output: x = 1, x = 2, x = 2, y = 4, 6
print(foo(bar(2), bar(1)))  # Output: x = 2, x = 1, x = 1, y = 2, 4
</code></pre>
<h2>8. What is paradigm and programming paradigm?</h2>
<p>Programming paradigms are different ways or styles in which a given program or
programming language can be organized. Each paradigm consists of certain
structures, features, and opinions about how common programming problems should
be tackled.</p>
<p>There are several types of programming paradigms, including:</p>
<ol>
<li>Imperative</li>
<li>Functional</li>
<li>Object-oriented</li>
<li>Logic</li>
<li>Event-driven</li>
<li>Procedural</li>
<li>Aspect-oriented</li>
</ol>
<h3>Imperative Programing</h3>
<p>Imperative programming consists of sets of detailed instructions that are given
to the computer to execute in a given order. It’s called “imperative” because as
programmers we dictate exactly what the computer has to do, in a very specific
way.</p>
<pre><code class="language-js">const nums = [1, 4, 3, 6, 7, 8, 9, 2];
const result = [];

for (let i = 0; i &lt; nums.length; i++) {
  if (nums[i] &gt; 5) result.push(nums[i]);
}

console.log(result); // Output: [ 6, 7, 8, 9 ]
</code></pre>
<h3>Declarative Programming</h3>
<p>Declarative programming is all about hiding away complexity and bringing
programming languages closer to human language and thinking. It’s the direct
opposite of imperative programming in the sense that the programmer doesn’t give
instructions about how the computer should execute the task, but rather on what
result is needed.</p>
<pre><code class="language-js">const nums = [1, 4, 3, 6, 7, 8, 9, 2];

console.log(nums.filter((num) =&gt; num &gt; 5)); // Output: [ 6, 7, 8, 9 ]
</code></pre>
<h3>Functional Programing</h3>
<p>Functional programming takes the concept of functions a little bit further.</p>
<p>In functional programming, functions are treated as first-class citizens,
meaning that they can be assigned to variables, passed as arguments, and
returned from other functions.</p>
<p>A pure function is one that relies only on its inputs to generate its result.
And given the same input, it will always produce the same result.</p>
<pre><code class="language-js">const nums = [1, 4, 3, 6, 7, 8, 9, 2];

function filterNums() {
  const result = []; // Internal variable

  for (let i = 0; i &lt; nums.length; i++) {
    if (nums[i] &gt; 5) result.push(nums[i]);
  }

  return result;
}

console.log(filterNums()); // Output: [ 6, 7, 8, 9 ]
</code></pre>
<h3>Object-oriented Programing</h3>
<p>The core concept of OOP is to separate concerns into entities which are coded as
objects. Each entity will group a given set of information (properties) and
actions (methods) that can be performed by the entity.</p>
<h2>9. What is calling sequence?</h2>
<p>The code sequence required to effect transfer of control to a subroutine or
procedure, including parameter passing and the recording of the return address.
Uniformity of calling sequences is vital if it is required to call procedures
written in a different language from the calling program.</p>
<h2>10. What is parameter passing?</h2>
<ul>
<li>Reference: <a href="https://youtu.be/fnZjrNfQVdo">Parameter Passing – Real Python</a></li>
<li>A function is a self-contained block of code that encapsulates a specific task
or related group of tasks.</li>
<li>An argument(s) is a value(s) provided to a function to customize its behavior
from one call to the next.</li>
<li>A parameter (or parameter variable) is a variable in the function definition
to store an argument.</li>
</ul>
<h3>Example</h3>
<ul>
<li>
<p>To pass an argument to a function is to provide that argument’s value to the
appropriate parameter variable.</p>
<pre><code class="language-python">def square(num):
  return num * num

val = 4
print(square(val))
# 16
</code></pre>
<p>The argument <code>4</code> is passed to the function <code>square</code></p>
<ul>
<li><code>num</code> is given the vale <code>4</code> since that was the value of <code>val</code> when <code>square</code>
was called.</li>
</ul>
</li>
<li>
<p>Never wolud we consider modifyin the value of <code>num</code> in this function.</p>
</li>
</ul>]]></description>
  </item>
  <item>
    <title>viva 6s sort</title>
    <link>https://anzenkodo.github.io/notes/programming/android/viva-6s-sort.html</link>
    <pubDate>2022-12-29T20:07:13.766Z</pubDate>
    <description><![CDATA[<h1>MAD VIVA</h1>
<h2>1) What is Android?</h2>
<p>Android is mobile OS based on modified version of Linux kernel and other open
source software, designed primarily for touchscreen mobile devices such as
smartphones and tablets.</p>
<h2>2) Enlist features of Android?</h2>
<ul>
<li><strong>Open Source</strong> - Android is open-source, which helps to develop customized
android version for future updates.</li>
<li><strong>Customizable</strong> - Anyone can customize the Android Platform.</li>
<li><strong>Connectivity</strong> - It provides GSM, CDMA, Bluetooth, WiFi etc.</li>
<li><strong>Storage</strong> - Many android devices support external storage through Micro SD
card.</li>
<li><strong>Widgets, Multi-Tasking, Multi-Touch, Media Support</strong></li>
</ul>
<h2>3) Explain Android architecture?</h2>
<ul>
<li>Android architecture contains different number of components to support any
android device needs.</li>
<li>The main components of Android architecture are following:
<ul>
<li><strong>Applications</strong> - Applications is the top layer of android architecture.
The pre-installed applications like will be installed on this layer only.</li>
<li><strong>Application framework</strong> - Application framework provides several important
classes which are used to create an Android application.</li>
<li><strong>Platform libraries</strong> - The platform libraries includes versions C/C++ core
libraries such as Media, Graphics, OpenGL etc. To provide a support for
android development.</li>
<li><strong>Linux Kernel</strong> - The Linux Kernel manages all the available drivers such
as display drivers, camera drivers, audio drivers, etc. Which are required
during the runtime.</li>
</ul>
</li>
</ul>
<h2>4) Explain Android SDK?</h2>
<ul>
<li>The Android software development kit(SDK) allows developers to create
applications for the Android platform. The Android SDK is the most important
software of Android which is installed.</li>
<li>The Android SDK provides to test application API libraries and emulator
documentation sample code developer tools and tutorials which helps us to
build and test the debug apps from Android.</li>
<li>Android SDK provides the tools and application programming interface(API) for
developers to create applications on the Android platform using Java
programming language.</li>
</ul>
<h2>5) What is Android AVD?</h2>
<ul>
<li>An AVD is an emulator configuration that enables to modules an actual device
by calling hardware and software option to be emulated by the Android
emulator.</li>
<li>The AVD manager is an interface that we can launch from android studio which
helps us to create and manage AVD.</li>
<li>An AVD contains hardware profile, system image, storage area, skin and other
properties.</li>
<li>AVD contains emulator for Wear OS, TV, Mobile Phones, Tables, Automotive.</li>
</ul>
<h3>Hardware profile</h3>
<ul>
<li>Hardware profile defines the characteristics of a device as shipped from the
factory of a device as shipped from the factory.</li>
<li>The AVD manager comes preloaded with certain hardware profile such as Pixel
device and we can define or customize the hardware profile as needed.</li>
</ul>
<h3>System image</h3>
<ul>
<li>A system image labelled with Google API includes access to Google Play
services.</li>
<li>A system image Labelled with Google Play logo in the Play Store includes the
Google Play Store apps and can access to the Google Play Services.</li>
</ul>
<h3>Storage Area</h3>
<ul>
<li>The AVD has dedicated storage area on our development machine.</li>
<li>It stores the devices data such as installed apps and settings, as well as
emulated and SD cards.</li>
<li>If needed we can use the AVD manager to wipe user data so that the devices has
the same data as if it was a new device.</li>
</ul>
<h2>6) What is emulator?</h2>
<p>The Android Emulator simulates Android devices on your computer so that you can
test your application on a variety of devices and Android API levels without
needing to have each physical device.</p>
<h2>7) Difference between JVM and DVM?</h2>
<table>
<thead>
<tr>
<th>JVM</th>
<th>DVM</th>
</tr>
</thead>
<tbody>
<tr>
<td>JVM supports multiple OS</td>
<td>DVM supports only Android OS</td>
</tr>
<tr>
<td>JVM forms separate classes in separate <code>.class</code> byte code files.</td>
<td>DVM forms multiple class in <code>.dex</code> byte code file.</td>
</tr>
<tr>
<td>JVM runs on more memory</td>
<td>DVM runs on less memory.</td>
</tr>
<tr>
<td>The executable format of JVM is JAR</td>
<td>The executable format of DVM is APK.</td>
</tr>
<tr>
<td>JVM has different constant pools.</td>
<td>DVM has common constant pool.</td>
</tr>
<tr>
<td>It runs <code>.class</code> byte code directly…</td>
<td>The <code>.class</code> byte codes are optimize to <code>.odex</code> format before executing in DVM.</td>
</tr>
<tr>
<td>JVM has different constant pools.</td>
<td>DVM has common constant pool.</td>
</tr>
</tbody>
</table>
<h2>8) What are activities?</h2>
<ul>
<li>Activates dictate the UI and handles the user interaction to the smartphone
screen.</li>
<li>Activates represent a single screen that user interact.</li>
</ul>
<h2>9) What are services?</h2>
<ul>
<li>There are Three types of services in Android:
<ul>
<li>Foreground service</li>
<li>Background service</li>
<li>Bound service</li>
</ul>
</li>
</ul>
<h3>Foreground service</h3>
<ul>
<li>A foreground service performs some operation that noticeable to the user.</li>
<li>Foreground services must display a Notification.</li>
<li>Foreground service continue running even when the user isn’t interacting with
the app.</li>
<li><strong>Example:</strong> An audio app would use a foreground service to play an audio
track.</li>
</ul>
<h3>Background Service</h3>
<ul>
<li>A background service performs an operating that isn’t directly noticed by
user.</li>
<li><strong>Example:</strong> If an app used a service to compact its storage, that would
usually be a background service.</li>
</ul>
<h3>Bound Service</h3>
<ul>
<li>A service is bound when an application component binds to it by calling
<code>bindService()</code>.</li>
<li>A bound service offers a client-server interface that allows components to
interact with the service, send requests, receive results, and even do so
across processes with Interprocess Communication(IPC).</li>
</ul>
<h2>10) What are intents?</h2>
<h3>Implicit intent</h3>
<p>The implicit intent is the intent where instead of defining the exact components
, you define the action that you want to perform for different activities.</p>
<h3>Explicit intent</h3>
<p>An explicit intent is an intent where you explicitly define the component that
needs to be called by Android System. An explicit intent is one that you use to
launch a specific app component, such as particular activity or service in your
app.</p>
<h2>11) Explain MainActivity, Manifest &amp; Layout file?</h2>
<h3>MainActivity</h3>
<p>The MainActivity.java file is automatically kept in main folder by Android
Studio all the classes will be available here and Android Studio will even
bundle together the package so that we can work with the file without having to
go through all the folders.</p>
<h3>Manifest</h3>
<p>Manifest file generated by Android Studio when we create a project. This file
contains the configuration parameters of a project such as permission services
and additional libraries.</p>
<h3>Layout</h3>
<p>Layout specifies the various widgets to be used in UI and the relationships
between such widgets and their containers. Layout files are stored in
<code>res-&gt;layout</code> in the Android application.</p>
<h2>12) What are different types of UI components?</h2>
<ul>
<li><code>TextView</code> - is a UI component that displays the text to the user  on the user display screen.</li>
<li><code>EditText</code> - is a UI control that allows the user to enter some
text.</li>
<li><code>Button</code> - is a UI that is used to perform some action as soon as the
user clicks on it.</li>
<li><code>ProgressBar</code> - are used to show progress of a task.</li>
</ul>
<h2>13) What are Layouts?</h2>
<ul>
<li><code>LinearLayout</code> - is a view group that aligns all children in a single
direction, vertically or horizontally.</li>
<li><code>AbsoluteLayout</code> - enables us to specify the exact location of its children.</li>
<li><code>TableLayout</code> - is a view that groups views into rows and columns.</li>
<li><code>RelativeLayout</code> - is a view group that displays child views in relative
positions.</li>
<li><code>FrameLayout</code> - is a placeholder on screen that we can use to display a single
view.</li>
</ul>
<h2>14) Define</h2>
<ul>
<li><code>TextView</code> - This control is used to display text to the user.</li>
<li><code>EditTextView</code> - EditText is a predefined subclass of TextView that includes
rich editing capabilities.</li>
<li><code>Button</code> - A push-button that can be pressed, or clicked, by the user to
perform an action.</li>
<li><code>ImageButton</code> - An ImageButton is an AbsoluteLayout which enables you to
specify the exact location of its children. This shows a button with an image
(instead of text) that can be pressed or clicked by the user.</li>
<li><code>CheckBox</code> - An on/off switch that can be toggled by the user. You should use
check box when presenting users with a group of selectable options that are
not mutually exclusive.</li>
</ul>
<h2>15) Explain</h2>
<ul>
<li><code>ListView</code> - List of scrollable items can be displayed in Android using
ListView. It helps you to displaying the data in the form of a scrollable list.</li>
<li><code>GridView</code> - It is a view group that display items in two dimensional
scrolling grid (rows and columns), the grid items are not necessarily
predetermined but they are automatically inserted to the layout using a
ListAdapter.</li>
<li><code>ImageView</code> - It is used to display an image file in application.</li>
<li><code>Scrollview</code> - It is a view group that is used to make vertically scrollable
views. A scroll view contains a single direct child only.</li>
</ul>
<h2>16) What is toast explain with example?</h2>
<ul>
<li>Toast is used to display information for a period of time.</li>
<li>It contains a message to be displayed quickly and disappears after specified period of time.</li>
<li>It does not block the user interaction.</li>
<li>Example:</li>
</ul>
<pre><code class="language-xml">Toast.makeText(getApplicationContext(),&quot;Hello Javatpoint&quot;,Toast.LENGTH_SHORT).show();
</code></pre>
<h2>17) Explain activity life cycle?</h2>
<ul>
<li><code>onCreate</code> - called when activity is first created.</li>
<li><code>onStart</code> - called when activity is becoming visible to the user.</li>
<li><code>onResume</code> - called when activity will start interacting with the user.</li>
<li><code>onPause</code> - called when activity is not visible to the user.</li>
<li><code>onStop</code> - called when activity is no longer visible to the user.</li>
<li><code>onRestart</code> - called after your activity is stopped, prior to start.</li>
<li><code>onDestroy</code> - called before the activity is destroyed.</li>
</ul>
<h2>18) Explain broadcast receivers?</h2>
<p>Broadcast Receivers simply respond to broadcast messages from other applications
or from the system itself. These messages are sometime called events or intents.</p>
<h3>Creating the Broadcast Receiver</h3>
<p>A broadcast receiver is implemented as a subclass of Broadcast Receiver class
and overriding the <code>onReceive()</code> method where each message is received as an
Intent object parameter.</p>
<h3>Registering Broadcast Receiver</h3>
<p>An application listens for specific broadcast intents by registering a broadcast
receiver in AndroidManifest.xml file. Consider we are going to register
My Receiver for system generated event <code>ACTION_BOOT_COMPLETED</code> which is fired
by the system once the Android system has completed the boot process.</p>
<h2>19) Explain content provider?</h2>
<ul>
<li>Android system allows the content provider to store the application data in
several ways.</li>
<li>Users can manage to store the application data like images, audio, videos, and
personal contact information by storing them in SQLite database, in files or
even on a network.</li>
<li>In order to share the data, content providers have certain permissions that
are used to grant or restrict the right to other applications to interfere
with the data.</li>
</ul>
<h2>20) What is sensors?</h2>
<ul>
<li>Most Android powered devices have built-in sensors that measure motion,
orientation, and various environmental conditions.</li>
<li>There are three type of sensors in Android:
<ul>
<li>Motion</li>
<li>Environmental</li>
<li>Position</li>
</ul>
</li>
</ul>
<h3>Motion</h3>
<p>These sensors measure acceleration forces and rotational forces along three axes
. This category includes accelerometers, gravity sensors, gyroscopes, and
rotational vector.</p>
<h3>Environmental</h3>
<p>These sensors measure various environmental parameters, such as ambient air
temperature and pressure, illumination, and humidity. This category includes
barometers, photometers, and thermometers.</p>
<h3>Position</h3>
<p>These sensors measure the physical position of a device. This category includes
orientation sensors and magnetometers.</p>
<h2>21) What is location based services?</h2>
<p><strong>Location Based Services:</strong> Location-Based Services(LBS) are present in Android
to provide you with features like current location detection, display of nearby
places, Geofencing, etc. It fetches the location using your device’s GPS, WiFi,
or Cellular Networks.</p>
<h2>22) What is Geo code and Reverse geo code?</h2>
<h3>Geo code</h3>
<p>Geocoding is the process of converting addresses (like a street address) into
geographic coordinates (like latitude and longitude), which you can use to place
markers on a map, or position the map.</p>
<h3>Reverse Geo code</h3>
<p>Reverse geocoding is the process of converting geographic coordinates into a
human-readable address.</p>
<h2>23) Enlist Steps to publish android application?</h2>
<ul>
<li><strong>Step 1:</strong> First generate signed apk of your Android App to publish it on Play Store.</li>
<li><strong>Step 2:</strong> Sign up for Google Play Console to publish and manage your Android App.</li>
<li><strong>Step 3:</strong> Now click on Create Application.</li>
<li><strong>Step 4:</strong> Now fill store listing details of your App which include Title, Short and Full description.</li>
<li><strong>Step 5:</strong> Now Click on ready on publish along with save draft and click on Manage release.</li>
<li><strong>Step 6:</strong> After Manage production click on edit release.</li>
<li><strong>Step 7:</strong> Now click on review.</li>
<li><strong>Step 8:</strong> After review click on Start Rollout to production.</li>
</ul>
<h2>24) What is date and time picker?</h2>
<h3><code>DatePicker</code></h3>
<ul>
<li>Date picker is widget used to select a date.</li>
<li>It allows to select data by day, month and year in your custom UI.</li>
<li>Methods of <code>DatePicker</code> in invokes <code>getDayOfMonth()</code>, <code>getMonth()</code>,
<code>getYear()</code>, <code>getFirstDayOfWeek()</code>.</li>
</ul>
<h3><code>TimePicker</code></h3>
<ul>
<li><code>TimePicker</code> is a widget used for selecting the time of the day in either
AM/PM mode or 24h mode.</li>
<li>The displayed time consist of hours, minutes and clock format.</li>
<li>Methods of <code>TimePicker</code> invokes <code>setCurrentHour()</code>, <code>setHour()</code>,
<code>setCurrentMinute()</code>, <code>getCurrentMinute()</code>.</li>
</ul>]]></description>
  </item>
  <item>
    <title>final</title>
    <link>https://anzenkodo.github.io/notes/programming/android/final.html</link>
    <pubDate>2022-12-29T20:07:13.766Z</pubDate>
    <description><![CDATA[<h1>1. Attempt any FIVE of the following: 10</h1>
<h2>a) List any four features of Android operating system.</h2>
<ul>
<li>Open Source</li>
<li>Beautiul UI</li>
<li>Connectivity</li>
<li>Storage</li>
<li>Multi-Touch</li>
<li>Multi-Tasking</li>
<li>Multi-Language</li>
<li>Resizable widgets</li>
<li>Messaging</li>
<li>Media Support</li>
<li>Web Browser</li>
</ul>
<h2>b) Define Dalvik Virtual Machine (DVM).</h2>
<table>
<thead>
<tr>
<th>JVM</th>
<th>DVM</th>
</tr>
</thead>
<tbody>
<tr>
<td>JVM supports multiple OS</td>
<td>DVM supports only Android Operating system.</td>
</tr>
<tr>
<td>JVM forms separate classes in separate <code>.class</code> byte code files.</td>
<td>DVM forms multiple class in <code>.dex</code> byte code file.</td>
</tr>
<tr>
<td>It is based on stack based virtual machine architecture.</td>
<td>It is based on register based virtual machine architecture.</td>
</tr>
<tr>
<td>JVM runs on more memory</td>
<td>DVM runs on less memory.</td>
</tr>
<tr>
<td>The executable format of JVM is JAR.</td>
<td>The executable format of DVM is APK.</td>
</tr>
<tr>
<td>JVM has different constant pools.</td>
<td>DVM has common constant pool.</td>
</tr>
<tr>
<td>It runs <code>.class</code> byte code directly.</td>
<td>The <code>.class</code> byte codes are optimize to .odex format before executing in DVM.</td>
</tr>
</tbody>
</table>
<h2>c) List any four folders from directory structure of Android project and elaborate in one line.</h2>
<h3>Manifests Folder</h3>
<ul>
<li>Manifests folder contains AndroidManifest.xml for creating our android application.</li>
<li>This file contains information about our application such as the Android version, metadata, states package for Kotlin file, and other application components.</li>
<li>It acts as an intermediator between android OS and our application.</li>
</ul>
<h3>Java folder</h3>
<ul>
<li>The Java folder contains all the java and Kotlin source code (.java) files that we create during the app development, including other Test files.</li>
</ul>
<h3>Resource (res) folder</h3>
<ul>
<li>The resource folder is the most important folder because it contains all the non-code sources like images, XML layouts, and UI strings for our android application.</li>
</ul>
<h3>res/drawable folder</h3>
<ul>
<li>It contains the different types of images used for the development of the application.</li>
</ul>
<h2>d) List any four attributes of check box.</h2>
<ul>
<li>text - This is the Text to display.</li>
<li>id - This supplies an identifier name for this view.</li>
<li>visibility - This controls the initial visibility of the view.</li>
<li>editable - If set, specifies that this TextView has an input method.</li>
</ul>
<h2>e) Draw diagram of activity life cycle.</h2>
<pre><code>                             ┌┬────────┬┐
                             ││Activity││
                             ││launched││
                             └┴────┬───┴┘
                                   │
                              ┌────▼─────┐
         ┌────────────────────►onCreate()│
         │                    └────┬─────┘
         │                         │
         │                    ┌────▼────┐                    ┌───────────┐
         │                    │onStart()◄────────────────────┤onRestart()│
         │                    └────┬────┘                    └───────▲───┘
         │                         │                                 │
User navigates                ┌────▼─────┐                           │
to the activity               │onResume()◄───────────────┐           │
         │                    └────┬─────┘               │           │
         │                         │                     │           │
  ┌┬─────┴─────┬┐            ┌┬────┴───┬┐                │           │
  ││App process││            ││Activity││                │           │
  ││killed     ││            ││Running ││                │           │
  └┴─────▲─────┴┘            └┴────┬───┴┘                │           │
         │                         │                     │           │
         │                         ▼                     │           │
Apps with higher priority   Another activity comes   User returns    │
need memory                 into the foreground      to the activity │
         │                         │                     │           │
         │                         │                     │           │
         │                    ┌────▼────┐                │           │
         │                    │onPause()├────────────────┘           │
         │                    └────┬────┘                            │
         │                         │                                 │
         │                         │                                 │
         │                  The activity is                          │
         │                  no longer visible                        │
         │                         │                        User navigates
         │                         │                        to the activity
         │                    ┌────▼───┐                             │
         └────────────────────┤onStop()├─────────────────────────────┘
                              └────┬───┘
                                   │
                                   │
                            The activity is finishing or
                            being destroyed by the system
                                   │
                                   │
                              ┌────▼──────┐
                              │onDestroy()│
                              └────┬──────┘
                                   │
                             ┌┬────▼────┬┐
                             ││Activity ││
                             ││Shut Down││
                             └┴─────────┴┘
</code></pre>
<h2>f) State syntax to display built in zoom control.</h2>
<p>In Android, Zoom Control is a class that has some set of methods that are used to control the zoom functionality.</p>
<pre><code class="language-java">ZoomControl zoomControls = (ZoomControls) findViewById(R.id.simpleZoomControl);
</code></pre>
<h2>g) Name two classes used to play audio and video in Android.</h2>
<ul>
<li>The following classes are used to play sound and video in the Android framework:
<ul>
<li>MediaPlayer - This class is the primary API for playing sound and video.</li>
<li>AudioManager - This class manages audio sources and audio output on a device.</li>
</ul>
</li>
</ul>
<h1>2. Attempt any THREE of the following: 12</h1>
<h2>a) Describe Android architecture with diagram.</h2>
<ul>
<li>Android architecture contains different number of components to support any android device needs. Android software contains an open-source Linux Kernel having collection of number of C/C++ libraries which are exposed through an application framework services.</li>
<li>The main components of android architecture are following:</li>
</ul>
<ol>
<li><strong>Applications:</strong> Applications is the top layer of android architecture. The pre-installed applications like home, contacts, camera, etc and third party applications will be installed on this layer only.</li>
<li><strong>Application framework:</strong> Application Framework provides several important classes which are used to create an Android application.</li>
<li><strong>Application runtime:</strong> Android Runtime environment contains components like core libraries and the Dalvik virtual machine(DVM).</li>
<li><strong>Platform libraries:</strong> The Platform Libraries includes various C/C++ core libraries and Java based libraries such as Media, Graphics, OpenGL etc. to provide a support for android development.</li>
<li><strong>Linux Kernel:</strong> The linux kernel manages all the available drivers such as display drivers, camera drivers, audio drivers, etc. which are required during the runtime.</li>
</ol>
<h2>b) Differentiate between DVM and JVM</h2>
<table>
<thead>
<tr>
<th>JVM</th>
<th>DVM</th>
</tr>
</thead>
<tbody>
<tr>
<td>JVM supports multiple OS</td>
<td>DVM supports only Android Operating system.</td>
</tr>
<tr>
<td>JVM forms separate classes in separate <code>.class</code> byte code files.</td>
<td>DVM forms multiple class in <code>.dex</code> byte code file.</td>
</tr>
<tr>
<td>It is based on stack based virtual machine architecture.</td>
<td>It is based on register based virtual machine architecture.</td>
</tr>
<tr>
<td>JVM runs on more memory</td>
<td>DVM runs on less memory.</td>
</tr>
<tr>
<td>The executable format of JVM is JAR.</td>
<td>The executable format of DVM is APK.</td>
</tr>
<tr>
<td>JVM has different constant pools.</td>
<td>DVM has common constant pool.</td>
</tr>
<tr>
<td>It runs <code>.class</code> byte code directly.</td>
<td>The <code>.class</code> byte codes are optimize to .odex format before executing in DVM.</td>
</tr>
</tbody>
</table>
<h2>c) List and elaborate steps to deploy in Android application on Google play store.</h2>
<ul>
<li>Step 1 - First generate signed apk of your Android App to publish it on Play Store.</li>
<li>Step 2 - Sign up for Google Play Console to publish and manage your Android App.</li>
<li>Step 3 - Now click on Create Application.</li>
<li>Step 4 - Now fill store listing details of your App which include Title, Short and Full description.</li>
<li>Step 5 - Now Click on ready on publish along with save draft and click on Manage release.</li>
<li>Step 6 - After Manage production click on edit release.</li>
<li>Step 7 - Now click on review.</li>
<li>Step 8 - After review click on Start Rollout to production.</li>
</ul>
<h2>d) Describe with example, how to create a simple database in SQLite (Assume suitable data).</h2>
<ul>
<li>SQLite is a opensource SQL database that stores data to a text file on a device. Android comes in with built in SQLite database implementation.</li>
<li>SQLite supports all the relational database features.</li>
</ul>
<pre><code class="language-java">SQLiteDatabase mydatabase = openOrCreateDatabase(&quot;your database name&quot;,MODE_PRIVATE,null);
</code></pre>
<h1>3. Attempt any THREE of the following: 12</h1>
<h2>a) Write down the steps to install and configure Android studio.</h2>
<ul>
<li>Head over to <a href="https://developer.android.com/studio">https://developer.android.com/studio</a> to get the Android Studio executable or zip file.</li>
<li>Click on the Download Android Studio Button.</li>
<li>After the downloading has finished, open the file from downloads and run it. It will prompt the following dialog box.</li>
<li>Once “Finish” is clicked, choose the ‘Don’t import Settings option’.</li>
<li>This will start the Android Studio.</li>
<li>After it has found the SDK components, it will redirect to the Welcome dialog box.</li>
<li>Now it is time to download the SDK components.</li>
<li>Click on Start a new Android Studio project to build a new app.</li>
</ul>
<h2>b) State syntax to create Text View and Image button with any two attributes of each.</h2>
<h3>TextView</h3>
<pre><code class="language-xml">&lt;TextView
    android:id=&quot;@+id/student_name&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:text=&quot;Name:&quot; /&gt;
</code></pre>
<ul>
<li>text -  Sets text of the Textview</li>
<li>id - Gives a unique ID to the Textview</li>
</ul>
<h3>ImageButton</h3>
<pre><code class="language-xml">&lt;ImageButton
  android:id=&quot;@+id/imageButton&quot;
  android:src=&quot;@drawable/button&quot;
  android:layout_height=&quot;wrap_content&quot;
  android:layout_width=&quot;wrap_content&quot;/&gt;
</code></pre>
<ul>
<li>background - This is a drawable to use as the background.</li>
<li>id - Gives a unique ID to the Textview</li>
</ul>
<h2>c) Describe Android service life cycle along with diagram.</h2>
<ul>
<li>A service is an application component which runs withour direst interaction with the user in the background.</li>
<li>Services are used for repetitive and potentially long running operations:
<ul>
<li>Internet downloads</li>
<li>Checking for new data</li>
<li>Data processing</li>
<li>Updating content</li>
<li>Providers and the like</li>
</ul>
</li>
<li>They typically run in the background to perform long-running operations or work for remote processes.</li>
</ul>
<pre><code>                             ┌┬────────┬┐
                             ││Activity││
                             ││launched││
                             └┴────┬───┴┘
                                   │
                              ┌────▼─────┐
         ┌────────────────────►onCreate()│
         │                    └────┬─────┘
         │                         │
         │                    ┌────▼────┐                    ┌───────────┐
         │                    │onStart()◄────────────────────┤onRestart()│
         │                    └────┬────┘                    └───────▲───┘
         │                         │                                 │
User navigates                ┌────▼─────┐                           │
to the activity               │onResume()◄───────────────┐           │
         │                    └────┬─────┘               │           │
         │                         │                     │           │
  ┌┬─────┴─────┬┐            ┌┬────┴───┬┐                │           │
  ││App process││            ││Activity││                │           │
  ││killed     ││            ││Running ││                │           │
  └┴─────▲─────┴┘            └┴────┬───┴┘                │           │
         │                         │                     │           │
         │                         ▼                     │           │
Apps with higher priority   Another activity comes   User returns    │
need memory                 into the foreground      to the activity │
         │                         │                     │           │
         │                         │                     │           │
         │                    ┌────▼────┐                │           │
         │                    │onPause()├────────────────┘           │
         │                    └────┬────┘                            │
         │                         │                                 │
         │                         │                                 │
         │                  The activity is                          │
         │                  no longer visible                        │
         │                         │                        User navigates
         │                         │                        to the activity
         │                    ┌────▼───┐                             │
         └────────────────────┤onStop()├─────────────────────────────┘
                              └────┬───┘
                                   │
                                   │
                            The activity is finishing or
                            being destroyed by the system
                                   │
                                   │
                              ┌────▼──────┐
                              │onDestroy()│
                              └────┬──────┘
                                   │
                             ┌┬────▼────┬┐
                             ││Activity ││
                             ││Shut Down││
                             └┴─────────┴┘
</code></pre>
<h2>d) State and elaborate the syntax of required class and methods for Geocoding.</h2>
<ul>
<li>A class for handling geocoding and reverse geocoding.</li>
<li>Geocoding is the process of transforming a street address or other description of a location into a (latitude, longitude) coordinate.</li>
</ul>
<pre><code class="language-java">public final class Geocoder
extends Object
</code></pre>
<h1>4. Attempt any THREE of the following: 12</h1>
<h2>a) Explain with example, code to create GUI using absolute layout (Assume suitable data).</h2>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;AbsoluteLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    android:paddingLeft=&quot;16dp&quot;
    android:paddingTop=&quot;16dp&quot;
    android:paddingRight=&quot;16dp&quot;
    tools:context=&quot;.MainActivity&quot;&gt;
    &lt;TextView
        android:id=&quot;@+id/student_name&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_x=&quot;125dp&quot;
        android:layout_y=&quot;280dp&quot;
        android:text=&quot;Name:&quot;
        android:textColor=&quot;#86AD33&quot;
        android:textSize=&quot;20dp&quot;
        android:textStyle=&quot;bold&quot; /&gt;
    &lt;TextView
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_x=&quot;125dp&quot;
        android:layout_y=&quot;304dp&quot;
        android:text=&quot;Age:&quot;
        android:textColor=&quot;#86AD33&quot;
        android:textSize=&quot;20dp&quot;
        android:textStyle=&quot;bold&quot; /&gt;
    &lt;TextView
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_x=&quot;125dp&quot;
        android:layout_y=&quot;328dp&quot;
        android:text=&quot;Mobile Number:&quot;
        android:textColor=&quot;#86AD33&quot;
        android:textSize=&quot;20dp&quot;
        android:textStyle=&quot;bold&quot; /&gt;
&lt;/AbsoluteLayout&gt;
</code></pre>
<h2>b) Write a program to demonstrate Date and Time picker.</h2>
<h3>Date Picker</h3>
<ul>
<li>Android Date Picker allows you to select the date consisting of day, month and
year in your custom user interface.</li>
<li>Methods of DatePicker:
<ul>
<li><strong>getDayOfMonth()</strong> - This method gets the selected day of month.</li>
<li><strong>getMonth()</strong> - This method gets the selected month.</li>
<li><strong>getYear()</strong> - This method gets the selected year.</li>
<li><strong>getFirstDayOfWeek()</strong> - This method returns first day of the week.</li>
<li><strong>getCalendarView()</strong> - This method returns calender View.</li>
</ul>
</li>
</ul>
<h3>TimePicker</h3>
<ul>
<li>Android Time Picker allows us to select the time of day in either 24h or AM/PM
mode.</li>
<li>The time consists of hours, minutes and clock format.</li>
<li>Methods of TimePicker</li>
</ul>
<ol>
<li><strong>setCurrentHour()</strong> - This method sets the current hour.</li>
<li>setCurrentMinute() - This method sets the current minute.</li>
<li><strong>is24HoursView()</strong> - This method returns true if this 24 hour view else
false.</li>
<li><strong>isEnabled()</strong> - This method returns the enabled status for this view.</li>
</ol>
<h2>c) Describe multimedia framework of Android with diagram.</h2>
<figure data-type="image"><img src="https://source.android.com/static/docs/core/media/images/ape_media_buffer_alloc_n.png" alt="Multimedia framework of Android diagram" loading="lazy" decoding="async"></figure>
<h2>d) Discuss developer console with at least four features.</h2>
<ul>
<li>Multiple User Accounts</li>
<li>Store Listing Details</li>
<li>Upload and Instantly Publish</li>
<li>Alpha and Beta Testing</li>
<li>Multiple APK Support</li>
<li>Selling and Pricing Your Products</li>
<li>In-app Products</li>
<li>Distribution Controls</li>
<li>User Reviews and Crash Reports</li>
<li>App Statistics</li>
</ul>
<h2>e) Write a program to demonstrate declaring and using permissions with any relevant example.</h2>
<p>AndroidManifest.xml</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
    &lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
            package=&quot;org.geeksforgeeks.requestPermission&quot;&gt;

        &lt;!--Declaring the required permissions--&gt;
        &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;
        &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;
        &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;

        &lt;application
            android:allowBackup=&quot;true&quot;
            android:icon=&quot;@mipmap/ic_launcher&quot;
            android:label=&quot;@string/app_name&quot;
            android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;
            android:supportsRtl=&quot;true&quot;
            android:theme=&quot;@style/AppTheme&quot;&gt;

            &lt;activity
                android:name=&quot;.MainActivity&quot;&gt;

                &lt;intent-filter&gt;
                    &lt;action
                        android:name=&quot;android.intent.action.MAIN&quot; /&gt;

                    &lt;category
                        android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
                &lt;/intent-filter&gt;

            &lt;/activity&gt;
        &lt;/application&gt;

&lt;/manifest&gt;
</code></pre>
<p>activity_main.xml</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;RelativeLayout
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    tools:context=&quot;.MainActivity&quot;&gt;

    &lt;!-- To show toolbar--&gt;
    &lt;android.support.v7.widget.Toolbar
        android:id=&quot;@+id/toolbar&quot;
        android:layout_width=&quot;match_parent&quot;
        android:background=&quot;@color/colorPrimary&quot;
        app:title=&quot;GFG | Permission Example&quot;
        app:titleTextColor=&quot;@android:color/white&quot;
        android:layout_height=&quot;?android:attr/actionBarSize&quot;/&gt;

    &lt;!--Button to request storage permission--&gt;
    &lt;Button
        android:id=&quot;@+id/storage&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:text=&quot;Storage&quot;
        android:layout_marginTop=&quot;16dp&quot;
        android:padding=&quot;8dp&quot;
        android:layout_below=&quot;@id/toolbar&quot;
        android:layout_centerHorizontal=&quot;true&quot;/&gt;

    &lt;!--Button to request camera permission--&gt;
    &lt;Button
        android:id=&quot;@+id/camera&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:text=&quot;Camera&quot;
        android:layout_marginTop=&quot;16dp&quot;
        android:padding=&quot;8dp&quot;
        android:layout_below=&quot;@id/storage&quot;
        android:layout_centerHorizontal=&quot;true&quot;/&gt;

&lt;/RelativeLayout&gt;
</code></pre>
<p>MainActivity.java</p>
<pre><code class="language-java">import android.Manifest;
import android.content.pm.PackageManager;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

public class MainActivity extends AppCompatActivity {

    // Defining Buttons
    private Button storage, camera;

    // Defining Permission codes.
    // We can give any value
    // but unique for each permission.
    private static final int CAMERA_PERMISSION_CODE = 100;
    private static final int STORAGE_PERMISSION_CODE = 101;

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        storage = findViewById(R.id.storage);
        camera = findViewById(R.id.camera);

        // Set Buttons on Click Listeners
        storage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v)
            {
                checkPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE, STORAGE_PERMISSION_CODE);
            }
        });

        camera.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v)
            {
                checkPermission(Manifest.permission.CAMERA, CAMERA_PERMISSION_CODE);
            }
        });
    }

    // Function to check and request permission.
    public void checkPermission(String permission, int requestCode)
    {
        if (ContextCompat.checkSelfPermission(MainActivity.this, permission) == PackageManager.PERMISSION_DENIED) {

            // Requesting the permission
            ActivityCompat.requestPermissions(MainActivity.this, new String[] { permission }, requestCode);
        }
        else {
            Toast.makeText(MainActivity.this, &quot;Permission already granted&quot;, Toast.LENGTH_SHORT).show();
        }
    }

    // This function is called when the user accepts or decline the permission.
    // Request Code is used to check which permission called this function.
    // This request code is provided when the user is prompt for permission.

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                        @NonNull String[] permissions,
                                        @NonNull int[] grantResults)
    {
        super.onRequestPermissionsResult(requestCode,
                                        permissions,
                                        grantResults);

        if (requestCode == CAMERA_PERMISSION_CODE) {
            if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(MainActivity.this, &quot;Camera Permission Granted&quot;, Toast.LENGTH_SHORT) .show();
            }
            else {
                Toast.makeText(MainActivity.this, &quot;Camera Permission Denied&quot;, Toast.LENGTH_SHORT) .show();
            }
        }
        else if (requestCode == STORAGE_PERMISSION_CODE) {
            if (grantResults.length &gt; 0
                &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(MainActivity.this, &quot;Storage Permission Granted&quot;, Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(MainActivity.this, &quot;Storage Permission Denied&quot;, Toast.LENGTH_SHORT).show();
            }
        }
    }
}
</code></pre>]]></description>
  </item>
  </channel>
</rss>
