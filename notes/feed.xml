<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AK#Notes</title>
    <link>https://anzenkodo.github.io/notes/</link>
    <description>This my personal website where I post my notes about thing that I have learn.</description>
    <language>en-US</language>
    <lastBuildDate>2023-01-07T16:07:45.623Z</lastBuildDate>
    <image>
      <url>https://anzenkodo.github.io/notes/favicon.png</url>
      <title>AK#Notes</title>
      <link>https://anzenkodo.github.io/notes/</link>
      <width>500</width>
      <height>500</height>
    </image>
    <atom:link href="https://anzenkodo.github.io/notes/feed.xml" rel="self" type="application/rss+xml" />
    <atom:link href="https://anzenkodo.github.io/notes/feed.xml" rel="alternate" type="application/rss+xml" />
      <item>
    <title>Home</title>
    <link>https://anzenkodo.github.io/notes/</link>
    <pubDate>2023-01-07T16:07:45.623Z</pubDate>
    <description><![CDATA[<p>This my personal website where I post my notes about thing that I have learn.</p>
<h2>Features</h2>
<ul>
<li>Easy to:
<ul>
<li>Setup</li>
<li>Configure</li>
<li>Write</li>
</ul>
</li>
<li>Supports:
<ul>
<li>Tags</li>
<li>Search (Power by <a href="https://duckduckgo.com/">DuckDuckGo</a>)</li>
<li>Canonical</li>
<li><a href="https://ogp.me/">Open Graph</a></li>
<li>Analytics</li>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
</ul>
</li>
<li>Auto generate:
<ul>
<li>GitHub Pages Actions file</li>
<li>Favicon</li>
<li>Sitemap</li>
<li>404 page</li>
<li>CSS</li>
<li><code>mainfest.json</code> file</li>
<li>Feeds
<ul>
<li>RSS</li>
<li>JSON</li>
<li>Atom</li>
</ul>
</li>
</ul>
</li>
<li>No Client side JavaScript</li>
<li>Minified HTML &amp; Inline CSS</li>
<li>Lightweight</li>
</ul>
<h2>Getting Started</h2>
<h3>Installing</h3>
<ul>
<li>Download deno from <a href="https://deno.land/">https://deno.land/</a> and install it.</li>
<li>After installing deno run following commands.</li>
</ul>
<pre><code class="language-sh"># Install the dblog
deno run https://deno.land/x/dblog/install.js # Add deno to path, if you didn't already.

# See all the options that are available
dblog --help

# Setup the your blog (Skip this if already your blog setup)
dblog --setup

# Make your blog and Run on localhost
dblog --serve
</code></pre>
<h3>Update</h3>
<p>To update dblog, rerun the installation command.</p>
<pre><code class="language-sh">deno run https://deno.land/x/dblog/install.js
</code></pre>
<h3>Run dblog without installing dblog</h3>
<pre><code class="language-sh">deno run -A https://deno.land/x/dblog/mod.js --help
</code></pre>
<h2>Live Demo &amp; Folder</h2>
<ul>
<li><a href="https://anzenkodo.github.io/dblog">Live Demo</a></li>
<li><a href="https://github.com/AnzenKodo/dblog/tree/gh-pages">Generated Files</a></li>
</ul>
<h2>Configuration</h2>
<p>Place <code>config.json</code> in root folder to edit default configuration. The
<code>config.json</code> is optional.</p>
<p><strong>The <code>config.json</code> with default configuration:</strong></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;dblog&quot;,
  &quot;start_url&quot;: &quot;https://AnzenKodo.github.io/dblog/&quot;,
  &quot;description&quot;: &quot;dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.&quot;,
  &quot;email&quot;: &quot;&quot;,
  &quot;author&quot;: &quot;AnzenKodo&quot;,
  &quot;posts&quot;: &quot;./posts&quot;,
  &quot;output&quot;: &quot;./site&quot;,
  &quot;favicon&quot;: &quot;favicon.svg&quot;,
  &quot;lang&quot;: &quot;en-US&quot;,
  &quot;port&quot;: 8000,
  &quot;background&quot;: &quot;#ffffff&quot;,
  &quot;foreground&quot;: &quot;#000000&quot;,
  &quot;theme&quot;: &quot;#01a252&quot;,
  &quot;footer&quot;: &quot;&lt;p&gt;Made by &lt;a href=\&quot;https://AnzenKodo.github.io/AnzenKodo\&quot;&gt;AnzenKodo&lt;/a&gt; under &lt;a href=\&quot;https://anzenkodo.github.io/dblog/LICENSE\&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;\n&quot;,
  &quot;page404&quot;: &quot;404 Page Not Found, Sorry :(&quot;,
  &quot;backup&quot;: false,
  &quot;exclude&quot;: [
    &quot;config.json&quot;,
    &quot;backup.json&quot;
  ],
  &quot;nav&quot;: {},
  &quot;head&quot;: &quot;&quot;
}
</code></pre>
<p><strong>Note:</strong> Every option is optional.</p>
<ul>
<li><strong>name</strong> - Name of your blog.</li>
<li><strong>start_url</strong> - Start URL of your site. <em>Example:</em> ‘<a href="https://example.com/">https://example.com/</a>’,
‘<a href="https://blog.example.com/">https://blog.example.com/</a>’, ‘<a href="https://example.com/blog/">https://example.com/blog/</a>’</li>
<li><strong>email</strong> - Your email address. This will enable ‘Reply with Email’ button in
posts.</li>
<li><strong>author</strong> - Your name or username.</li>
<li><strong>posts</strong> - Path of posts.</li>
<li><strong>output</strong> - Folder where your blog build will be placed. <em>Example:</em> ‘./blog’,
‘…/site/blog’, ‘site/blog’.</li>
<li><strong>favicon</strong> - <em><strong>Recommended 500x500px</strong></em>. Favicon location. <em>If empty,
generated favicon will be used</em>. <em>Example:</em> ‘./favicon.png’,
‘./static/favicon.icon’, ‘…/favicon.jpg’.</li>
<li><strong>lang</strong> - Blog language in ‘RFC 5646’ format. Example: ‘ja’ for Japanese,
‘sv’ for Swedish, ‘it’ for Italian. See
<a href="https://wikipedia.org/wiki/IETF_language_tag#List_of_common_primary_language_subtags">List of common primary language subtags in Wikipedia</a></li>
<li><strong>footer</strong> - Footer of your website. <em>Supports CommonMark Markdown format</em>.
<em>Example:</em>
<code>Made by [AnzenKodo](https://AnzenKodo.github.io/AnzenKodo) uder [MIT License](https://anzenkodo.github.io/dblog/LICENSE.html)</code>.</li>
<li><strong>port</strong> - Port of your blog on localhost. <em>Example</em>: ‘8080’, ‘8300’, ‘8400’.</li>
<li><strong>background</strong> - Background color in light mode. Becomes foreground color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>foreground</strong> - Foreground color in light mode. Becomes background color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>theme</strong> - Blog theme color. <em>Example:</em> ‘#0583f2’, ‘#f20544’, ‘#f2b705’.</li>
<li><strong>page404</strong> - 404 page message. <em>Example:</em> ‘Sorry, page not found :(’.</li>
<li><strong>backup</strong> - Backup file location. <em>Example:</em> <code>false</code> to don’t generate
<code>backup.json</code> file, ‘./backup.json’, ‘./site/backup.json’, ‘…/backup.json’.</li>
<li><strong>exclude</strong> - Exclude files or folder. <em>Example:</em><pre><code class="language-json">&quot;exclude&quot;: [ &quot;.env&quot;, &quot;todo.md&quot;, &quot;drafts&quot; ],
</code></pre>
</li>
<li><strong>nav</strong> - Nav bar item list. Example:<pre><code class="language-json">&quot;nav&quot;: {
  &quot;about&quot;: &quot;./about.md&quot;,
  &quot;stie&quot;: &quot;https://anzenkodo.github.io/AnzenKodo&quot;
}
</code></pre>
</li>
<li><strong>head</strong> - If you analytics or any other tags you want to put on head tag.
<em>Example:</em>
<code>&lt;link rel=&quot;preconnect&quot; href=&quot;//www.google-analytics.com&quot; crossorigin=&quot;&quot;&gt;</code>.</li>
</ul>
<h2>CLI Options</h2>
<pre><code class="language-sh">dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.

Website: https://anzenkodo.github.io/dblog
Package: https://deno.land/x/dblog
Repo: https://github.com/AnzenKodo/dblog
Docs: https://anzenkodo.github.io/dblog/posts/dblog-Docs.html

USAGE:
  dblog [OPTIONS]

OPTIONS:
  --serve   Build blog and Start localhost.
    --noopen  Don't open browser, when starting localhost.
  --build   Build blog without starting localhost.
  --setup   Setup new blog.
  --backup  Restore blog if 'backup.json' file available.
  --readme  Generate 'README.md' file.
  --help    Print help information.
</code></pre>
<h2>File Options</h2>
<pre><code>---
title: If empty the file name will be used
description: If empty the first paragraph will be used.
tags: [ &quot;tag1&quot;, &quot;tag2&quot; ]
date: 20/08/2020
canonical:
---
</code></pre>
<ul>
<li><strong>date</strong> - If empty, the file date will be used. <em>Note:</em> The file <code>date</code> might
not always right. So always give you own date.</li>
<li><strong>canonical</strong> - Share content between multiple sites without impacting SEO.
Just put canonical URL. Know more about
<a href="https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls">canonical url</a>.</li>
</ul>
<h3>If file name start with underscore “_” it will be consider as draft.</h3>
<p><strong>Example:</strong> <code>posts/_This is draft.md</code></p>
<h2>Markdown Guide</h2>
<h3><a href="https://commonmark.org/help/">CommonMark</a> Syntex</h3>
<h4>Heading</h4>
<pre><code class="language-md"># H1

## H2

### H3

#### H4

##### H5

###### H6
</code></pre>
<h1>H1</h1>
<h2>H2</h2>
<h3>H3</h3>
<h4>H4</h4>
<h5>H5</h5>
<h6>H6</h6>
<h4>Inline style</h4>
<pre><code class="language-md">**Bold** _Italic_ ~~Strikethrough~~
</code></pre>
<p><strong>Bold</strong> <em>Italic</em> <s>Strikethrough</s></p>
<h4>Link and Image</h4>
<pre><code class="language-md">[website](https://anzenkodo.github.io/dblog)
![Jurassic Deno by Samip Poudel](https://deno.land/images/artwork/jurassicDeno.jpg)
</code></pre>
<p><a href="https://anzenkodo.github.io/dblog">website</a>
<img src="https://deno.land/images/artwork/jurassicDeno.jpg" alt="Jurassic Deno by Samip Poudel"></p>
<h4>Blockquote</h4>
<pre><code class="language-md">&gt; 'The road to hell is paved with good intentions' by Abbot Bernard
</code></pre>
<blockquote>
<p>‘The road to hell is paved with good intentions’ by Abbot Bernard</p>
</blockquote>
<h4>List</h4>
<pre><code class="language-md">- List
  - List
- List

1. One
2. Two
3. Three
</code></pre>
<ul>
<li>List
<ul>
<li>List</li>
</ul>
</li>
<li>List</li>
</ul>
<ol>
<li>One</li>
<li>Two</li>
<li>Three</li>
</ol>
<h4>Horizontal rule</h4>
<pre><code class="language-md">---
</code></pre>
<hr>
<h4>Code block</h4>
<div class="highlight highlight-source-lisp notranslate position-relative overflow-auto">
<pre>
`Inline code` with backticks
```js
  console.log("Code Blog in JavaScript");
```
</pre>
</div>
<p><code>Inline code</code> with backticks</p>
<pre><code class="language-js">console.log(&quot;Code Blog in JavaScript&quot;);
</code></pre>
<h3>Additional Markdown syntax</h3>
<h4>Checkbox</h4>
<pre><code class="language-md">- [ ] Checkbox
- [x] Checkbox with tick
</code></pre>
<ul class="task-list">
<li class="task-list-item"><input type="checkbox" id="cbx_0" disabled="true"><label for="cbx_0"> Checkbox</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> Checkbox with tick</label></li>
</ul>
<h4>Image with caption</h4>
<pre><code class="language-md">![Deno](https://deno.land/images/artwork/deno_matrix.png &quot;Matrix by bramaudi&quot;)
</code></pre>
<figure data-type="image"><img src="https://deno.land/images/artwork/deno_matrix.png" alt="Deno" loading="lazy" decoding="async"><figcaption>Matrix by bramaudi</figcaption></figure>
<h4>Footer</h4>
<pre><code class="language-md">Here is a footnote reference[^1]. [^1]: Here is the footnote.
</code></pre>
<p>Here is a footnote reference[^1]. [^1]: Here is the footnote.</p>
<h4>Additional inline syntax</h4>
<pre><code class="language-md">~sub~ ^sup^ ==mark== [[kbd]] _underline_ ++insert++ ~~delete~~
</code></pre>
<p><sub>sub</sub>
<sup>sup</sup>
<mark>mark</mark>
<kbd>kbd</kbd>
<u>underline</u>
<ins>insert</ins>
<del>delete</del></p>
<h4>Description list</h4>
<pre><code class="language-md">: Definition 1 Term 2 with _inline markup_ : Definition 2 Third paragraph of
definition 2.
</code></pre>
<dl>
  <dt>Definition 1</dt>
  <dd>Term 2 with inline.</dd>
  <dt>Definition 2</dt>
  <dd>Third paragraph of definition 2.</dd>
</dl>
<h4>Abbreviation</h4>
<pre><code class="language-md">*[abbr]: Abbreviation
</code></pre>
<p><abbr title="Abbreviation">abbr</abbr></p>
<h4>Table</h4>
<h5>Normal</h5>
<pre><code class="language-md">| Syntax    | Description |
| --------- | ----------- |
| Header    | Title       |
| Paragraph | Text        |
</code></pre>
<table>
<thead>
<tr>
<th>Syntax</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Header</td>
<td>Title</td>
</tr>
<tr>
<td>Paragraph</td>
<td>Text</td>
</tr>
</tbody>
</table>
<h5>Multiline</h5>
<pre><code class="language-md">| Markdown  | Rendered HTML |
| --------- | ------------- |
| _Italic_  | _Italic_      |
|           |               |
| - Item 1  | - Item 1      |
| - Item 2  | - Item 2      |
| ```python | ```python \   |
| .1 + .2   | .1 + .2       |
</code></pre>
<table><thead><tr><th>Markdown</th><th>Rendered HTML</th></tr></thead> <tbody>
  <tr> <td> <pre><code>*Italic* </code></pre> </td> <td> <p><em>Italic</em></p>
  </td> </tr> <tr> <td> <pre><code>- Item 1 - Item 2</code></pre> </td> <td>
  <ul> <li>Item 1</li> <li>Item 2</li> </ul> </td> </tr> <tr> <td>
<pre><code>
```python
.1 + .2
```
</code></pre> </td> <td> <pre><code class="language-python">.1 + .2
  </code></pre> </td> </tr> </tbody> </table>
<h5>Rowspan</h5>
<pre><code class="language-md">|                       Stage | Direct Products | ATP Yields |
| --------------------------: | --------------: | ---------: |
|                  Glycolysis |           2 ATP |            |
|                          ^^ |          2 NADH |   3--5 ATP |
|          Pyruvaye oxidation |          2 NADH |      5 ATP |
|           Citric acid cycle |           2 ATP |            |
|                          ^^ |          6 NADH |     15 ATP |
|                          ^^ |         2 FADH2 |      3 ATP |
|              **30--32** ATP |                 |            |
| [Net ATP yields per hexose] |                 |            |
</code></pre>
<table> <caption id="netatpyieldsperhexose">Net ATP yields per hexose</caption>
  <thead> <tr> <th align="right">Stage</th> <th align="right">Direct
Products</th> <th align="right">ATP Yields</th> </tr> </thead> <tbody> <tr> <td
align="right" rowspan="2">Glycolysis</td> <td align="right" colspan="2">2
ATP</td> </tr> <tr> <td align="right">2 NADH</td> <td align="right">3–5
ATP</td> </tr> <tr> <td align="right">Pyruvaye oxidation</td> <td
align="right">2 NADH</td> <td align="right">5 ATP</td> </tr> <tr> <td
align="right" rowspan="3">Citric acid cycle</td> <td align="right"
colspan="2">2 ATP</td> </tr> <tr> <td align="right">6 NADH</td> <td
align="right">15 ATP</td> </tr> <tr> <td align="right">2 FADH2</td> <td
align="right">3 ATP</td> </tr> <tr> <td align="right"
colspan="3"><strong>30–32</strong> ATP</td> </tr> </tbody> </table>
<h4>Headerless</h4>
<pre><code class="language-md">|--|--|--|--|--|--|--|--| |♜| |♝|♛|♚|♝|♞|♜| | |♟|♟|♟| |♟|♟|♟| |♟| |♞| | | | | |
| |♗| | |♟| | | | | | | | |♙| | | | | | | | | |♘| | | |♙|♙|♙|♙| |♙|♙|♙|
|♖|♘|♗|♕|♔| | |♖|
</code></pre>
<table> <tbody> <tr> <td>♜</td> <td></td> <td>♝</td> <td>♛</td> <td>♚</td>
  <td>♝</td> <td>♞</td> <td>♜</td> </tr> <tr> <td></td> <td>♟</td> <td>♟</td>
  <td>♟</td> <td></td> <td>♟</td> <td>♟</td> <td>♟</td> </tr> <tr> <td>♟</td>
  <td></td> <td>♞</td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr>
  <tr> <td></td> <td>♗</td> <td></td> <td></td> <td>♟</td> <td></td> <td></td>
  <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td>♙</td>
  <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td>
  <td></td> <td></td> <td>♘</td> <td></td> <td></td> </tr> <tr> <td>♙</td>
  <td>♙</td> <td>♙</td> <td>♙</td> <td></td> <td>♙</td> <td>♙</td> <td>♙</td>
  </tr> <tr> <td>♖</td> <td>♘</td> <td>♗</td> <td>♕</td> <td>♔</td> <td></td>
  <td></td> <td>♖</td> </tr> </tbody> </table>]]></description>
  </item>
  <item>
    <title>question bank</title>
    <link>https://anzenkodo.github.io/notes/programming/database/question-bank.html</link>
    <pubDate>2023-01-07T16:07:45.623Z</pubDate>
    <description><![CDATA[<h2>Question bank for 2 Marks.</h2>
<h3>1. Define Entity Set?</h3>
<ul>
<li>An entity set is a collection of similar entites.</li>
<li>An entity is an object or concept in the real world that can be identified and
tracked, such as a person, a place or a thing.</li>
<li>An entity set is a set of entities of the same type that share common
properties.</li>
<li>Example:
<ul>
<li>A “customer” entity set might include all of the customer records in a
customer database, with each record repesenting a single customer. The
entity set would include attributes such as the customer’s name, address,
and phone number, as well as any other relevant information.</li>
</ul>
</li>
<li>Entity sets represent as tables in a database, with each row representing a
single entity and each column representing an attribute of that entity.</li>
</ul>
<h3>2. Define Generalization?</h3>
<h3>3. Define Specialization?</h3>
<h3>4. Explain referential integrity constraints with example?</h3>
<h3>5. Explain Primary key constraint with example?</h3>
<h2>Question bank for 3 Marks.</h2>
<h3>1. Write notes on types of attributes?</h3>
<h3>2. Explain different types of Keys in DBMS?</h3>
<h3>3. List out and explain mapping Cardinalities in ER Diagram?</h3>
<h3>4. Write notes on the following constraints: i) Not NULL ii) Unique</h3>
<h3>5. Write notes on the following</h3>
<h4>1. Left Outer Join</h4>
<h4>2. Right Outer Join</h4>
<h2>Question bank for 5 Marks.</h2>
<h3>1. Construct an ER diagram for a car insurance company that has a set of customers each of whom owns one or more cars, Each car has associated with it zero to any number of recorded accidents?</h3>
<h3>2. Explain Unary operations in relational algebra?</h3>
<h3>3. Explain Set Theory operation in relational algebra?</h3>
<h3>4. Define generalization and specialization hierarchy for a motor vehicle sales company. The Company sells motorcycles, passenger cars, vans and buses. Justify your placement of attributes at each level of hierarchy. Explain why they should not be placed at higher or lower level.</h3>]]></description>
  </item>
  <item>
    <title>keys</title>
    <link>https://anzenkodo.github.io/notes/programming/database/keys.html</link>
    <pubDate>2023-01-07T16:07:45.623Z</pubDate>
    <description><![CDATA[<p>Keys are used to uniquely identify any record or row of data from the table. It
is also used to establish and identify relationships between tables.</p>
<p><strong>Example:</strong> ID is used as a key in the “student” table because it is unique for
each student.</p>
<h2>Primary Key</h2>
<ul>
<li>It is the first key.</li>
<li>Used to identify one and only one instance of an entity uniquely.</li>
</ul>
<h2>Candidate Key</h2>
<ul>
<li>A candidate key is an attribute or set of attributes that can uiquely identify
a tuple.</li>
<li>The candidate keys are as strong as the primary key.</li>
<li>Example: “employee” table, id is best suited for the primary key. The rest of
the attributes like SSN, Passport_Number, License_Number are considered a
candidate key.</li>
</ul>
<h2>Super Key</h2>
<ul>
<li>Super Key is an attribute set that can uniquely identify a tuple.</li>
</ul>]]></description>
  </item>
  <item>
    <title>er diagram</title>
    <link>https://anzenkodo.github.io/notes/programming/database/er-diagram/</link>
    <pubDate>2023-01-07T16:07:45.623Z</pubDate>
    <description><![CDATA[<p>An Entity Relationship Diagram (ERD) is a visual representation of different
data using conventions that describe how these data are related to each other.</p>
<p>Example of ER Diagram:</p>
<figure data-type="image"><img src="./ER.svg" alt="ER Diagram" loading="lazy" decoding="async"></figure>
<p>In the diagram, the elements inside rectangles are called entities while the
items inside diamonds denote the relationships between entities.</p>
<p>In the diagram, the elements inside rectangles are called entities while the
items inside diamonds denote the relationships between entities.</p>
<h2>Features</h2>
<h3>Entity</h3>
<ul>
<li>An entity can be a person, place, event, or object that is relevant to given
system.</li>
<li>For Example, a school system may include student, teacher, major courses,
subject, fees, and other items.</li>
<li>Entites are represented in ER diagrams by a rectangles and named using
singular nouns.</li>
</ul>
<h3>Weak Entity</h3>
<ul>
<li>A weak entity is an entity that depends on teh existence of another entity.</li>
<li>A weak entity is represented in a database by a separated table, but it does
not have a primary key of its own.</li>
<li>It relies on the primary key of the entity on which it depends.</li>
<li>Example:
<ul>
<li>Consider a databse of orders placed by customers at a retail store.
“customer” entity might be the identifying entity, while the “order” entity
is the weak entity. Each order is associated with specific customer, and the
customer’s primary key (e.g. a customer ID) is used as the primary key for
the order as well. This means that the order cannot be uniquely identified
without also specifying the customer to which it belongs.</li>
</ul>
</li>
<li>The single identifying entity can have multiple weak entities associated with
it.</li>
<li>Diagram:<pre><code>+---------+      +--------------+
|         |      |+------------+|
| Orders  |------||Orders Items||
|         |      |+------------+|
+---------+      +--------------+
</code></pre>
</li>
</ul>
<h3>Attribute</h3>
<ul>
<li>An attributes is a characterstic or property of an entity.</li>
<li>Attributes are represented as columns in a database table, with each row
representing a single entity and each column representing an attribute of that
entity.</li>
<li>Example: A “customer” table might include attributes such as “name”,
“address,” and “phone number,” with each attribute storing information about a
perticular customer.</li>
<li>There are two types of attributes:
<ul>
<li>Multivalued Attribute</li>
<li>Derived Attribute</li>
</ul>
</li>
</ul>
<h4>Multivalued Attribute</h4>
<ul>
<li>If an attribute can have more than one value it is called an multivalued
attribute.</li>
<li>It is important to note that this is different to an attribute having it own
attributes.</li>
<li>Example: A “customer” entity can have multiple “phone_numbers” values.</li>
<li>Diagram: <img src="./Multivalued-Attribute.svg" alt="Multivalued Attribute Diagram"></li>
</ul>
<h4>Derived Attribute</h4>
<ul>
<li>An attribute based on another attribute.</li>
<li>Example: “Age” can be derived from “Date of birth”.</li>
<li>Diagram: <img src="./Derived-Attribute.svg" alt="Derived Attribute Diagram"></li>
</ul>
<h3>Relationship</h3>
<ul>
<li>A relationship describes how entities interact.</li>
<li>Example: The entity “carpenter” may be related to the entity “table” by the
relationship “builds” or “makes”.</li>
<li>Relationships are represented by diamond shapes and are labeled using verbs.</li>
</ul>
<h4>Recursive Relationship</h4>
<ul>
<li>The same entity participates more than once in the relationship.</li>
<li>Example: An employee can be a supervisor and be supervised, so there is a
recursive relationship.</li>
</ul>
<h2>Extended Features</h2>
<h3>Generalization</h3>
<ul>
<li>A generalization hierarchy is a form of abstraction that specifies that two or
more entities that share common attributes can be generalized into a
higher-level entity type called a super type or generic entity.</li>
<li>The lower level of entities becomes the subtypes, or categories, to the super
type. Subtypes are dependent entities.</li>
<li>Example: Account is the higher-level entity set and saving account and current
account are lower-level entity sets.</li>
<li>Diagram: <img src="./Generalization.webp" alt="Generalization Diagram"></li>
</ul>
<h3>Specialization</h3>
<ul>
<li>Specialization is the process of taking subsets of the higher-level entity set
to form lower-level entity sets.</li>
<li>It is a process of defining a set of subclasses of an entity type, which is
called the super class of the specialization.</li>
<li>The process of defining subclass is based on the basis of some distinguish
characteristics of the entities in the super class.</li>
<li>Diagram: <img src="./Specialization.webp" alt="Specialization Diagram"></li>
</ul>
<h3>Aggregration</h3>
<ul>
<li>Aggregration is a process when relation between two entities is treated as a
single entity.</li>
<li>Example: The relationship between Center and Course together, is acting as an
Entity, which is in relationship with another entity Visitor.</li>
<li>Diagram: <img src="./Aggregration.webp" alt="Aggregration Diagram"></li>
</ul>
<h2>Resources</h2>
<ul>
<li><a href="https://www.lucidchart.com/pages/er-diagrams">What is an Entity Relationship Diagram (ERD)?</a></li>
<li><a href="https://www.studytonight.com/dbms/generalization-and-specialization.php">The Enhanced ER Model</a></li>
</ul>]]></description>
  </item>
  <item>
    <title>decision tree</title>
    <link>https://anzenkodo.github.io/notes/programming/data-structure/tree/decision-tree.html</link>
    <pubDate>2023-01-07T16:07:45.623Z</pubDate>
    <description><![CDATA[<p>A decision tree is a flowchart-like tree structure that is used to make a
decision or prediction based on multiple conditions. It is a supervised learning
algorithm, which means that it is trained on a labeled dataset, where the
correct output is already known.</p>
<p>The decision tree algorithm works by starting at the root node and asking a
series of questions based on the features of the data. Each question splits the
data into two branches, and the algorithm continues to ask questions and split
the data until it reaches a leaf node, which represents a prediction or
decision.</p>
<p>The goal of the decision tree algorithm is to create a tree that accurately
predicts the target variable based on the features of the data. The accuracy of
the prediction is determined by how well the tree is able to classify the
training data.</p>
<p>Decision trees are often used for classification tasks, such as determining
whether a given email is spam or not, or for regression tasks, such as
predicting the price of a house based on its features. They are also commonly
used in data mining and machine learning applications.</p>]]></description>
  </item>
  <item>
    <title>threaded binary tree</title>
    <link>https://anzenkodo.github.io/notes/programming/data-structure/tree/threaded-binary-tree.html</link>
    <pubDate>2023-01-07T16:07:45.623Z</pubDate>
    <description><![CDATA[<p>A threaded binary tree is a binary tree in which the nodes are threaded, or
connected, in a way that allows them to be traversed efficiently. In a threaded
binary tree, each node has a left and right pointer, just like in a regular
binary tree. However, if the left or right pointer of a node is null, it is
replaced with a thread that points to the in-order predecessor or successor of
the node, respectively. This allows the tree to be traversed in-order without
the need to follow a null pointer and backtrack, making the traversal more
efficient.</p>
<p>Threaded binary trees have several advantages over regular binary trees. They
use less memory, as the threads take up less space than full pointers. They also
allow for faster in-order traversal, as there is no need to follow null pointers
and backtrack. However, they are more difficult to modify than regular binary
trees, as the threads must be updated whenever the tree is modified.</p>
<p>Overall, threaded binary trees are a useful data structure for certain types of
tree traversal, but they may not be the best choice for all applications.</p>
<h2>Resources</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=1E95XJd5bS0">Threaded binary tree | data structure</a></li>
</ul>]]></description>
  </item>
  <item>
    <title>singly linked list</title>
    <link>https://anzenkodo.github.io/notes/programming/data-structure/linked-list/singly-linked-list.html</link>
    <pubDate>2023-01-07T16:07:45.623Z</pubDate>
    <description><![CDATA[<p>A singly linked list is a linear data structure that consists of a sequence of
nodes, where each node stores a value and a pointer to the next node in the
list. The first node in the list is called the head, and the last node in the
list is called the tail. The tail node typically has a NULL next pointer to
indicate the end of the list.</p>
<p>Singly linked lists are useful for storing and manipulating sequences of data,
as they allow for efficient insertion and deletion of elements at any position
in the list. However, they do not allow for efficient access to elements at
arbitrary positions, as you have to traverse the list from the beginning to
access elements further down the list.</p>
<p>For example, to access the third element in a singly linked list with four
nodes, you would have to start at the head of the list and follow the next
pointers twice to reach the third node. This requires you to traverse the list
from the beginning, which can be inefficient if the list is large and you need
to access elements towards the end of the list.</p>
<p>In contrast, data structures like arrays or random-access lists allow for
efficient access to elements at arbitrary positions, as you can directly access
any element by its index. However, they may not be as efficient for inserting or
deleting elements at specific positions, as this may require shifting elements
around in the data structure.</p>
<p>Singly linked lists are efficient for inserting or deleting elements at specific
positions because they only require a single pointer per node, which makes it
easy to update the next pointers of the nodes around the insertion or deletion
point. Example:</p>
<ol>
<li>Create a new node with the desired value.</li>
<li>Set the next pointer of the new node to point to the current fourth node in
the list.</li>
<li>Set the next pointer of the second node in the list to point to the new node.</li>
</ol>
<h2>Example:</h2>
<pre><code>  head                                      tail
+------+    +------+    +------+    +------+
| data |    | data |    | data |    | data |
+------+    +------+    +------+    +------+
| next |---&gt;| next |---&gt;| next |---&gt;| next |---&gt; NULL
+------+    +------+    +------+    +------+
</code></pre>
<h2>Algorithm to insert new nodes at the beginning of singly Linked list</h2>
<ol>
<li><strong>Declare a head pointer and make it as NULL:</strong> The head pointer is a pointer
that points to the first node in the list. By initializing it to NULL, you
create an empty list with no nodes.</li>
<li><strong>Create a new node with the given data:</strong> To insert a new node at the
beginning of the list, you first need to create a new node with the desired
data. This can be done using a function that allocates memory for the new
node and sets its data field to the given value.</li>
<li><strong>Make the new node points to the head node:</strong> After creating the new node,
you need to update its next pointer to point to the current head node. This
will make the new node the first node in the list, with the head node as the
second node.</li>
<li><strong>Finally, make the new node as the head node:</strong> To complete the insertion,
you need to update the head pointer to point to the new node. This will make
the new node the first node in the list and the head of the list.</li>
</ol>
<h2>Resources</h2>
<ol>
<li><a href="https://youtu.be/HB7TcYklBHY">Singly Linked Lists Tutorial - What is a Linked List?</a></li>
</ol>]]></description>
  </item>
  <item>
    <title>MGT</title>
    <link>https://anzenkodo.github.io/notes/study/mgt.html</link>
    <pubDate>2023-01-07T16:07:45.623Z</pubDate>
    <description><![CDATA[<h1>MGT</h1>
<ol>
<li>Who said “Management is the function of executive leadership anywhere”:</li>
</ol>
<ul>
<li>a) Ralph C. Devis</li>
</ul>
<ol start="2">
<li>Universal, goal oriented, multidimensional, continuous process are some
characteristics of:</li>
</ol>
<ul>
<li>a) Management</li>
</ul>
<ol start="3">
<li>Optimum utilization of resources can be ensured by:</li>
</ol>
<ul>
<li>c) Management</li>
</ul>
<ol start="4">
<li>Motivating the people and building the team spirit to improve the life
standard of worker is possible due to:</li>
</ol>
<ul>
<li>b) Management</li>
</ul>
<ol start="5">
<li><strong>Management</strong> is the art of getting work done through people</li>
<li>Management is a creative and <strong>Continuous</strong> process.</li>
<li>Management is _______</li>
</ol>
<ul>
<li>
<ol>
<li>Art of getting things done through people</li>
</ol>
</li>
<li>
<ol start="2">
<li>Art of knowing what you want to do in best and cheaper way.</li>
</ol>
<ul>
<li><strong>a) 1&amp;2</strong></li>
</ul>
</li>
</ul>
<ol start="8">
<li><strong>Administration</strong> concerned with decision making, policy making.</li>
<li>The difference between administration and management is that:</li>
</ol>
<ul>
<li>a) Administration is largely determinative while management is essentially
executive.</li>
</ul>
<ol start="10">
<li>A tool manufacturing firm want to improve its performance from good to best
suggest the steps they should follow:</li>
</ol>
<ul>
<li>a) 1. Optimum utilisation of resources and reduce wastage. 2. Building team
spirit to achieve goal.</li>
</ul>
<ol start="11">
<li></li>
</ol>]]></description>
  </item>
  <item>
    <title>Grammmar</title>
    <link>https://anzenkodo.github.io/notes/study/grammmar.html</link>
    <pubDate>2023-01-07T16:07:45.623Z</pubDate>
    <description><![CDATA[<h1>Grammar in English</h1>
<h2>Part of Speech</h2>
<p>Words are divided into different kinds of classes called <strong>Parts of Speech</strong>.
The parts of speech are eight in number:</p>
<ol>
<li><a href="#noun">Noun</a></li>
<li><a href="#adjective">Adjective</a></li>
<li><a href="#pronoun">Pronoun</a></li>
<li><a href="#verb">Verb</a></li>
<li><a href="#adverb">Adverb</a></li>
<li><a href="#preposition">Preposition</a></li>
<li><a href="#conjunction">Conjunction</a></li>
<li><a href="#interjection">Interjection</a></li>
<li><a href="#determiners">Determiners</a> (In some modern grammars)</li>
</ol>
<h3>Noun</h3>
<p>A <strong>Noun</strong> is a word used as the name of the person, place, or things as,</p>
<ol>
<li>That <em>Mountain</em> look so beautiful from here.</li>
<li>That <em>tree</em> was so small when we came last year.</li>
<li>I don’t like <em>rain</em>.</li>
</ol>
<p><em><strong>Note</strong></em>
The word <em>Things</em> includes:</p>
<ol>
<li>All the objects that we can see, hear, taste, touch, or smell.</li>
<li>Something that we can <em>think of</em>, but can’t perceive by the senses.</li>
</ol>
<h3>Adjective</h3>
<p>An <strong>Adjective</strong> is a word used to add something to the meaning of a noun; as,</p>
<ol>
<li>He is <em>playing game</em>.</li>
<li>She look <strong>beautiful</strong> tonight.</li>
<li>Sun <strong>set early</strong> today.</li>
</ol>
<h3>Pronoun</h3>
<p>A <strong>Pronoun</strong> is a word used instead of noun; as,</p>
<ol>
<li>He is was playing football, but <em>he’s</em> broke his leg.</li>
<li>The books are where you left <em>them</em>.</li>
</ol>
<h3>Verb</h3>
<p>A <strong>Verb</strong> is a word used to express an action or state; as,</p>
<ol>
<li>He is <em>sleeping</em>.</li>
<li>That boy is very <em>playful</em>.</li>
<li>India is a very <em>diverse</em> country.</li>
</ol>
<h3>Adverb</h3>
<p>An <strong>Adverb</strong> is a word used to <em>add something</em> to the meaning of the verb, an
adjective, or another adverb; as,</p>
<ol>
<li>He is working <em>very</em> hard today.</li>
<li>That horse is running <em>so</em> fast today.</li>
<li>New York look <em>so</em> beautiful in the night.</li>
</ol>
<h3>Preposition</h3>
<p>A <strong>Preposition</strong> is a word used with a noun or pronoun to show how the person
or thing denoted by the noun or pronoun stands in relation to something else; as</p>
<ol>
<li><em>Before</em> the dog got the hat.</li>
<li>The Ice cream is <em>under</em> the fridge.</li>
<li>He is <em>going</em> to Goa trip.</li>
</ol>
<h3>Conjunction</h3>
<p>A <strong>Conjunction</strong> is a word used to <em>join</em> words or sentences; as,</p>
<ol>
<li>He <em>and</em> she are cousins.</li>
<li>Three <em>and</em> two make five.</li>
<li>Happy <em>but</em> sad inside.</li>
</ol>
<p>Conjunction have <strong>FANBOYS</strong> a which to remember coordinating conjunctions:</p>
<ul>
<li><strong>For</strong> - since, because
<ul>
<li>I don’t eat buttons <em>for</em> they are not food.</li>
</ul>
</li>
<li><strong>And</strong> - combines things
<ul>
<li>The kangaroo robbed the band <em>and</em> torched the saloon.</li>
</ul>
</li>
<li><strong>Nor</strong> - combines untrue things
<ul>
<li>She won’t leave her tree <em>nor</em> will she speak with humans.</li>
</ul>
</li>
<li><strong>But</strong> - express exceptions
<ul>
<li>We used every building material <em>but</em> chewing gum.</li>
</ul>
</li>
<li><strong>Or</strong> - choosing between options
<ul>
<li>Would you rather have pet bear <em>or</em> a pet giraffe?</li>
</ul>
</li>
<li><strong>Yet</strong> - to the contrary
<ul>
<li>I want to leave, <em>yet</em> I cannot.</li>
</ul>
</li>
<li><strong>So</strong> - shows consequences
<ul>
<li>He is allergic to sheep, <em>so</em> he skipped the wool festival.</li>
</ul>
</li>
</ul>
<h3>Interjection</h3>
<p>An <strong>Interjection</strong> is a word which expresses some sudden feeling; as,</p>
<ol>
<li><em>Oh my god</em> ! What have you done.</li>
<li><em>What</em> ! She is dead.</li>
<li>Hurrah ! We have won the game.</li>
</ol>
<h3>Determiners</h3>
<p><strong>Determiners</strong> are words that comes at the beginning of the noun, introduces
noun, determines noun that is whether none is specific or general.
There’s are divided into four types which are:</p>
<h4>Articles</h4>
<ul>
<li><strong>Indefinite articles</strong> - <em>a, an</em> - general version of noun
<ul>
<li><em>A</em> book is man’s best friend</li>
</ul>
</li>
<li><strong>Definite articles</strong> - <em>the</em> - specific version of noun
<ul>
<li><em>The</em> city Mumbai was called Bombay.</li>
</ul>
</li>
</ul>
<h4>Demonstratives</h4>
<blockquote>
<p><em>this, that, these, those</em></p>
</blockquote>
<ul>
<li><strong>Demonstratives</strong> pronouns are also used as determiners. They are used to
point something specific within a sentence. They focus attention on the nouns
that they are replacing.
<ul>
<li>I want go to <em>that</em> movie.</li>
<li>He wanted <em>those</em> boys to go away.</li>
</ul>
</li>
</ul>
<h4>Possessives</h4>
<blockquote>
<p><em>my, your, his, her, your their</em></p>
</blockquote>
<ul>
<li><strong>Possessive</strong> pronouns are words that are used to show ownership.
<ul>
<li>Where is <em>your</em> bike?</li>
<li>It’s <em>our</em> secret recipe.</li>
</ul>
</li>
</ul>
<h4>Quantifiers</h4>
<blockquote>
<p><em>some, few little many, much, any</em></p>
</blockquote>
<ul>
<li>They indicate how much or how little of the noun is being discussed.
<ul>
<li>He took <em>some</em> books of mine.</li>
<li>He has few apples in the refrigerator.</li>
</ul>
</li>
</ul>]]></description>
  </item>
  <item>
    <title>Computer Paradigms</title>
    <link>https://anzenkodo.github.io/notes/programming/computer-paradigms.html</link>
    <pubDate>2023-01-07T16:07:45.619Z</pubDate>
    <description><![CDATA[<h2>1. Explain the difference between declarative and imperative programming paradigm.</h2>
<h3>Imperative Programing</h3>
<p>Imperative programming consists of sets of detailed instructions that are given
to the computer to execute in a given order. It’s called “imperative” because as
programmers we dictate exactly what the computer has to do, in a very specific
way.</p>
<pre><code class="language-js">const nums = [1, 4, 3, 6, 7, 8, 9, 2];
const result = [];

for (let i = 0; i &lt; nums.length; i++) {
  if (nums[i] &gt; 5) result.push(nums[i]);
}

console.log(result); // Output: [ 6, 7, 8, 9 ]
</code></pre>
<h3>Declarative Programming</h3>
<p>Declarative programming is all about hiding away complexity and bringing
programming languages closer to human language and thinking. It’s the direct
opposite of imperative programming in the sense that the programmer doesn’t give
instructions about how the computer should execute the task, but rather on what
result is needed.</p>
<pre><code class="language-js">const nums = [1, 4, 3, 6, 7, 8, 9, 2];

console.log(nums.filter((num) =&gt; num &gt; 5)); // Output: [ 6, 7, 8, 9 ]
</code></pre>
<h2>2. Explain</h2>
<p>Reference: <a href="https://youtu.be/fnZjrNfQVdo">https://youtu.be/fnZjrNfQVdo</a></p>
<h3>Names</h3>
<p>Identifiers that allow us to refer to variables, constants, functions, types,
operations, and so on.</p>
<h3>Bindings</h3>
<p>An association of a name with an object</p>
<h3>Scopes</h3>
<p>The lifetime of a binding of a name to an object</p>
<p><strong>Example:</strong></p>
<pre><code class="language-js">function x() {
  let y = &quot;Hello World&quot;; // Y is only avaiable inside x() scope
  return y;
}
console.log(x());
// &quot;Hello World&quot;
</code></pre>
<h4>Static Scope</h4>
<p>Scope of a variable determined at compile time.</p>
<h4>Dynamic Scope</h4>
<p>Scope of variable determined at runtime.</p>
<h2>3. Explain different storage allocation mechanisms.</h2>
<p>Reference:
<a href="https://www.youtube.com/watch?v=nZG0bQYHB9U">Storage allocation | Static, Stack&amp; Heap | Compiler Design | Lec- 49</a></p>
<p>There are three types:</p>
<ol>
<li>Static stroage allocation</li>
<li>Stack storage allocation</li>
<li>Heap storage allocation</li>
</ol>
<h3>1. Static stroage allocation</h3>
<ul>
<li>In static allocation, names are bond to <strong>storage locations</strong>.</li>
<li>If memory is created at compile time then the memory will be creted in static
area adn only once.</li>
<li>Static allocation supports the <strong>dynamic data structure</strong> that means, memory
is created only at comple time and deallocated after program completion.</li>
<li>The drawback with static storage allocation is that the size and position of
data objects should be know at compile time.</li>
<li>Another drawback is restriction of the recursion proccess.</li>
<li>Example in JavaScript:<pre><code class="language-js">// Declare a variable with the &quot;const&quot; keyword
const x = 10;

// Access the value of the variable
console.log(x); // Output: 10

// Attempt to reassign the value of the variable
x = 20;

// This will throw an error because the value of a const variable cannot be changed
</code></pre>
</li>
</ul>
<h3>2. Stack storage allocation</h3>
<ul>
<li>In this storage is organized as a <strong>stack</strong>(LIFO).</li>
<li>Activation records are pushed and popped.</li>
<li>Activation record contains the locals so that they are bound to fresh storage
in each activation record.</li>
<li>The value of local is deleted when the activation ends.</li>
<li>It works on the basis of <strong>LIFO</strong> and this allocation supports the recursion
process.</li>
<li>Example in JavaScript:<pre><code class="language-js">function foo(x) {
  // Declare a local variable y
  let y = x + 1;

  // Access the value of the local variable
  console.log(y); // Output: x + 1

  // Reassign the value of the local variable
  y = x + 2;

  // The value of the local variable can be changed
  console.log(y); // Output: x + 2
}

// Call the function with an argument
foo(10);
</code></pre>
</li>
</ul>
<h3>3. Heap storage allocation</h3>
<ul>
<li>It is the most flexible allocation scheme.</li>
<li>It is flexible because it is dynamica nature.</li>
<li>Allocation and deallocation of memory can be done at any time and at any place
depending upon the users requirement.</li>
<li>Advantage of Heap allocation is used to allocate memory to the variables
dynamically and when the variables are no more used then claim it back.</li>
<li>Heap storage allocation supports teh recursion process.</li>
<li>Example in JavaScript:<pre><code class="language-js">// Create a new object using the object literal notation
let obj = {};

// Add a property to the object
obj.name = &quot;John&quot;;

// Access the value of the property
console.log(obj.name); // Output: &quot;John&quot;

// Reassign the value of the property
obj.name = &quot;Jane&quot;;

// The value of the property can be changed
console.log(obj.name); // Output: &quot;Jane&quot;
</code></pre>
</li>
</ul>
<h2>4. What is Lambda Calculus? Explain Free variable and Bound variable.</h2>
<p>Lambda calculus is a formal system that is used to define and study functions
and their properties. It consists of three main elements: variables, functions,
and application.</p>
<ul>
<li><strong>Variables</strong> are symbols that represent values. In lambda calculus, variables
are denoted by a single lowercase letter, such as x or y.</li>
<li><strong>Functions</strong> are expressions that take one or more arguments and return a
result. In lambda calculus, functions are denoted by the Greek letter “lambda”
(λ), followed by a list of variables (the function’s arguments), and a body
expression (the function’s result). For example, the function f(x, y) = x + y
could be written as λx.λy.x + y in lambda calculus.</li>
<li><strong>Application</strong> is the process of applying a function to its arguments. In
lambda calculus, application is denoted by placing the function expression and
its arguments within parentheses, separated by spaces. For example, the
application f(x, y) could be written as (f x y) in lambda calculus.</li>
</ul>
<h3>Free variable</h3>
<p>In lambda calculus, a free variable is a variable that is not bound to any
particular value or function. It can be used freely within an expression, and
its value is not determined until the expression is evaluated.</p>
<p>Example:</p>
<pre><code class="language-lambda">(λx.x + y) 2
</code></pre>
<h3>Bound variable.</h3>
<p>A bound variable, on the other hand, is a variable that is bound to a particular
value or function within an expression. It cannot be used freely, and its value
is determined by the binding.</p>
<p>Example:</p>
<pre><code class="language-lambda">(λx.x + y) (λy.y * 2)
</code></pre>
<h2>5. Different between</h2>
<h3>Functional Programming</h3>
<ul>
<li>Functional programming is the form of programming that attempts to avoid
changing state and mutable data.</li>
<li>In a functional program, the output of a function should always be the same,
given the same exact inputs to the function.</li>
<li>This is because the outputs of a function in functional programming purely
relies on arguments of the function, and there is no magic that is happening
behind the scenes.</li>
<li>It works particularly well when there are no boundaries required, or those
boundaries are already predefined.</li>
<li>Functional programming provides the advantages like efficiency, lazy
evaluation, nested functions, bug-free code, parallel programming.</li>
<li>Each small function does its part and only its part.</li>
<li>The function can be easily invoked and reused at any point. It also helps the
code to be managed and the same thing or statements does not need to be
written again and again.</li>
<li>Example: if you call function getSum() it calculates the sum of two inputs and
returns the sum. Given the same inputs for x and y, we will always get the
same output for sum.</li>
</ul>
<h3>Object Oriented Programming(OOP).</h3>
<ul>
<li>Object oriented programming is a programming paradigm in which you program
using objects to represent things you are programming about (sometimes real
world things).</li>
<li>The objects hold data about them in attributes.</li>
<li>The attributes in the objects are manipulated through methods or functions
that are given to the object.</li>
<li>Example:
<ul>
<li>We might have a Person object that represents all of the data a person would
have: weight, height, skin color, hair color, hair length, and so on.</li>
<li>Those would be the attributes.</li>
<li>Then the person object would also have things that it can do such as: pick
box up, put box down, eat, sleep, etc.</li>
<li>These would be the functions that play with the data the object stores.</li>
</ul>
</li>
<li>The main deal with OOP is the ability to encapsulate data from outsiders.
Encapsulation is the ability to hide variables within the class from outside
access — which makes it great for security reasons, along with leaky, unwanted
or accidental usage.</li>
</ul>
<h2>6. What is higher order function?</h2>
<p>Higher-order functions are functions that either accept other functions as
arguments, or return a function as a result.</p>
<p>The result of one higher-order function can be used as the input to another
higher-order function. Any time we pass a lambda expression to a method, that
method is a higher-order function.</p>
<p>A higher order function (HOF) is a function that follows at least one of the
following conditions −</p>
<ul>
<li>Takes on or more functions as argument</li>
<li>Returns a function as its result</li>
</ul>
<h3>Example:</h3>
<pre><code class="language-js">function add(x) {
  return function (y) {
    return x + y;
  };
}

const addTwo = add(2);
console.log(addTwo(3)); // Output: 5
console.log(addTwo(4)); // Output: 6
</code></pre>
<p>The add function is a higher-order function because it takes a function as an
argument (in this case, the anonymous function that returns x + y) and returns a
function as a result (the addTwo function). The addTwo function is a closure,
which is a function that references variables from its outer scope. In this
case, the addTwo function closes over the variable x, which is set to 2. When
the addTwo function is called with an argument, it adds that argument to the
value of x and returns the result.</p>
<p>Higher-order functions are a powerful tool in functional programming, and are
widely used in many programming languages. They allow you to create flexible,
reusable code, and can make your programs more expressive and easier to
understand.</p>
<h2>7. Difference between</h2>
<h3>Normal Evaluation</h3>
<p>Normal order evaluation, also known as call-by-name, is a evaluation strategy
that evaluates the arguments to a function before the function itself. This
means that the arguments are evaluated every time they are used within the
function, rather than being evaluated once before the function is called.</p>
<p>Example in Python:</p>
<pre><code class="language-python">from functools import partial

def foo(x, y):
  print(&quot;x =&quot;, x)
  print(&quot;y =&quot;, y)
  return x + y

def bar(x):
  print(&quot;x =&quot;, x)
  return x * 2

lazy_bar = partial(bar, eval=lambda: bar(1))

print(foo(lazy_bar(), lazy_bar()))  # Output: x = 1, x = 1, y = 2, 3
</code></pre>
<h3>Application order evaluation</h3>
<p>Application order evaluation, also known as call-by-value, is a evaluation
strategy that evaluates the function before the arguments. This means that the
arguments are evaluated once before the function is called, and the resulting
values are passed to the function as inputs.</p>
<p>Example in Python:</p>
<pre><code class="language-python">def foo(x, y):
  print(&quot;x =&quot;, x)
  print(&quot;y =&quot;, y)
  return x + y

def bar(x):
  print(&quot;x =&quot;, x)
  return x * 2

print(foo(bar(1), bar(2)))  # Output: x = 1, x = 2, x = 2, y = 4, 6
print(foo(bar(2), bar(1)))  # Output: x = 2, x = 1, x = 1, y = 2, 4
</code></pre>
<h2>8. What is paradigm and programming paradigm?</h2>
<p>Programming paradigms are different ways or styles in which a given program or
programming language can be organized. Each paradigm consists of certain
structures, features, and opinions about how common programming problems should
be tackled.</p>
<p>There are several types of programming paradigms, including:</p>
<ol>
<li>Imperative</li>
<li>Functional</li>
<li>Object-oriented</li>
<li>Logic</li>
<li>Event-driven</li>
<li>Procedural</li>
<li>Aspect-oriented</li>
</ol>
<h3>Imperative Programing</h3>
<p>Imperative programming consists of sets of detailed instructions that are given
to the computer to execute in a given order. It’s called “imperative” because as
programmers we dictate exactly what the computer has to do, in a very specific
way.</p>
<pre><code class="language-js">const nums = [1, 4, 3, 6, 7, 8, 9, 2];
const result = [];

for (let i = 0; i &lt; nums.length; i++) {
  if (nums[i] &gt; 5) result.push(nums[i]);
}

console.log(result); // Output: [ 6, 7, 8, 9 ]
</code></pre>
<h3>Declarative Programming</h3>
<p>Declarative programming is all about hiding away complexity and bringing
programming languages closer to human language and thinking. It’s the direct
opposite of imperative programming in the sense that the programmer doesn’t give
instructions about how the computer should execute the task, but rather on what
result is needed.</p>
<pre><code class="language-js">const nums = [1, 4, 3, 6, 7, 8, 9, 2];

console.log(nums.filter((num) =&gt; num &gt; 5)); // Output: [ 6, 7, 8, 9 ]
</code></pre>
<h3>Functional Programing</h3>
<p>Functional programming takes the concept of functions a little bit further.</p>
<p>In functional programming, functions are treated as first-class citizens,
meaning that they can be assigned to variables, passed as arguments, and
returned from other functions.</p>
<p>A pure function is one that relies only on its inputs to generate its result.
And given the same input, it will always produce the same result.</p>
<pre><code class="language-js">const nums = [1, 4, 3, 6, 7, 8, 9, 2];

function filterNums() {
  const result = []; // Internal variable

  for (let i = 0; i &lt; nums.length; i++) {
    if (nums[i] &gt; 5) result.push(nums[i]);
  }

  return result;
}

console.log(filterNums()); // Output: [ 6, 7, 8, 9 ]
</code></pre>
<h3>Object-oriented Programing</h3>
<p>The core concept of OOP is to separate concerns into entities which are coded as
objects. Each entity will group a given set of information (properties) and
actions (methods) that can be performed by the entity.</p>
<h2>9. What is calling sequence?</h2>
<p>The code sequence required to effect transfer of control to a subroutine or
procedure, including parameter passing and the recording of the return address.
Uniformity of calling sequences is vital if it is required to call procedures
written in a different language from the calling program.</p>
<h2>10. What is parameter passing?</h2>
<ul>
<li>Reference: <a href="https://youtu.be/fnZjrNfQVdo">Parameter Passing – Real Python</a></li>
<li>A function is a self-contained block of code that encapsulates a specific task
or related group of tasks.</li>
<li>An argument(s) is a value(s) provided to a function to customize its behavior
from one call to the next.</li>
<li>A parameter (or parameter variable) is a variable in the function definition
to store an argument.</li>
</ul>
<h3>Example</h3>
<ul>
<li>
<p>To pass an argument to a function is to provide that argument’s value to the
appropriate parameter variable.</p>
<pre><code class="language-python">def square(num):
  return num * num

val = 4
print(square(val))
# 16
</code></pre>
<p>The argument <code>4</code> is passed to the function <code>square</code></p>
<ul>
<li><code>num</code> is given the vale <code>4</code> since that was the value of <code>val</code> when <code>square</code>
was called.</li>
</ul>
</li>
<li>
<p>Never wolud we consider modifyin the value of <code>num</code> in this function.</p>
</li>
</ul>]]></description>
  </item>
  </channel>
</rss>
