<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AK#Notes</title>
    <link>https://anzenkodo.github.io/notes/</link>
    <description>This my personal website where I post my notes about thing that I have learn.</description>
    <language>en-US</language>
    <lastBuildDate>2022-12-16T15:08:01.802Z</lastBuildDate>
    <image>
      <url>https://anzenkodo.github.io/notes/favicon.png</url>
      <title>AK#Notes</title>
      <link>https://anzenkodo.github.io/notes/</link>
      <width>500</width>
      <height>500</height>
    </image>
    <atom:link href="https://anzenkodo.github.io/notes/feed.xml" rel="self" type="application/rss+xml" />
    <atom:link href="https://anzenkodo.github.io/notes/feed.xml" rel="alternate" type="application/rss+xml" />
      <item>
    <title>Home</title>
    <link>https://anzenkodo.github.io/notes/</link>
    <pubDate>2022-12-16T15:08:01.802Z</pubDate>
    <description><![CDATA[<p>This my personal website where I post my notes about thing that I have learn.</p>
<h2>Features</h2>
<ul>
<li>Easy to:
<ul>
<li>Setup</li>
<li>Configure</li>
<li>Write</li>
</ul>
</li>
<li>Supports:
<ul>
<li>Tags</li>
<li>Search (Power by <a href="https://duckduckgo.com/">DuckDuckGo</a>)</li>
<li>Canonical</li>
<li><a href="https://ogp.me/">Open Graph</a></li>
<li>Analytics</li>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
</ul>
</li>
<li>Auto generate:
<ul>
<li>GitHub Pages Actions file</li>
<li>Favicon</li>
<li>Sitemap</li>
<li>404 page</li>
<li>CSS</li>
<li><code>mainfest.json</code> file</li>
<li>Feeds
<ul>
<li>RSS</li>
<li>JSON</li>
<li>Atom</li>
</ul>
</li>
</ul>
</li>
<li>No Client side JavaScript</li>
<li>Minified HTML &amp; Inline CSS</li>
<li>Lightweight</li>
</ul>
<h2>Getting Started</h2>
<h3>Installing</h3>
<ul>
<li>Download deno from <a href="https://deno.land/">https://deno.land/</a> and install it.</li>
<li>After installing deno run following commands.</li>
</ul>
<pre><code class="language-sh"># Install the dblog
deno run https://deno.land/x/dblog/install.js # Add deno to path, if you didn't already.

# See all the options that are available
dblog --help

# Setup the your blog (Skip this if already your blog setup)
dblog --setup

# Make your blog and Run on localhost
dblog --serve
</code></pre>
<h3>Update</h3>
<p>To update dblog, rerun the installation command.</p>
<pre><code class="language-sh">deno run https://deno.land/x/dblog/install.js
</code></pre>
<h3>Run dblog without installing dblog</h3>
<pre><code class="language-sh">deno run -A https://deno.land/x/dblog/mod.js --help
</code></pre>
<h2>Live Demo &amp; Folder</h2>
<ul>
<li><a href="https://anzenkodo.github.io/dblog">Live Demo</a></li>
<li><a href="https://github.com/AnzenKodo/dblog/tree/gh-pages">Generated Files</a></li>
</ul>
<h2>Configuration</h2>
<p>Place <code>config.json</code> in root folder to edit default configuration. The
<code>config.json</code> is optional.</p>
<p><strong>The <code>config.json</code> with default configuration:</strong></p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;dblog&quot;,
  &quot;start_url&quot;: &quot;https://AnzenKodo.github.io/dblog/&quot;,
  &quot;description&quot;: &quot;dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.&quot;,
  &quot;email&quot;: &quot;&quot;,
  &quot;author&quot;: &quot;AnzenKodo&quot;,
  &quot;posts&quot;: &quot;./posts&quot;,
  &quot;output&quot;: &quot;./site&quot;,
  &quot;favicon&quot;: &quot;favicon.svg&quot;,
  &quot;lang&quot;: &quot;en-US&quot;,
  &quot;port&quot;: 8000,
  &quot;background&quot;: &quot;#ffffff&quot;,
  &quot;foreground&quot;: &quot;#000000&quot;,
  &quot;theme&quot;: &quot;#01a252&quot;,
  &quot;footer&quot;: &quot;&lt;p&gt;Made by &lt;a href=\&quot;https://AnzenKodo.github.io/AnzenKodo\&quot;&gt;AnzenKodo&lt;/a&gt; under &lt;a href=\&quot;https://anzenkodo.github.io/dblog/LICENSE\&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;\n&quot;,
  &quot;page404&quot;: &quot;404 Page Not Found, Sorry :(&quot;,
  &quot;backup&quot;: false,
  &quot;exclude&quot;: [
    &quot;config.json&quot;,
    &quot;backup.json&quot;
  ],
  &quot;nav&quot;: {},
  &quot;head&quot;: &quot;&quot;
}
</code></pre>
<p><strong>Note:</strong> Every option is optional.</p>
<ul>
<li><strong>name</strong> - Name of your blog.</li>
<li><strong>start_url</strong> - Start URL of your site. <em>Example:</em> ‘<a href="https://example.com/">https://example.com/</a>’,
‘<a href="https://blog.example.com/">https://blog.example.com/</a>’, ‘<a href="https://example.com/blog/">https://example.com/blog/</a>’</li>
<li><strong>email</strong> - Your email address. This will enable ‘Reply with Email’ button in
posts.</li>
<li><strong>author</strong> - Your name or username.</li>
<li><strong>posts</strong> - Path of posts.</li>
<li><strong>output</strong> - Folder where your blog build will be placed. <em>Example:</em> ‘./blog’,
‘…/site/blog’, ‘site/blog’.</li>
<li><strong>favicon</strong> - <em><strong>Recommended 500x500px</strong></em>. Favicon location. <em>If empty,
generated favicon will be used</em>. <em>Example:</em> ‘./favicon.png’,
‘./static/favicon.icon’, ‘…/favicon.jpg’.</li>
<li><strong>lang</strong> - Blog language in ‘RFC 5646’ format. Example: ‘ja’ for Japanese,
‘sv’ for Swedish, ‘it’ for Italian. See
<a href="https://wikipedia.org/wiki/IETF_language_tag#List_of_common_primary_language_subtags">List of common primary language subtags in Wikipedia</a></li>
<li><strong>footer</strong> - Footer of your website. <em>Supports CommonMark Markdown format</em>.
<em>Example:</em>
<code>Made by [AnzenKodo](https://AnzenKodo.github.io/AnzenKodo) uder [MIT License](https://anzenkodo.github.io/dblog/LICENSE.html)</code>.</li>
<li><strong>port</strong> - Port of your blog on localhost. <em>Example</em>: ‘8080’, ‘8300’, ‘8400’.</li>
<li><strong>background</strong> - Background color in light mode. Becomes foreground color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>foreground</strong> - Foreground color in light mode. Becomes background color in
light mode. <em>Example:</em> ‘#000000’, &quot;#ffffff’, ‘##FEFBFE’.</li>
<li><strong>theme</strong> - Blog theme color. <em>Example:</em> ‘#0583f2’, ‘#f20544’, ‘#f2b705’.</li>
<li><strong>page404</strong> - 404 page message. <em>Example:</em> ‘Sorry, page not found :(’.</li>
<li><strong>backup</strong> - Backup file location. <em>Example:</em> <code>false</code> to don’t generate
<code>backup.json</code> file, ‘./backup.json’, ‘./site/backup.json’, ‘…/backup.json’.</li>
<li><strong>exclude</strong> - Exclude files or folder. <em>Example:</em><pre><code class="language-json">&quot;exclude&quot;: [ &quot;.env&quot;, &quot;todo.md&quot;, &quot;drafts&quot; ],
</code></pre>
</li>
<li><strong>nav</strong> - Nav bar item list. Example:<pre><code class="language-json">&quot;nav&quot;: {
  &quot;about&quot;: &quot;./about.md&quot;,
  &quot;stie&quot;: &quot;https://anzenkodo.github.io/AnzenKodo&quot;
}
</code></pre>
</li>
<li><strong>head</strong> - If you analytics or any other tags you want to put on head tag.
<em>Example:</em>
<code>&lt;link rel=&quot;preconnect&quot; href=&quot;//www.google-analytics.com&quot; crossorigin=&quot;&quot;&gt;</code>.</li>
</ul>
<h2>CLI Options</h2>
<pre><code class="language-sh">dblog blog generator, that generates blog from Markdown and JSON file. dblog handles technical parts, so you can focus on hard part writing.

Website: https://anzenkodo.github.io/dblog
Package: https://deno.land/x/dblog
Repo: https://github.com/AnzenKodo/dblog
Docs: https://anzenkodo.github.io/dblog/posts/dblog-Docs.html

USAGE:
  dblog [OPTIONS]

OPTIONS:
  --serve   Build blog and Start localhost.
    --noopen  Don't open browser, when starting localhost.
  --build   Build blog without starting localhost.
  --setup   Setup new blog.
  --backup  Restore blog if 'backup.json' file available.
  --readme  Generate 'README.md' file.
  --help    Print help information.
</code></pre>
<h2>File Options</h2>
<pre><code>---
title: If empty the file name will be used
description: If empty the first paragraph will be used.
tags: [ &quot;tag1&quot;, &quot;tag2&quot; ]
date: 20/08/2020
canonical:
---
</code></pre>
<ul>
<li><strong>date</strong> - If empty, the file date will be used. <em>Note:</em> The file <code>date</code> might
not always right. So always give you own date.</li>
<li><strong>canonical</strong> - Share content between multiple sites without impacting SEO.
Just put canonical URL. Know more about
<a href="https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls">canonical url</a>.</li>
</ul>
<h3>If file name start with underscore “_” it will be consider as draft.</h3>
<p><strong>Example:</strong> <code>posts/_This is draft.md</code></p>
<h2>Markdown Guide</h2>
<h3><a href="https://commonmark.org/help/">CommonMark</a> Syntex</h3>
<h4>Heading</h4>
<pre><code class="language-md"># H1

## H2

### H3

#### H4

##### H5

###### H6
</code></pre>
<h1>H1</h1>
<h2>H2</h2>
<h3>H3</h3>
<h4>H4</h4>
<h5>H5</h5>
<h6>H6</h6>
<h4>Inline style</h4>
<pre><code class="language-md">**Bold** _Italic_ ~~Strikethrough~~
</code></pre>
<p><strong>Bold</strong> <em>Italic</em> <s>Strikethrough</s></p>
<h4>Link and Image</h4>
<pre><code class="language-md">[website](https://anzenkodo.github.io/dblog)
![Jurassic Deno by Samip Poudel](https://deno.land/images/artwork/jurassicDeno.jpg)
</code></pre>
<p><a href="https://anzenkodo.github.io/dblog">website</a>
<img src="https://deno.land/images/artwork/jurassicDeno.jpg" alt="Jurassic Deno by Samip Poudel"></p>
<h4>Blockquote</h4>
<pre><code class="language-md">&gt; 'The road to hell is paved with good intentions' by Abbot Bernard
</code></pre>
<blockquote>
<p>‘The road to hell is paved with good intentions’ by Abbot Bernard</p>
</blockquote>
<h4>List</h4>
<pre><code class="language-md">- List
  - List
- List

1. One
2. Two
3. Three
</code></pre>
<ul>
<li>List
<ul>
<li>List</li>
</ul>
</li>
<li>List</li>
</ul>
<ol>
<li>One</li>
<li>Two</li>
<li>Three</li>
</ol>
<h4>Horizontal rule</h4>
<pre><code class="language-md">---
</code></pre>
<hr>
<h4>Code block</h4>
<div class="highlight highlight-source-lisp notranslate position-relative overflow-auto">
<pre>
`Inline code` with backticks
```js
  console.log("Code Blog in JavaScript");
```
</pre>
</div>
<p><code>Inline code</code> with backticks</p>
<pre><code class="language-js">console.log(&quot;Code Blog in JavaScript&quot;);
</code></pre>
<h3>Additional Markdown syntax</h3>
<h4>Checkbox</h4>
<pre><code class="language-md">- [ ] Checkbox
- [x] Checkbox with tick
</code></pre>
<ul class="task-list">
<li class="task-list-item"><input type="checkbox" id="cbx_0" disabled="true"><label for="cbx_0"> Checkbox</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> Checkbox with tick</label></li>
</ul>
<h4>Image with caption</h4>
<pre><code class="language-md">![Deno](https://deno.land/images/artwork/deno_matrix.png &quot;Matrix by bramaudi&quot;)
</code></pre>
<figure data-type="image"><img src="https://deno.land/images/artwork/deno_matrix.png" alt="Deno" loading="lazy" decoding="async"><figcaption>Matrix by bramaudi</figcaption></figure>
<h4>Footer</h4>
<pre><code class="language-md">Here is a footnote reference[^1]. [^1]: Here is the footnote.
</code></pre>
<p>Here is a footnote reference[^1]. [^1]: Here is the footnote.</p>
<h4>Additional inline syntax</h4>
<pre><code class="language-md">~sub~ ^sup^ ==mark== [[kbd]] _underline_ ++insert++ ~~delete~~
</code></pre>
<p><sub>sub</sub>
<sup>sup</sup>
<mark>mark</mark>
<kbd>kbd</kbd>
<u>underline</u>
<ins>insert</ins>
<del>delete</del></p>
<h4>Description list</h4>
<pre><code class="language-md">: Definition 1 Term 2 with _inline markup_ : Definition 2 Third paragraph of
definition 2.
</code></pre>
<dl>
  <dt>Definition 1</dt>
  <dd>Term 2 with inline.</dd>
  <dt>Definition 2</dt>
  <dd>Third paragraph of definition 2.</dd>
</dl>
<h4>Abbreviation</h4>
<pre><code class="language-md">*[abbr]: Abbreviation
</code></pre>
<p><abbr title="Abbreviation">abbr</abbr></p>
<h4>Table</h4>
<h5>Normal</h5>
<pre><code class="language-md">| Syntax    | Description |
| --------- | ----------- |
| Header    | Title       |
| Paragraph | Text        |
</code></pre>
<table>
<thead>
<tr>
<th>Syntax</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Header</td>
<td>Title</td>
</tr>
<tr>
<td>Paragraph</td>
<td>Text</td>
</tr>
</tbody>
</table>
<h5>Multiline</h5>
<pre><code class="language-md">| Markdown  | Rendered HTML |
| --------- | ------------- |
| _Italic_  | _Italic_      |
|           |               |
| - Item 1  | - Item 1      |
| - Item 2  | - Item 2      |
| ```python | ```python \   |
| .1 + .2   | .1 + .2       |
</code></pre>
<table><thead><tr><th>Markdown</th><th>Rendered HTML</th></tr></thead> <tbody>
  <tr> <td> <pre><code>*Italic* </code></pre> </td> <td> <p><em>Italic</em></p>
  </td> </tr> <tr> <td> <pre><code>- Item 1 - Item 2</code></pre> </td> <td>
  <ul> <li>Item 1</li> <li>Item 2</li> </ul> </td> </tr> <tr> <td>
<pre><code>
```python
.1 + .2
```
</code></pre> </td> <td> <pre><code class="language-python">.1 + .2
  </code></pre> </td> </tr> </tbody> </table>
<h5>Rowspan</h5>
<pre><code class="language-md">|                       Stage | Direct Products | ATP Yields |
| --------------------------: | --------------: | ---------: |
|                  Glycolysis |           2 ATP |            |
|                          ^^ |          2 NADH |   3--5 ATP |
|          Pyruvaye oxidation |          2 NADH |      5 ATP |
|           Citric acid cycle |           2 ATP |            |
|                          ^^ |          6 NADH |     15 ATP |
|                          ^^ |         2 FADH2 |      3 ATP |
|              **30--32** ATP |                 |            |
| [Net ATP yields per hexose] |                 |            |
</code></pre>
<table> <caption id="netatpyieldsperhexose">Net ATP yields per hexose</caption>
  <thead> <tr> <th align="right">Stage</th> <th align="right">Direct
Products</th> <th align="right">ATP Yields</th> </tr> </thead> <tbody> <tr> <td
align="right" rowspan="2">Glycolysis</td> <td align="right" colspan="2">2
ATP</td> </tr> <tr> <td align="right">2 NADH</td> <td align="right">3–5
ATP</td> </tr> <tr> <td align="right">Pyruvaye oxidation</td> <td
align="right">2 NADH</td> <td align="right">5 ATP</td> </tr> <tr> <td
align="right" rowspan="3">Citric acid cycle</td> <td align="right"
colspan="2">2 ATP</td> </tr> <tr> <td align="right">6 NADH</td> <td
align="right">15 ATP</td> </tr> <tr> <td align="right">2 FADH2</td> <td
align="right">3 ATP</td> </tr> <tr> <td align="right"
colspan="3"><strong>30–32</strong> ATP</td> </tr> </tbody> </table>
<h4>Headerless</h4>
<pre><code class="language-md">|--|--|--|--|--|--|--|--| |♜| |♝|♛|♚|♝|♞|♜| | |♟|♟|♟| |♟|♟|♟| |♟| |♞| | | | | |
| |♗| | |♟| | | | | | | | |♙| | | | | | | | | |♘| | | |♙|♙|♙|♙| |♙|♙|♙|
|♖|♘|♗|♕|♔| | |♖|
</code></pre>
<table> <tbody> <tr> <td>♜</td> <td></td> <td>♝</td> <td>♛</td> <td>♚</td>
  <td>♝</td> <td>♞</td> <td>♜</td> </tr> <tr> <td></td> <td>♟</td> <td>♟</td>
  <td>♟</td> <td></td> <td>♟</td> <td>♟</td> <td>♟</td> </tr> <tr> <td>♟</td>
  <td></td> <td>♞</td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr>
  <tr> <td></td> <td>♗</td> <td></td> <td></td> <td>♟</td> <td></td> <td></td>
  <td></td> </tr> <tr> <td></td> <td></td> <td></td> <td></td> <td>♙</td>
  <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td>
  <td></td> <td></td> <td>♘</td> <td></td> <td></td> </tr> <tr> <td>♙</td>
  <td>♙</td> <td>♙</td> <td>♙</td> <td></td> <td>♙</td> <td>♙</td> <td>♙</td>
  </tr> <tr> <td>♖</td> <td>♘</td> <td>♗</td> <td>♕</td> <td>♔</td> <td></td>
  <td></td> <td>♖</td> </tr> </tbody> </table>]]></description>
  </item>
  <item>
    <title>React</title>
    <link>https://anzenkodo.github.io/notes/programming/languages/javascript/react.html</link>
    <pubDate>2022-12-16T15:08:01.802Z</pubDate>
    <description><![CDATA[<h1>React</h1>
<ul>
<li>Function VS Class Component
<ul>
<li>A functional component is just a plain JavaScript function that accepts props as an argument and returns a React element.</li>
<li>A class component requires you to extend from React. Component and create a render function which returns a React element.</li>
</ul>
</li>
<li></li>
</ul>]]></description>
  </item>
  <item>
    <title>NodeJS</title>
    <link>https://anzenkodo.github.io/notes/programming/languages/javascript/nodejs.html</link>
    <pubDate>2022-12-16T15:08:01.802Z</pubDate>
    <description><![CDATA[<h1>NodeJS</h1>
<p>From <a href="https://trainings.internshala.com/nodejs-training">Internshala Training NodeJS Course</a></p>
<h1>Require</h1>
<ul>
<li>
<p>Import node module</p>
<pre><code class="language-jsx">const { readFs } = require(&quot;fs&quot;);
const { readHttps } = require(&quot;https&quot;);
</code></pre>
</li>
<li>
<p>Input the string in <code>console.log</code>.</p>
<pre><code class="language-jsx">st readLine = require(&quot;readline&quot;).createInterface({
  output: process.stdout,
  input: process.stdin,
});

readLine.question(&quot;What is your name?\n&quot;, (name) =&gt; {
  console.log(`Welcome ${name}`);
  readLine.close();
});

// What is your name?
// Jimmin &lt;= Ask to input here
// Welcome Jimmin
</code></pre>
</li>
</ul>
<h1>Module</h1>
<ul>
<li>
<p>Process</p>
<p>The <code>process</code> object in Node.js is a global object that can be accessed inside any module without requiring it.</p>
<ul>
<li>
<p><code>process.on</code></p>
<pre><code class="language-jsx">process.on('beforeExit', (code) =&gt; {
console.log('Process beforeExit event with code: ', code);
});
// Process beforeExit event with code:  0                                                                                             /0.3s
</code></pre>
</li>
<li>
<p>Process expressions</p>
<pre><code class="language-jsx">console.log(process.ppid);
// 21321
console.log(process.argv);
// [
//  '/snap/node/5148/bin/node',
//  '/home/kurama/Documents/Projects/Node JS/app.js'
//]
console.log(`Reports are compact? ${process.report.compact}`);
// Reports are compact? false                                                                                                         /0.3s
</code></pre>
</li>
</ul>
</li>
<li>
<p>Module</p>
<p>The <code>module</code> is same as process but you can only access within the file information.</p>
</li>
<li>
<p>Event</p>
<ul>
<li>
<p>EventEmitter</p>
<pre><code class="language-jsx">const events = require(&quot;events&quot;);
const eEmitter = new events.EventEmitter();

const getParty = function () {
  console.log(&quot;Time to party&quot;);
  const ran = Math.ceil(Math.random() * 10);
  console.log(`Party starts in ${ran}`);
  tester(ran);
};

eEmitter.on(&quot;music&quot;, getParty);

tester(2);

function tester(val) {
  setTimeout((e) =&gt; {
    eEmitter.emit(&quot;music&quot;);
  }, val * 1000);
}

// Time to party
// Party starts in 5
// Time to party
// Party starts in 8
// Time to party
// Party starts in 3
// Time to party
// Party starts in 9
</code></pre>
</li>
</ul>
</li>
</ul>]]></description>
  </item>
  <item>
    <title>JS</title>
    <link>https://anzenkodo.github.io/notes/programming/languages/javascript/js.html</link>
    <pubDate>2022-12-16T15:08:01.802Z</pubDate>
    <description><![CDATA[<h1>The JavaScript language</h1>
<h1>Standard built-in objects</h1>
<h2>Proxy</h2>
<ul>
<li>
<p>The <code>new Proxy</code> object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.</p>
<pre><code class="language-jsx">let numbers = {
    'Hello': 'Hi',
    'YoYo': 'Yo',
    'Going': 'Go'
}

let proxy = new Proxy(numbers, {
    get(target, prop) {
        if(prop in target) {
            return target[prop];
        } else {
            return `${prop} is not found`;
        }
    }
});

proxy['Going'];
// Go
</code></pre>
</li>
<li>
<p>Proxy with <code>set</code> <strong>Note</strong>: For set, it must return true for a successful write.</p>
<pre><code class="language-jsx">let users = {};

let dataStorage = new Proxy(users, {
    set(target, prop, val) {
        if(typeof val == 'string') {
            target[prop] = val;
        } else {
            throw new Error(`Only string allowed`);
        }
    }
});

dataStorage.name = &quot;Jone&quot;
// Jone

dataStorage.age = 12
// Error: Only string allowed
</code></pre>
</li>
<li>
<p>Proxy with <code>has</code></p>
<pre><code class="language-jsx">let range = {
    start: 1,
    end: 10
};

let range = new Proxy(range, {
    has(target, prop) {
        return target.start &lt; prop &amp;&amp; target.end &gt; prop;
    }
});

alert(5 in range); // true
alert(50 in range); // false
</code></pre>
</li>
</ul>
<h2>Reflect</h2>
<ul>
<li>
<p><code>Reflect.ownKeys()</code> returns an array of the target object’s own property keys.</p>
<pre><code class="language-jsx">let user = {
  name: &quot;John&quot;,
  age: 30,
  _password: &quot;***&quot;
};

let user = new Proxy(user, {
    ownKey(target) {
        return Object.keys(target).filter(obj =&gt; !obj.startsWith('_'));
    }
});

for(let key in user) alert(key);
// name, age
</code></pre>
</li>
<li>
<p><code>Reflect.set()</code></p>
<pre><code class="language-jsx">user = {
	age: 32
}
Reflect.set(user, 'name', 'Jone');
Reflect.set(user, 'age', '53');

console.log(user);

{age: &quot;53&quot;, name: &quot;Jone&quot;}
</code></pre>
</li>
<li>
<p>Proxying a getter with <code>Reflect.get()</code>.</p>
<pre><code class="language-jsx">let user = {
    _name: &quot;Guest&quot;,
    get name() {
        return this._name;
    }
}

let userProxy = new Proxy(user, {
    get(target, prop, receiver) {
        return Reflect.get(target, prop, receiver);
    }
});

let admin = {
    __proto__: userProxy,
    _name: &quot;Admin&quot;
};

admin.name;
// Admin
</code></pre>
</li>
</ul>
<h2>Promise</h2>
<ul>
<li>
<p>Return value if fail or pass.</p>
<pre><code class="language-jsx">let passPromise = new Promise((reslove, reject) =&gt; {
	try {
		if (false) throw NotDefine();
		reslove(&quot;Pass&quot;);
	} catch(err) {
		reject(err.message);
	}
});

passPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))
// Pass

let failPromise = new Promise((reslove, reject) =&gt; {
	try {
		if (true) throw NotDefine();
		reslove(&quot;Pass&quot;);
	} catch(err) {
		reject(err.message);
	}
});

failPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))
// NotDefine is not defined
</code></pre>
</li>
<li>
<p>Promise with <code>finally</code>.</p>
<pre><code class="language-jsx">let failPromise = new Promise((reslove, reject) =&gt; {
	try {
		if (true) throw NotDefine();
		reslove(&quot;Pass&quot;);
	} catch(err) {
		reject(&quot;Fail: &quot; + err.message);
	}
})
	.finally(() =&gt; console.log(&quot;The result is:&quot;));

failPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))
// The result is
// NotDefine is not defined
</code></pre>
</li>
<li>
<p>Promise with <code>catch</code>.</p>
<pre><code class="language-jsx">let failPromise = new Promise((reslove, reject) =&gt; {
	try {
		if (true) throw NotDefine();
		reslove(&quot;Pass&quot;);
	} catch(err) {
		reject(&quot;Fail: &quot; + err.message);
	}
})
	.finally(() =&gt; console.log(&quot;The result is:&quot;)
	.catch((err) =&gt; console.log(err.name + &quot;: This error is catch.&quot;));

failPromise.then(result =&gt; console.log(result), failResult =&gt; console.log(failResult))
// The result is
// undefined: This error is catch.
</code></pre>
</li>
<li>
<p>❓Delay with a promise.</p>
<pre><code class="language-jsx">function delay(ms) {
    return new Promise((reslove) =&gt; setTimeout(reslove, ms));
}

delay(3000).then(() =&gt; alert('runs after 3 seconds'));
// runs after 3 seconds
</code></pre>
</li>
<li>
<p>Promises chaining with <code>then</code></p>
<pre><code class="language-jsx">new Promise((reslove, reject) =&gt; {
    reslove(&quot;Hello&quot;);
}).then((result) =&gt; {
    console.log(result);
    return &quot;how&quot;;
}).then((result) =&gt; {
    console.log(result);
    return &quot;are&quot;;
}).then((result) =&gt; {
    console.log(result);
}).finally(() =&gt; {
    console.log(&quot;you?&quot;);
});
</code></pre>
</li>
<li>
<p>Promises chaining with numbers</p>
<pre><code class="language-jsx">new Promise((reslove) =&gt; {
    reslove(1);
}).then((result) =&gt; {
    console.log(result);
    return result + 1;
}).then((result) =&gt; {
    console.log(result);
    return result + 1;
}).then((result) =&gt; {
    console.log(result);
});

/*
1
2
3
*/
</code></pre>
</li>
<li>
<p><code>Promise.all</code>you can use multiple Promise</p>
<pre><code class="language-jsx">let username = []

for ( loop = 0; loop &lt; 2; loop++ ) username.push(prompt(&quot;What is your Username&quot;));

let githubAPI = username.map(user =&gt; &quot;https://api.github.com/users/&quot; + user);

Promise.all(githubAPI)
	.then(apiJSON =&gt; Promise.all(apiJSON.map(aj =&gt; aj.json())))
	.then(check =&gt; {
	if (check == null) {
		console.log(`No result found`)
		exit();
		}
	return check;
})
	.then(github =&gt; console.log(`Name: ${github.name}, Repo: ${github.public_repos}`));
</code></pre>
</li>
<li>
<p>#<code>Promise.allSettled</code>the <code>Promise.all</code>can’t error this function can.</p>
<ul>
<li><code>Promise.allSettled</code> just waits for all promises to settle, regardless of the result. The resulting array has:
<ul>
<li><code>{status:&quot;fulfilled&quot;, value:result}</code> for successful responses,</li>
<li><code>{status:&quot;rejected&quot;, reason:error}</code> for errors.</li>
</ul>
</li>
</ul>
<pre><code class="language-jsx">let urls = [
	`https://api.github.com/users/aav`,
	`https://api.github.com/users/hello`,
	`https://no-such-url`
];

Promise.allSettled(urls.map(url =&gt; fetch(url)))
	.then(url =&gt; url.forEach((urlLoop, num) =&gt; {
		if ( urlLoop.status == &quot;fulfilled&quot; ) {
			fetch(urls[num])
                .then(urlJSON =&gt; urlJSON.json())
                .then(data =&gt; console.log(`${data.name}`));
		}
		if ( urlLoop.status == &quot;rejected&quot; ) {
			console.log(`Error: Failed to fetch. Error code: 3234`);
		}
	}));
</code></pre>
</li>
<li>
<p><code>Promise.race</code></p>
<ul>
<li>
<p><code>reject</code> or <code>error</code> can’t come first.</p>
<pre><code class="language-jsx">Promise.race([
  new Promise((resolve, reject) =&gt; reject(1)),
  new Promise((resolve, reject) =&gt; resolve(2)),
  new Promise((resolve, reject) =&gt; reject(3)),
  new Promise((resolve, reject) =&gt; resolve(4))
]).then(alert);

// Uncaught (in promise) 1
</code></pre>
</li>
<li>
<p>Only shows the promise which executes first.</p>
<pre><code class="language-jsx">Promise.race([
  new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(2), 200)),
  new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(4), 100))
]).then(alert);
</code></pre>
</li>
</ul>
</li>
<li>
<p><code>Promise.any</code></p>
<pre><code class="language-jsx">Promise.any([
    new Promise((reslove, reject) =&gt; reject(1)),
    new Promise((reslove, reject) =&gt; setTimeout(() =&gt; reslove(2), 200)),
    new Promise((reslove, reject) =&gt; reject(3)),
    new Promise((reslove, reject) =&gt; setTimeout(() =&gt; reslove(4), 100))
]).then(word =&gt; console.log(word));
</code></pre>
</li>
</ul>
<h2>Date</h2>
<ul>
<li>
<p>To Get the <code>Date</code></p>
<ul>
<li><code>getFullYear()</code> Get the year (4 digits).</li>
<li><code>getMonth()</code> Get the month, from 0 to 11.</li>
<li><code>getDate()</code> Get the day of month, from 1 to 31, the name of the method does look a little bit strange.</li>
<li><code>getHours()</code>, <code>getMinutes()</code>, <code>getSeconds()</code>, <code>getMilliseconds()</code> Get the corresponding time components.</li>
<li><code>getDay()</code> Get the day of week, from 0 (Sunday) to 6 (Saturday). The first day is always Sunday, in some countries that’s not so, but can’t be changed.</li>
<li><code>getTime()</code> Returns the timestamp for the date – a number of milliseconds passed from the January 1st of 1970 UTC+0.</li>
<li><code>getTimezoneOffset()</code> Returns the difference between UTC and the local time zone, in minutes.</li>
</ul>
</li>
<li>
<p>To Set the <code>Date</code></p>
<ul>
<li><code>setFullYear(year, [month], [date])</code></li>
<li><code>setMonth(month, [date])</code></li>
<li><code>setDate(date)</code></li>
<li><code>setHours(hour, [min], [sec], [ms])</code></li>
<li><code>setMinutes(min, [sec], [ms])</code></li>
<li><code>setSeconds(sec, [ms])</code></li>
<li><code>setMilliseconds(ms)</code></li>
<li><code>setTime(milliseconds)</code></li>
</ul>
</li>
<li>
<p>#<code>Date()</code> constructor.</p>
<pre><code class="language-jsx">const date1 = new Date('December 17, 1995 03:24:00');
console.log(date1);
// Sun Dec 17 1995 03:24:00 GMT+0530 (India Standard Time)
</code></pre>
</li>
<li>
<p>#<code>Date.now()</code> for now date.</p>
<pre><code class="language-jsx">let start = Date.now();
for (let i = 0; i &lt; 100000; i++) {
  let doSomething = i * i * i;
}
let end = Date.now();
console.log( `The loop took ${end - start} ms` );
// The loop took 2 ms
</code></pre>
</li>
<li>
<p><code>Date.parse</code> from a string.</p>
<pre><code class="language-jsx">let ms = Date.parse('2012-01-26T13:51:50.417-07:00');
alert(ms);
// 1327611110417
</code></pre>
</li>
</ul>
<h2>Function</h2>
<ul>
<li>
<p>IIFE (Immediately Invoked Function Expression)</p>
<pre><code class="language-jsx">((name, surname) =&gt; {
	console.log(`Hello ${name} ${surname}`);
})('Jummy', 'Vinchoco');

// Hello Jummy Vinchoco
</code></pre>
</li>
<li>
<p>❓ Fix a function that loses “this”</p>
<pre><code class="language-jsx">function askPassword(ok, fail) {
  let password = prompt(&quot;Password?&quot;, '');
  if (password == &quot;rockstar&quot;) ok();
  else fail();
}

let user = {
  name: 'John',

  loginOk() {
    alert(`${this.name} logged in`);
  },

  loginFail() {
    alert(`${this.name} failed to log in`);
  },

};

askPassword(user.loginOk.bind(user), user.loginFail.bind(user));
</code></pre>
</li>
<li>
<p>Arrow don’t have <code>this</code>, <code>argument</code>, <code>new</code> &amp; <code>super</code></p>
</li>
<li>
<p>#<code>Function.name</code>to show variable name</p>
<pre><code class="language-jsx">function sayHi() {
  alert(&quot;Hi&quot;);
}

alert(sayHi.name); // sayHi
</code></pre>
</li>
<li>
<p>#<code>setter</code>&amp; #<code>getter</code>. #<code>set</code> you can change the value like <code>let</code>&amp; <code>const</code>. #<code>get</code>syntax binds an object property to a function that will be called when that property is looked up.</p>
<ul>
<li>
<p>This can also work with <code>defineProperty</code> &amp; <code>defineProperties</code></p>
<pre><code class="language-jsx">let user = {
  name: &quot;John&quot;,
  surname: &quot;Smith&quot;
};

Object.defineProperty(user, 'fullName', {
  get() {
    return `${this.name} ${this.surname}`;
  },

  set(value) {
    [this.name, this.surname] = value.split(&quot; &quot;);
  }
});

console.log(user.fullName); // John Smith

for(let key in user) console.log(user); // name, surname
</code></pre>
</li>
<li>
<p><code>getters</code>/<code>setters</code> can be used as wrappers over “real” property values to gain more control over operations with them.</p>
<pre><code class="language-jsx">let user = {
  get name() {
    return this._name;
  },

  set name(value) {
    if (value.length &lt; 4) {
      alert(&quot;Name is too short, need at least 4 characters&quot;);
      return;
    }
    this._name = value;
  }
};

user.name = &quot;Pete&quot;;
alert(user.name); // Pete

user.name = &quot;&quot;; // Name is too short...
</code></pre>
</li>
</ul>
</li>
<li>
<p>Binding object with function with #<code>bind</code>.</p>
<ul>
<li>
<p>Joined other function <code>this</code> with bind.</p>
<pre><code class="language-jsx">let user = {
    firstName: &quot;John&quot;
};

function func(word) {
    console.log(word + ' ' + this.firstName);
};

say(&quot;Hi&quot;);
// Hi John
</code></pre>
</li>
<li>
<p>You can solve <code>this</code> problem with #<code>bind</code>.</p>
<pre><code class="language-jsx">let user = {
    firstName: &quot;Jonn&quot;,
    sayHi() {
        console.log(`Hi ${this.firstName}`);
    }
}

user.bind(user.sayHi);
// Hi Jonn
</code></pre>
</li>
</ul>
</li>
<li>
<p>Sort with #<code>sort()</code>.</p>
<pre><code class="language-jsx">let arr = [ 1, 15, 2 ];
console.log(arr.sort((a, b) =&gt; a - b);
// [1, 2, 15]
</code></pre>
</li>
<li>
<p>Sort string #<code>localeCompare()</code>.</p>
<pre><code class="language-jsx">let countries = ['Österreich', 'Andorra', 'Vietnam'];
console.log(countries.sort((a, b) =&gt; a.localeCompare(b)))
// Andorra, Österreich, Vietnam
</code></pre>
</li>
<li>
<p>Reverse the array with #<code>reverse()</code></p>
<pre><code class="language-jsx">let arr = [1, 2, 3, 4, 5];
arr.reverse();
alert( arr );
// 5,4,3,2,1
</code></pre>
</li>
<li>
<p>Checks is it Array or Not with #<code>isArray()</code>.</p>
<pre><code class="language-jsx">console.log(Array.isArray({}));
// false
console.log(Array.isArray([]));
// true
</code></pre>
</li>
<li>
<p>Make array with words with <code>Array.from()</code>.</p>
<pre><code class="language-jsx">console.log(Array.from(&quot;HELLO&quot;));
// [&quot;H&quot;, &quot;E&quot;, &quot;L&quot;, &quot;L&quot;, &quot;O&quot;]
</code></pre>
</li>
<li>
<p>You can function as a variable in function.</p>
<pre><code class="language-jsx">function f() {
  let value = Math.random();

  return function() { alert(value); };
}

// 3 functions in array, every one of them links to Lexical Environment
// from the corresponding f() run
let arr = [f(), f(), f()];
</code></pre>
</li>
<li>
<p>Both nested functions are created within the same outer Lexical Environment, so they share access to the same count variable.</p>
<pre><code class="language-jsx">function Counter() {
  let count = 0;

  this.up = function() {
    return ++count;
  };

  this.down = function() {
    return --count;
  };
}

let counter = new Counter();

alert( counter.up() ); // 1
alert( counter.up() ); // 2
alert( counter.down() ); // 1
</code></pre>
</li>
<li>
<p>The function that created inside the function is stay inside the function.</p>
<pre><code class="language-jsx">let phrase = &quot;Hello&quot;;

if (true) {
  let user = &quot;John&quot;;

  function sayHi() {
    alert(`${phrase}, ${user}`);
  }
}

sayHi(); // error
</code></pre>
</li>
<li>
<p>Length of String with <code>length()</code>.</p>
</li>
<li>
<p>Named Function Expression, or NFE, is a term for Function Expressions that have a name.</p>
<ul>
<li>It allows the function to reference itself internally.</li>
<li>It is not visible outside of the function.</li>
</ul>
<pre><code class="language-jsx">let sayHi = function func(who) {
  if (who) {
    alert(`Hello, ${who}`);
  } else {
    **func(&quot;Guest&quot;);**
  }
};

let welcome = sayHi;
sayHi = null;

welcome(); // Hello, Guest
</code></pre>
<ul>
<li><code>func</code> is function-local. It is not taken from outside (and not visible there). The specification guarantees that it will always reference the current function.</li>
</ul>
</li>
<li>
<p>Sum with an arbitrary amount of brackets.</p>
<pre><code class="language-jsx">function sum(a) {

  let currentSum = a;

  function f(b) {
    currentSum += b;
    return f;
  }

  f.toString = function() {
    return currentSum;
  };

  return f;
}

alert( sum(1)(2) ); // 3
alert( sum(5)(-1)(2) ); // 6
alert( sum(6)(-1)(-2)(-3) ); // 0
alert( sum(0)(1)(2)(3)(4)(5) ); // 15
</code></pre>
</li>
<li>
<p>The call() method calls a function with a given this value and arguments provided individually.</p>
<pre><code class="language-jsx">function sayHi() {
    return this.name;
}

let hi = { name: &quot;hello boys&quot; };

sayHi.call( hi ); // hello boys
</code></pre>
</li>
<li>
<p>call() method with argument.</p>
<pre><code class="language-jsx">function sayHi( user ) {
    console.log( this.name + &quot; &quot; + user );
}

let id = { name: &quot;Jonney&quot; };
let username = &quot;Deep&quot;;

sayHi.call( id, username );
</code></pre>
</li>
<li>
<p>Function binding</p>
<ul>
<li>
<p>The function inside the function run the first the outer function.</p>
<pre><code class="language-jsx">function handleException(funcAsParameter) {
	console.log(&quot;Inside handleException function&quot;)
	try {
		funcAsParameter()
	} catch(err) {
		console.log(err)
	}
}

function divideByZero() {
	result = 5 / 0
	if(!Number.isFinite(result)) {
		throw &quot;Division by Zero not a good idea!!&quot;
	}
	console.log(&quot;Result of the division of 5 by zero is: &quot; + result)
}

// Passing divide by zero as a parameter to handle exceptions. handleException will
// call the divide by zero methods and will handle any exception raised by it.
handleException(divideByZero)
</code></pre>
</li>
</ul>
</li>
<li>
<p>IIFE - Self Executing Anonymous Function</p>
<pre><code class="language-jsx">(function helloWorld(name, age) {
	console.log(`My name is ${name} and I am ${age} years old`);
})(&quot;Jonney&quot;, 32);
</code></pre>
</li>
</ul>
<h2>Array</h2>
<ul>
<li>
<p><code>Array</code>method, selects and negatives.</p>
<ul>
<li><code>slice(start, end)</code> From <code>start</code> to <code>end</code> (not including <code>end</code>) - <strong>Allows negatives</strong></li>
<li><code>substring(start, end)</code> Between <code>start</code> and <code>end</code> - <strong>Negative values mean</strong> <code>0</code></li>
<li><code>substr(start, length)</code>from <code>start</code> get <code>length</code> characters - <strong>Allows negative</strong> <code>start</code></li>
</ul>
</li>
<li>
<p>#<code>map()</code>changes the value of the first variable in arrow function next value in the array</p>
<pre><code class="language-jsx">const array1 = [1, 4, 9, 16];

// pass a function to map
const map1 = array1.map(x =&gt; x * 2);

console.log(map1);
// expected output: Array [2, 8, 18, 32]
</code></pre>
</li>
<li>
<p>#<code>isArray</code> checks if it is array or not</p>
<pre><code class="language-jsx">Array.isArray([1, 2, 3]);  // true
Array.isArray({foo: 123}); // false
</code></pre>
</li>
<li>
<p>#<code>indexOf</code>checks if the array has same value and gives <code>true</code> = 1 &amp; <code>false</code> = 0</p>
<pre><code class="language-jsx">const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];

console.log(beasts.indexOf('bison'));
// expected output: 1

// start from index 2
console.log(beasts.indexOf('bison', 2));
// expected output: 4

console.log(beasts.indexOf('giraffe'));
// expected output: -1
</code></pre>
</li>
<li>
<p><code>includes</code> works like <code>indexOf</code>but returns <code>true</code>&amp; <code>false</code></p>
<pre><code class="language-jsx">const array1 = [1, 2, 3];

console.log(array1.includes(2));
// expected output: true

const pets = ['cat', 'dog', 'bat'];

console.log(pets.includes('cat'));
// expected output: true

console.log(pets.includes('at'));
// expected output: false
</code></pre>
</li>
<li>
<p>#<code>forEach</code>loops through all array values</p>
<pre><code class="language-jsx">let code = [&quot;hello&quot;, &quot;world&quot;, &quot;noob&quot;];

code.forEach(n =&gt; console.log(n));
/*
 hello
 world
 noob
*/
</code></pre>
</li>
<li>
<p><code>Array</code> prototypically inherits from <code>Object</code>. <code>console.log(Array instanceof Object) // true</code></p>
</li>
<li>
<p>The <code>join()</code> method creates and returns a new string by concatenating all of the elements in an array.</p>
<pre><code class="language-jsx">const elements = ['Fire', 'Air', 'Water'];

console.log(elements.join());
// expected output: &quot;Fire,Air,Water&quot;

console.log(elements.join(''));
// expected output: &quot;FireAirWater&quot;

console.log(elements.join('-'));
// expected output: &quot;Fire-Air-Water&quot;
</code></pre>
</li>
</ul>
<h2>JSON</h2>
<ul>
<li>
<p>#<code>JSON.stringify()</code> converts a JavaScript object or value to a JSON string.</p>
<pre><code class="language-jsx">console.log(JSON.stringify({ x: [10, undefined, function(){}, Symbol('')] }));
</code></pre>
</li>
<li>
<p>String to Object with <code>JSON.parse()</code></p>
<pre><code class="language-jsx">let userData = '{ &quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 35, &quot;isAdmin&quot;: false, &quot;friends&quot;: [0,&quot;hi&quot;,2,3] }';
let user = JSON.parse(userData);
alert( user.friends[1] );
// &quot;hi&quot;
</code></pre>
</li>
<li>
<p>Only show passed value with <code>toJSON()</code></p>
<pre><code class="language-jsx">let room = {
  number: 23,
  toJSON() {
    return this.number;
  }
};
let meetup = {
  title: &quot;Conference&quot;,
  room
};
alert( JSON.stringify(room) ); // 23
alert( JSON.stringify(meetup) );
/*
  {
    &quot;title&quot;:&quot;Conference&quot;,
    &quot;room&quot;: 23
  }
*/
</code></pre>
</li>
<li>
<p>Object to String <code>JSON.stringify()</code></p>
<pre><code class="language-jsx">let user = {
  name: &quot;John&quot;,
  age: 25,
  roles: {
    isAdmin: false,
    isEditor: true
  }
};
alert(JSON.stringify(user, null, 2));
/* two-space indents:
{
  &quot;name&quot;: &quot;John&quot;,
  &quot;age&quot;: 25,
  &quot;roles&quot;: {
    &quot;isAdmin&quot;: false,
    &quot;isEditor&quot;: true
  }
}
*/
/* for JSON.stringify(user, null, 4) the result would be more indented:
{
    &quot;name&quot;: &quot;John&quot;,
    &quot;age&quot;: 25,
    &quot;roles&quot;: {
        &quot;isAdmin&quot;: false,
        &quot;isEditor&quot;: true
    }
}
*/
</code></pre>
</li>
<li>
<p>JSON in Javascript</p>
<pre><code class="language-jsx">let string = JSON.stringify({squirrel: false,
                             events: [&quot;weekend&quot;]});
console.log(string);
// → {&quot;squirrel&quot;:false,&quot;events&quot;:[&quot;weekend&quot;]}
console.log(JSON.parse(string).events);
// → [&quot;weekend&quot;]
</code></pre>
</li>
</ul>
<h2>Object</h2>
<ul>
<li>
<p><code>Object</code> properties can store beside a value, have three special attributes (so-called “flags”).</p>
<ul>
<li><code>writable</code>- if <code>true</code>, the value can be changed, otherwise it’s read-only.</li>
<li><code>enumerable</code>- if <code>true</code>, then listed in loops, otherwise not listed.</li>
<li><code>configurable</code>- if <code>true</code>, the property can be deleted and these attributes can be modified, otherwise not.</li>
</ul>
</li>
<li>
<p>With #<code>getOwnPropertyDescriptor</code> you can also show object flags.</p>
<pre><code class="language-jsx">let user = {
    name: &quot;John&quot;
}

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;John&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: true
}
*/

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;).writable);
// true
</code></pre>
</li>
<li>
<p>To change the flags, we can use #<code>Object.defineProperty</code>.</p>
<ul>
<li>
<p><code>writable: false</code> value can’t be change.</p>
<pre><code class="language-jsx">let user = {
    name: &quot;John&quot;
}

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;John&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: true
}
*/

Object.defineProperty(user, &quot;name&quot;, {
    writable: false,
    value: &quot;Jonney&quot;
});

user.name = &quot;John&quot;; // Value will not change

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;Jonney&quot;,
  &quot;writable&quot;: false,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: true
}
*/
</code></pre>
</li>
<li>
<p><code>configurable: false</code> can’t be deleted.</p>
<ul>
<li>The idea of “configurable: false” is to prevent changes of property flags and its deletion, while allowing to change its value.
<ul>
<li>Can’t change <code>configurable</code> flag.</li>
<li>Can’t change <code>enumerable</code> flag.</li>
<li>Can’t change <code>writable: false</code> to <code>true</code> (the other way round works).</li>
<li>Can’t change <code>get/set</code> for an accessor property (but can assign them if absent).</li>
</ul>
</li>
</ul>
<pre><code class="language-jsx">let user = {
    name: &quot;John&quot;
}

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;John&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: true
}
*/

Object.defineProperty(user, &quot;name&quot;, {
    configurable: false,
    value: &quot;Jonney&quot;
});

delete user.name; // Value can't be deleted

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;Jonney&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: false
}
*/
</code></pre>
</li>
<li>
<p><code>enumerable: false</code> can’t use <code>for...in</code>loop &amp; <code>Object.key</code></p>
<pre><code class="language-jsx">let user = {
    name: &quot;John&quot;,
		age: 23
}

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;John&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: true,
  &quot;configurable&quot;: true
}
*/

Object.defineProperty(user, &quot;name&quot;, {
    enumerable: false,
    value: &quot;Jonney&quot;
});

for (let key in user) console.log(key);
// age --&gt; don't show name

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;Jonney&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: false,
  &quot;configurable&quot;: true
}
*/
</code></pre>
</li>
</ul>
</li>
<li>
<p>Unlike #<code>Object.defineProperty</code>the #<code>Object.defineProperties</code>can change multiple flags.</p>
<pre><code class="language-jsx">let user = { }

Object.defineProperties(user, {
	name: {value: &quot;John&quot;, writable: true},
	age: {value: 30, enumerable: true}
});

console.log(Object.getOwnPropertyDescriptor(user, &quot;name&quot;));
/*
{
  &quot;value&quot;: &quot;Jonney&quot;,
  &quot;writable&quot;: true,
  &quot;enumerable&quot;: false,
  &quot;configurable&quot;: false
}
*/
</code></pre>
</li>
<li>
<p>The #<code>Object.preventExtensions()</code> method prevents new properties from ever being added to an object.</p>
<ul>
<li>
<p>The #<code>Object.isExtensible()</code> method determines if an object is extensible.</p>
<pre><code class="language-jsx">const object1 = {};

Object.preventExtensions(object1);

console.log(Object.isExtensible(object1));
// expected output: false

Object.defineProperty(object1, 'property1', {
    value: 42
});

Object.getOwnPropertyDescriptor(object1);
// Error
</code></pre>
</li>
</ul>
</li>
<li>
<p>The #<code>Object.freeze()</code> forbids adding/removing/changing of properties. Sets configurable: false, writable: false for all existing properties.</p>
<ul>
<li>
<p>The #<code>Object.isFrozen()</code> determines if an object is frozen.</p>
<pre><code class="language-jsx">const obj = {
  prop: 42
};

Object.freeze(obj);

console.log(Object.isFrozen(obj));
// true

obj.prop = 33;
// Throws an error in strict mode

console.log(obj.prop);
// expected output: 42
</code></pre>
</li>
</ul>
</li>
<li>
<p>The #<code>Object.seal()</code> method seals an object, preventing new properties from being added to it and marking all existing properties as <code>configurable: false</code>. You can’t delete the value.</p>
<ul>
<li>
<p>The #<code>Object.isSealed()</code> method determines if an object is sealed.</p>
<pre><code class="language-jsx">const object1 = {
  property1: 42
};

Object.seal(object1);

console.log(Object.isSealed(object1));

object1.property1 = 33;
console.log(object1.property1);
// expected output: 33

delete object1.property1; // cannot delete when sealed
console.log(object1.property1);
// expected output: 33
</code></pre>
</li>
</ul>
</li>
<li>
<p>#<code>Object.prototype.constructor</code></p>
<ul>
<li>
<p>#<code>constructor</code>shows the variable property match.</p>
<pre><code class="language-jsx">let o = {};
console.log(o.constructor === Object);
// true

let a = [];
console.log(a.constructor === Array);
// true

let n = new Number;
console.log(n.constructor === Number);
// true

let s = new String;
console.log(s.constructor === String);
// true
</code></pre>
</li>
<li>
<p>Create 2nd object using function to object.</p>
<pre><code class="language-jsx">function Rabbit(name) {
    this.name = name;
}

let rabbit = new Rabbit(&quot;Mik Bunney&quot;);

console.log(rabbit.name);

let newRabbit = new rabbit.constructor(&quot;Mik Bunney&quot;);

newRabbit.name
</code></pre>
</li>
</ul>
</li>
<li>
<p>#<code>F.prototype</code>and #<code>prototype</code></p>
<ul>
<li>
<p>Use <code>F.prototype</code>to connect <code>Object</code>to <code>function</code> adds value top of <code>function</code> value.</p>
<pre><code class="language-jsx">function username(name, surname) {
    this.name = name;
    this.surname = surname;
}

let age = {
	dob: &quot;18-09-2020&quot;
}

username.prototype = age;

let person = new username(&quot;Joney&quot;, &quot;Deepth&quot;);

console.log(`Name: ${person.name} ${person.surname}, DOB: ${person.dob}`);
</code></pre>
</li>
<li>
<p>Add <code>this</code>value to function without adding value in brackets(<code>{}</code>).</p>
<pre><code class="language-jsx">function Rabbit() {};

Rabbit.prototype.age = 20;

let rabbit = new Rabbit();

console.log(rabbit.age);
// 20
</code></pre>
</li>
<li>
<p>Make <code>.function</code>with prototype.</p>
<pre><code class="language-jsx">function f() {
	console.log(&quot;Hello&quot;);
}

Function.prototype.disc = function(number) {
	console.log(setTimeout(this, number));
}

console.log(f.disc(1000));
</code></pre>
</li>
<li>
<p>Make multi-layer brackets.</p>
<pre><code class="language-jsx">function f(word) {
console.log(word);
}

Function.prototype.disc = function(number) {
let f = this;
return function(word) {
console.log(setTimeout(() =&gt; f(word), number));
}
}
</code></pre>
</li>
</ul>
</li>
<li>
<p>The #<code>Object.create()</code> method creates a new object, using an existing object as the prototype of the newly created object.</p>
<pre><code class="language-jsx">let person = {
	isHuman: true,
	printInformation() {
		if(!this.isHuman) {
			console.log(&quot;You are not Human :(&quot;);
		}
	}
}

console.log(person.printInformation());

let me = Object.create(person);

me.isHuman = false;

console.log(me.printInformation());
// You are not Human :(
</code></pre>
</li>
<li>
<p>The #<code>Object.getPrototypeOf()</code> method returns the prototype of the specified object.</p>
<pre><code class="language-jsx">let person1 = {};

let person2 = Object.create(person1);

console.log(Object.getPrototypeOf(person2) === person1);
// true

console.log(person2 === person1);
// false
</code></pre>
</li>
<li>
<p>The #<code>Object.setPrototypeOf()</code>is same as <code>Object.create()</code>.</p>
<pre><code class="language-jsx">let animal = {
    eat: true,
    sleep: true
}

let animal2 = {
    eat: false
}

let rabbit = Object.create(animal);

console.log(rabbit.eat);
// true

Object.setPrototypeOf(rabbit, animal2);

console.log(rabbit.eat);
// false

console.log(rabbit.sleep);
// undefine
</code></pre>
</li>
<li>
<p>Show the <code>Object</code>information.</p>
<ul>
<li>
<p>Returns property name.</p>
<ul>
<li>
<p>#<code>Object.keys</code></p>
<pre><code class="language-jsx">const object1 = {
  a: 'somestring',
  b: 42,
  c: false
};

console.log(Object.keys(object1));
// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
</code></pre>
</li>
<li>
<p>#<code>Object.getOwnPropertyNames()</code></p>
<pre><code class="language-jsx">const object1 = {
  a: 1,
  b: 2,
  c: 3
};

console.log(Object.getOwnPropertyNames(object1));
// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
</code></pre>
</li>
</ul>
</li>
<li>
<p>#<code>Object.values</code>returns property value.</p>
<pre><code class="language-jsx">const object1 = {
  a: 'somestring',
  b: 42,
  c: false
};

console.log(Object.values(object1));
// expected output: Array [&quot;somestring&quot;, 42, false]
</code></pre>
</li>
<li>
<p><code>Object.entries()</code>returns both property name &amp; value.</p>
<pre><code class="language-jsx">const object1 = {
  a: 'somestring',
  b: 42
};

for (const [key, value] of Object.entries(object1)) {
  console.log(`${key}: ${value}`);
}

// expected output:
// &quot;a: somestring&quot;
// &quot;b: 42&quot;
// order is not guaranteed
</code></pre>
</li>
</ul>
</li>
<li>
<p>The #<code>Object.getOwnPropertySymbols()</code> method returns an array of all symbol properties found directly upon a given object.</p>
<pre><code class="language-jsx">const object1 = {};
const a = Symbol('a');
const b = Symbol.for('b');

object1[a] = 'localSymbol';
object1[b] = 'globalSymbol';

const objectSymbols = Object.getOwnPropertySymbols(object1);

console.log(objectSymbols.length);
// expected output: 2
</code></pre>
</li>
<li>
<p>The static #<code>Reflect.ownKeys()</code> method returns an array of the target object’s own property keys.</p>
<pre><code class="language-jsx">const object1 = {
  property1: 42,
  property2: 13
};

const array1 = [];

console.log(Reflect.ownKeys(object1));
// expected output: Array [&quot;property1&quot;, &quot;property2&quot;]

console.log(Reflect.ownKeys(array1));
// expected output: Array [&quot;length&quot;]
</code></pre>
</li>
<li>
<p>#<code>obj.hasOwnProperty()</code> returns <code>true</code> if <code>Object</code> has its own (not inherited) key named key.</p>
<pre><code class="language-jsx">const object1 = {};
object1.property1 = 42;

console.log(object1.hasOwnProperty('property1'));
// expected output: true

console.log(object1.hasOwnProperty('toString'));
// expected output: false

console.log(object1.hasOwnProperty('hasOwnProperty'));
// expected output: false
</code></pre>
</li>
<li>
<p>#<code>Object.assign()</code> copy all the value from two object and transfers into one.</p>
<pre><code class="language-jsx">let object1 = { a: 1, b: 2 };
let object2 = { b: 2, c: 3 };

let superObj = Object.assign(object1, object2);

console.log(object1);
// {a: 1, b: 2, c: 3}

console.log(object2);
// {b: 2, c: 3}

console.log(superObj);
// {a: 1, b: 2, c: 3}
</code></pre>
</li>
<li>
<p><code>Object.fromEntries</code> Object from Map.</p>
<pre><code class="language-jsx">let recipeMap = new Map([
  ['cucumber', 500],
  ['tomatoes', 350],
  ['onion',    50]
]);
let prices = Object.fromEntries(recipeMap);
console.log(prices.onion);
// 50
</code></pre>
</li>
</ul>
<h2>Map</h2>
<ul>
<li>
<p>Basics with <code>Map()</code>, <code>has()</code>, <code>get()</code>, &amp; <code>set()</code></p>
<pre><code class="language-jsx">let recipeMap = new Map([
  ['cucumber', 500],
  ['tomatoes', 350],
  ['onion',    50]
]);
recipeMap.set('garilica',    60)
		 .set('others', 100);
console.log(recipeMap.has('others'));
// true
console.log(recipeMap.get('onion'));
// 50
</code></pre>
</li>
<li>
<p>Run <code>Map()</code> iterator with <code>keys()</code>, <code>value()</code> &amp; <code>entries()</code></p>
<pre><code class="language-jsx">let recipeMap = new Map([
  ['cucumber', 500],
  ['tomatoes', 350],
  ['onion',    50]
]);
let recipeEntries = recipeMap.entries();
console.log(recipeEntries.next().value);
// [&quot;cucumber&quot;, 500]
console.log(recipeEntries.next().value);
// [&quot;tomatoes&quot;, 350]
let recipeValue = recipeMap.value();
console.log(recipeValue.next().value);
// 500
let recipeKeys = recipeMap.keys();
console.log(recipeKeys.next().value);
// &quot;cucumber&quot;
</code></pre>
</li>
<li>
<p>Delete the <code>Map()</code> entries with <code>delete()</code> &amp; <code>clear()</code>.</p>
<pre><code class="language-jsx">let recipeMap = new Map([
  ['cucumber', 500],
  ['tomatoes', 350],
  ['onion',    50]
]);
recipeMap.delete()
console.log(recipeMap.size);
// 2
recipeMap.clear()
console.log(recipeMap.size);
// 0
</code></pre>
</li>
<li>
<p>Length of <code>Map()</code> with <code>size</code>.</p>
<pre><code class="language-jsx">let recipeMap = new Map([
  ['cucumber', 500],
  ['tomatoes', 350],
  ['onion',    50]
]);
console.log(recipeMap.size);
// 3
</code></pre>
</li>
<li>
<p>Random Number with <code>Math.random()</code></p>
<pre><code class="language-jsx">// With ceil
for (let i = 0; i &lt; 9; i = Math.ceil(Math.random() * 10)) {
    console.log(i);
}
// With floor (only goes to 0 to 9)
for (let i = 0; i &lt; 9; i = Math.floor(Math.random() * 10)) {
    console.log(i);
}
</code></pre>
</li>
</ul>
<h2>Math</h2>
<ul>
<li>
<p><code>Math</code> is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.</p>
<p><a href="/notes/The%20JavaScript%20language%20dda21ff2e0dc4987a0af85b5e6efb600/Math%20d81dc67853fc4521a32f51d9ff504b89.csv">Math</a></p>
</li>
</ul>
<h2>Number</h2>
<ul>
<li>
<p>Fixed the Float number <code>toFixed()</code></p>
<pre><code class="language-jsx">let n = 1.23456;
alert( n.toFixed(2) ); // 1.23
</code></pre>
</li>
</ul>
<h2>String</h2>
<ul>
<li>
<p>Escape notation</p>
<ul>
<li><code>\n</code>New line</li>
<li><code>\r</code>Carriage return: not used alone. Windows text files use a combination of two characters \r\n to represent a line break.</li>
<li><code>\', \&quot;</code>Quotes</li>
<li><code>\\</code>Backslash</li>
<li><code>\t</code>Tab</li>
<li><code>\b, \f, \v</code> Backspace, Form Feed, Vertical Tab – kept for compatibility, not used nowadays.</li>
<li><code>\xXX</code>Unicode character with the given hexadecimal Unicode XX, e.g. ‘\x7A’ is the same as ‘z’.</li>
<li><code>\uXXXX</code>A Unicode symbol with the hex code XXXX in UTF-16 encoding, for instance \u00A9 – is a Unicode for the copyright symbol :copyright:. It must be exactly 4 hex digits.</li>
<li><code>\u{X…XXXXXX}</code> <strong>(1 to 6 hex characters)</strong> A Unicode symbol with the given UTF-32 encoding. Some rare characters are encoded with two Unicode symbols, taking 4 bytes. This way we can insert long codes.</li>
</ul>
</li>
<li>
<p><code>padStart</code> and takes the desired length and padding character as arguments.</p>
<pre><code class="language-jsx">console.log(String(6).padStart(3, &quot;0&quot;));
// → 006
</code></pre>
</li>
<li>
<p>Make Array a String with <code>toString</code>.</p>
<pre><code class="language-jsx">console.log([1, 2].toString());
// 1,2
</code></pre>
</li>
<li>
<p>Search for a specific value with <code>lastIndexOf</code> &amp; <code>indexOf</code></p>
<pre><code class="language-jsx">let num = [1, 2, 3, 2, 1];
console.log(num.indexOf(2));
// 1
console.log(num.lastIndexOf(1));
// 4
console.log(&quot;coconut&quot;.indexOf(&quot;co&quot;));
// 0
console.log(&quot;coconut&quot;.indexOf(&quot;co&quot;, 1))
// 3
</code></pre>
</li>
<li>
<p>Split the string with <code>split</code>.</p>
<pre><code class="language-jsx">let sentence = &quot;Secretarybirds.specialize.in.stomping&quot;;
let words = sentence.split(&quot;.&quot;);
console.log(words);
// → [&quot;Secretarybirds&quot;, &quot;specialize&quot;, &quot;in&quot;, &quot;stomping&quot;]
console.log(words.join(&quot;. &quot;));
// → Secretarybirds. specialize. in. stomping
</code></pre>
</li>
<li>
<p>Upper and Lowercase with <code>toUpperCase()</code> &amp; <code>toLowerCase</code>.</p>
<pre><code class="language-jsx">let word = &quot;This is Upper Case&quot;;
console.log(word.toUpperCase());
// THIS IS UPPER CASE
let word = &quot;This is Lower Case&quot;;
console.log(word.toLowerCase());
// this is lower case
</code></pre>
</li>
<li>
<p>Remove whitespace with <code>trim</code>.</p>
<pre><code class="language-jsx">console.log(&quot;  okay \n &quot;.trim());
// → okay
</code></pre>
</li>
<li>
<p>Repeated with <code>repeat</code></p>
<pre><code class="language-jsx">console.log(&quot;/&quot; + &quot;*&quot;.repeat(10) + &quot;\n&quot; + &quot;@Gii\n&quot; + &quot;*&quot;.repeat(10) + &quot;/&quot;);
/**********
@Gii
**********/
</code></pre>
</li>
<li>
<p>To get a character at position with <code>charAt()</code></p>
<pre><code class="language-jsx">let str = &quot;hello&quot;
console.log(str[1]);
// 1
console.log(str.charAt(1));
// 1
</code></pre>
</li>
<li>
<p>Check if it contains the string in start and end with <code>startWith()</code> &amp; <code>endWith()</code>.</p>
<pre><code class="language-jsx">alert( &quot;Widget&quot;.startsWith(&quot;Wid&quot;) );
// true
alert( &quot;Widget&quot;.endsWith(&quot;get&quot;) );
// true
</code></pre>
</li>
<li>
<p>Checks every array with <code>every()</code>.</p>
<pre><code class="language-jsx">const formula = n =&gt; n % 2 === 0;
[2, 4, 6, 8, 10].every(formula);
// true
[2, 3, 6, 8, 10].every(formula);
// false
</code></pre>
</li>
<li>
<p>Change value of array with <code>splice()</code>.</p>
<pre><code class="language-jsx">const meetingWords = [&quot;hi&quot;, &quot;hello&quot;, &quot;whats up&quot;, &quot;how are you&quot;];
const newMeetingWords = [&quot;ohh hello&quot;, &quot;nice to meet you&quot;]
meetingWords.splice(1, 2, newMeetingWords);
console.log(meetingWords);
// [&quot;hi&quot;, [&quot;ohh hello&quot;, &quot;nice to meet you&quot;], &quot;how are you&quot;]
</code></pre>
</li>
<li>
<p>Combine array in the array with <code>flat()</code>.</p>
<pre><code class="language-jsx">onst meetingWords = [&quot;hi&quot;, [&quot;ohh hello&quot;, &quot;nice to meet you&quot;], &quot;how are you&quot;];
console.log(meetingWords.flat());
// [&quot;hi&quot;, &quot;ohh hello&quot;, &quot;nice to meet you&quot;, &quot;how are you&quot;]
</code></pre>
</li>
<li>
<p>Manipulate Arrays with <code>push()</code> &amp; <code>pop()</code>.</p>
<pre><code class="language-jsx">let num = [1, 2, 3];
num.push(4);
// Adds 4 in last in seqnce
console.log(num);
// [1, 2, 3, 4]
console.log(num.pop()); // Delete's the 4 for seqnce
// 4
console.log(num);
// [1, 2, 3]
</code></pre>
</li>
<li>
<p>Changes all elements in an array to a static value with <code>fill()</code>.</p>
<pre><code class="language-jsx">const array1 = [1, 2, 3, 4];
const i = array1.indexOf(2);
console.log(array1.fill(&quot;hi&quot;, i));
// [1, &quot;hi&quot;, &quot;hi&quot;, &quot;hi&quot;]
console.log(array1.fill(&quot;hi&quot;, i, i+1));
// [1, &quot;hi&quot;, 3, 4]
</code></pre>
<h3><code>forEach()</code> inline loop</h3>
<pre><code class="language-js">[&quot;A&quot;, &quot;B&quot;].forEach(l =&gt; console.log(l));
// A
// B
</code></pre>
</li>
<li>
<p><code>filter()</code> to <code>if()</code> in inline.</p>
<pre><code class="language-jsx">const numArray = [1, 2, 3, 4, 5];
console.log(numArray.filter(n =&gt; n%2 === 0));
// [2, 4]
</code></pre>
</li>
<li>
<p><code>map()</code> creates a new array.</p>
<pre><code class="language-jsx">const array1 = [1, 4, 9, 16];
const map1 = array1.map(x =&gt; x * 2);
console.log(map1);
// Array [2, 8, 18, 32]
</code></pre>
</li>
<li>
<p><code>some()</code> to find <code>true</code> &amp; <code>false</code>.</p>
<pre><code class="language-jsx">const array = [1, 2, 3, 4, 5];
console.log(array.some(l =&gt; l % 2 == 0));
// true
</code></pre>
</li>
<li>
<p>Shallow copies part of an array to another location <code>copyWithin()</code>.</p>
<pre><code class="language-jsx">const array1 = ['a', 'b', 'c', 'd', 'e'];
console.log(array1.copyWithin(0, 3, 4));
// [&quot;d&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]
// copy to index 1 all elements from index 3 to the end
console.log(array1.copyWithin(1, 3));
// [&quot;d&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;e&quot;]
</code></pre>
</li>
<li>
<p>Inline calculation <code>reduce()</code>.</p>
<pre><code class="language-jsx">const array1 = [1, 2, 3, 4];
const reducer = (a, b) =&gt; a + b;
console.log(array1.reduce(reducer));
// 10
console.log(array1.reduce(reducer, 5));
// 15
</code></pre>
</li>
<li>
<p>Combine value with <code>concat()</code>.</p>
<pre><code class="language-jsx">let arrays = [[1, 2, 3], [4, 5], [6]];
console.log(arrays.reduce((a, b) =&gt; a.concat(b)))
// [1, 2, 3, 4, 5, 6]
</code></pre>
</li>
</ul>
<h2>Global Object</h2>
<ul>
<li>
<p>The <code>WeakSet</code> object lets you store weakly held objects in a collection.</p>
<pre><code class="language-jsx">// WeakSet
let visitedSet = new WeakSet();
let john = { name: &quot;John&quot; };
visitedSet.add(john);
console.log(visitedSet.has(john));
// true
john = null;
console.log(visitedSet.has(john));
// fase
// Set
visitedSet = new Set();
visitedSet.add(john);
john = { name: &quot;John&quot; };
console.log(visitedSet.has(john));
// true
john = null;
console.log(visitedSet.has(john));
// true
</code></pre>
</li>
<li>
<p>The <code>WeakMap</code> object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.</p>
<pre><code class="language-jsx">// :file_folder: cache.js
let cache = new Map();
// calculate and remember the result
function process(obj) {
  if (!cache.has(obj)) {
    let result = /* calculations of the result for */ obj;
    cache.set(obj, result);
  }
  return cache.get(obj);
}
// Now we use process() in another file:
// :file_folder: main.js
let obj = {/* let's say we have an object */};
let result1 = process(obj); // calculated
// ...later, from another place of the code...
let result2 = process(obj); // remembered result taken from cache
// ...later, when the object is not needed any more:
obj = null;
alert(cache.size); // 1 (Ouch! The object is still in cache, taking memory!)
</code></pre>
</li>
<li>
<p>Convert string into number with <code>parseInt</code>.</p>
<pre><code class="language-jsx">function input(value) {
	let valueInt = parseInt(value);
	return valueInt * 2;
}
console.log(input(3));
// 6
</code></pre>
</li>
</ul>
<h2>Symbol</h2>
<ul>
<li>
<p>Symbol into Method.</p>
<pre><code class="language-jsx">let sym = Symbol(&quot;123&quot;);
let met = {
	[sym]() {return &quot;This is Symbol&quot;}
}
console.log(met[sym]());
</code></pre>
</li>
<li>
<p>Global symbols with <code>Symbol.for()</code>.</p>
<pre><code class="language-jsx">let id = Symbol.for(&quot;id&quot;);
let idAgain = Symbol.for(&quot;id&quot;);
console.log( id === idAgain );
// true
</code></pre>
</li>
<li>
<p>Global symbol key with <code>Symbol.keyFor()</code>.</p>
<pre><code class="language-jsx">et id = Symbol.for(&quot;id&quot;);
console.log( Symbol.keyFor(id));
// id
</code></pre>
</li>
<li>
<p>The iterator interface in <code>Symbol.iterator()</code></p>
<pre><code class="language-jsx">let word = &quot;in&quot;;
let ite = word[Symbol.iterator]();
console.log(ite.next());
// {value: &quot;i&quot;, done: false}
console.log(ite.next().value);
// n
console.log(ite.next());
// {value: undefined, done: true}
console.log(ite.next().done);
// true
let array = [&quot;inside&quot;, &quot;outside&quot;];
ite = array[Symbol.iterator]();
console.log(ite.next().value);
// inside
</code></pre>
</li>
</ul>
<h2>Error</h2>
<ul>
<li>
<p>Extending Error</p>
<pre><code class="language-jsx">class TrueError extends Error {
    constructor(name, message) {
        super(message);
        this.name = name;
    }
}

try {
    test();
} catch(err) {
    if ( err instanceof TrueError) {
        console.log( err.name );
    }
    if ( err instanceof Error ) {
        console.log( err.message );
    }
} finally {
    console.log(&quot;Runed&quot;);
}

// TrueError
// Not a real error.
// Runed
</code></pre>
</li>
<li>
<p>❓Extending Error can <code>extends</code>other error also</p>
<pre><code class="language-jsx">class FormatError extends SyntaxError {
    constructor(message) {
        super(message);
        this.name = &quot;FormatError&quot;;
        this.stack = &quot;Stack&quot;;
    }
}

let err = new FormatError(&quot;Formatting error&quot;);

alert( err.message ); // Formatting error
alert( err.name ); // FormatError
alert( err.stack ); // stack

alert( err instanceof FormatError ); // true
alert( err instanceof SyntaxError ); // true (because inherits from SyntaxError)
</code></pre>
</li>
<li>
<p>Error with <code>if...else</code></p>
<pre><code class="language-jsx">try {
    NotDefine();
} catch(err) {
    console.log( err.name === &quot;ReferenceError&quot; );
}

// true
</code></pre>
</li>
</ul>
<h1>Class</h1>
<ul>
<li>
<p>What class <code>User {...}</code> construct really does is:</p>
<ol>
<li>Creates a function named <code>User</code>, that becomes the result of the class declaration. The function code is taken from the <code>constructor</code> method (assumed empty if we don’t write such method).</li>
<li>Stores class methods, such as <code>sayHi</code>, in <code>User.prototype</code>.</li>
</ol>
<pre><code class="language-jsx">class User{
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
    userInfo() {
        console.log(`Name: ${this.name}\n Age: ${this.age}`);
    }
}

let jone = new User(&quot;Jone Funzo&quot;, 30);

console.log(jone.age);
// 30

console.log(jone.userInfo());
// Name: Jone Funzo
 Age: 30
</code></pre>
</li>
<li>
<p>Just like functions, classes can be defined inside another variable expression, passed around, returned, assigned, etc.</p>
<pre><code class="language-jsx">const Use = class {
    constructor(name) {
        this.name = name;
    }
    sayHi() {
        console.log(this.name);
    }
}

let use = new Use(&quot;Jonney&quot;);

use.sayHi()
// Jonney
</code></pre>
</li>
<li>
<p>Class with also having function expression with it.</p>
<pre><code class="language-jsx">class User {
    constructor(name) {
        this.name = name;
    }
    sayHi(age) {
        console.log(this.name + ' ' + age);
    }
}

let me = new User(&quot;James&quot;);

console.log(me.sayHi(32));
// James 32
</code></pre>
</li>
<li>
<p>Function with <code>class</code> inside it.</p>
<pre><code class="language-jsx">function makeClass(word) {
	return class {
		sayHi() {
		console.log(word);
		}
	}
}

let hello = new makeClass(&quot;How are you?&quot;);

hello().sayHi();
// How are you?
</code></pre>
</li>
<li>
<p>#<code>getter</code> &amp; #<code>setter</code>in the class.</p>
<pre><code class="language-jsx">class User {
    constructor(name) {
        this.name = name;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        if (value &gt; 4) {
            return &quot;Too short name!&quot;;
        }
        this._name = value;
    }
}

let user = new User(&quot;Jone&quot;);

user.name
</code></pre>
</li>
<li>
<p>Using <code>class</code>without <code>constructor</code>.</p>
<pre><code class="language-jsx">class User {
	name = &quot;Joey&quot;;
	age = 32;

	info() {
		console.log(`${this.name} age is ${this.age}`);
	}
}

let joey = new User;

console.log(joey.name);
// Joey

console.log(joey.info());
// Joey age is 32
</code></pre>
</li>
<li>
<p>#<code>extents</code>information.</p>
<ul>
<li>
<p><code>extents</code>to connect two classes together.</p>
<pre><code class="language-jsx">class Animal {
    constructor(name) {
        this.name = name;
    }
    walk() {
        console.log(`${this.name} can walk.`);
    }
}

class Birds extends Animal {
    fly() {
        console.log(`${this.name} can fly`);
    }
}

let lion = new Animal(&quot;Lion&quot;);
console.log(lion.walk());
// Lion can walk
// console.log(lion.fly()); woldn't run
// Error

let pigions = new Birds(&quot;Pigions&quot;);
console.log(pigions.walk());
// Pigions can walk
console.log(pigions.fly());
// Pigions can fly
</code></pre>
</li>
<li>
<p>#<code>super.variable</code>shows the <code>extents</code>prenat variable result.</p>
<ul>
<li><code>super</code>don’t work with arrow function(<code>⇒</code>).</li>
</ul>
<pre><code class="language-jsx">class Animal {
    constructor(name) {
        this.name = name;
    }
    place() {
        return `Londan`;
    }
}

class Rabbit extends Animal {
    place() {
        return `Londan`;
    }
    travel() {
        console.log(`${this.place()} to ${super.place()}`);
    }
}

let rabbit = new Rabbit(&quot;Jonney&quot;);

rabbit.travel();
</code></pre>
</li>
<li>
<p><code>extents</code> connect with <code>super()</code>to bypass parental <code>constructor</code>.</p>
<pre><code class="language-jsx">class Animal {
    constructor(name) {
        this.speed = 0;
        this.name = name;
    }
}

class Reddit extends Animal {
    constructor(name, age) {
        super(name);
        this.age = age;
    }
    run() {
        console.log(`That ${this.name} is ${this.age} age and running.`);
    }
}

let reddit = new Reddit(&quot;White Rabbit&quot;, 23);

reddit.run()
// That White Rabbit is 23 age and running.
</code></pre>
</li>
</ul>
</li>
<li>
<p>Private properties and methods to secure the overwriting.</p>
<pre><code class="language-jsx">class Cla {
    #private = 0;

    #privateMessage() {
        console.log(&quot;You unlock it WoW.&quot;);
    }

    lockMessage() {
        console.log(this.#privateMessage());
    }
}

let cla = new Cla;

cla.lockMessage();
// You unlock it WoW.

console.log(cla.private);
// Error

console.log(cla.privateMessage());
// Erro
</code></pre>
</li>
<li>
<p>Classes with built-in classes.</p>
<pre><code class="language-jsx">class PowerArray extends Array {
    number = 20;

    add() {
        return 2 + 2;
    }
}

let powerArray = new PowerArray(1, 2, 3, 4);

console.log(powerArray.length);
// 4

console.log(powerArray.number);
// 20

console.log(powerArray.add());
// 4
</code></pre>
</li>
<li>
<p>Make the mixin with object and use with class.</p>
<pre><code class="language-jsx">// Mixin
let myMixin = {
	sayUser(name) {
		console.log(`${name} is ${this.age} years old.`);
	}
}

class Jonney {
	age = 32;
	test = true;
}

Object.assign(Jonney.prototype, myMixin);

let jonney = new Jonney();

jonney.sayUser(&quot;Jonney&quot;);
// Jonney
console.log(jonney.test);
// true
</code></pre>
</li>
<li>
<p><code>static</code>methods are called directly on the class without creating an instance/object of the class.</p>
<pre><code class="language-jsx">class Car {
	static myCars(name) {
		console.log(name);
	}
	static NumCars = 3;
}

console.log(Car.NumCars = 4);
// 4

Car.myCars(&quot;Ford&quot;);
</code></pre>
</li>
<li>
<p>#<code>Symbol.hasInstance</code>is well-known symbol is used to determine if a constructor object recognizes an object as its instance.</p>
<pre><code class="language-jsx">class TrueOr {
    static [Symbol.hasInstance](obj) {
        return true;
    }
}

obj = {
    eat: false
}

console.log(obj instanceof TrueOr);
// true

console.log(Array instanceof TrueOr);
// true

class TrueOr {
    static [Symbol.hasInstance](obj) {
        if(obj.eat) return true; // changed
    }
}

cosnole.log(obj instanceof TrueOr);
// true
</code></pre>
</li>
</ul>
<h1>Expressions and operators</h1>
<ul>
<li>
<p>The #<code>new</code> syntax</p>
<ul>
<li>
<p>The function is created with the arguments <code>arg1...argN</code> and the given function Body.</p>
<pre><code class="language-jsx">let sum = new Function('a', 'b', 'return a + b');

alert( sum(1, 2) ); // 3
</code></pre>
</li>
<li>
<p>When a function is created using a new Function, its <code>[[Environment]]</code> is set to reference not the current Lexical Environment, but the global one.</p>
<pre><code class="language-jsx">function getFunc() {
  let value = &quot;test&quot;;

  let func = new Function('alert(value)');

  return func;
}

getFunc()(); // error: value is not defined
</code></pre>
</li>
<li>
<p>Turn <code>function</code> into <code>Object</code>.</p>
<pre><code class="language-jsx">function User(name, age) {
	this.name = name;
	this.age = age;
}

let ravi = new User(&quot;Ravi Sharma&quot;, 25);

console.log(ravi.name);
// Ravi Sharma
</code></pre>
</li>
</ul>
</li>
<li>
<p>#<code>instanceof</code>check whether an object belongs to a certain class or not.</p>
<pre><code class="language-jsx">console.log([] instanceof Array);
// true

console.log({} instanceof Symbol);
// false

console.log(Array instanceof Object);
// true
</code></pre>
</li>
<li>
<p>Change the location of function with <code>this</code> &amp; <code>call</code>.</p>
<pre><code class="language-jsx">function speak(line) {
  console.log(`The ${this.type} rabbit says '${line}'`);
}
let hungryRabbit = {type: &quot;hungry&quot;, speak};
hungryRabbit.speak(&quot;I could use a carrot right now.&quot;);
// The hungry rabbit says 'I could use a carrot right now.'
speak.call(hungryRabbit, &quot;Burp!&quot;);
// → The hungry rabbit says 'Burp!'
</code></pre>
</li>
<li>
<p>Optional chaining with <code>?.</code></p>
<pre><code class="language-jsx">const user = {
	name = &quot;aav&quot;;
}
console.log(user?.name);
// aav
console.log(user?.age);
// undefine
</code></pre>
</li>
<li>
<p>Converts number-string to number with <code>+</code></p>
<pre><code class="language-jsx">console.log(+true);
// 1
console.log(+false);
// 0
let x = &quot;1&quot;, y = &quot;2&quot;;
console.log(x + y);
// 12
console.log(+x + +y);
// 3
</code></pre>
</li>
<li>
<p><code>~</code> Adds +1 in the number.</p>
<pre><code class="language-jsx">console.log(~1);
// 2
</code></pre>
</li>
</ul>
<h1>Statements and declarations</h1>
<ul>
<li>
<p><code>import</code> &amp; <code>export</code></p>
<ul>
<li>
<p>Module import with <code>require()</code></p>
<pre><code class="language-jsx">// sayHi.js
function sayHi(user) {
	return `Hello ${user}`;
}

module.exports = { sayHi };
</code></pre>
<pre><code class="language-jsx">// main.js

let hi = require('./say');

console.log(hi.sayHi(&quot;AAV&quot;));
</code></pre>
</li>
<li>
<p>Normal module</p>
<pre><code class="language-jsx">// 📁 sayHi.js
export function sayHi(user) {
  alert(`Hello, ${user}!`);
}
</code></pre>
<pre><code class="language-jsx">// 📁 main.js
import {sayHi} from './sayHi.js';

alert(sayHi); // function...
sayHi('John'); // Hello, John!
</code></pre>
</li>
<li>
<p>HTML file Module</p>
<pre><code class="language-jsx">// main.js

export function sayHi(user) {
	return `Hello ${user}`;
}
</code></pre>
<pre><code class="language-html">&lt;!Doctype HTML&gt;
&lt;body&gt;
	&lt;script type=&quot;module&quot;&gt;
		import { sayHi } from './main.js'

		document.body.innerHTML = sayHi(&quot;AAV&quot;);
	&lt;/script&gt;
&lt;/body&gt;
</code></pre>
</li>
<li>
<p>if a module script is fetched from another origin, the remote server must supply a header <code>Access-Control-Allow-Origin</code> allowing the fetch.</p>
</li>
<li>
<p>The <code>import.meta</code> object exposes context-specific metadata to a JavaScript module. It contains information about the module.</p>
<pre><code class="language-html">&lt;!--index.html--&gt;

&lt;script type=&quot;module&quot; src=&quot;my-module.js&quot;&gt;&lt;/script&gt;
</code></pre>
<pre><code class="language-jsx">// my-module.js

console.log(import.meta);
</code></pre>
</li>
<li>
<p><code>import.meta.url</code> for showing URL.</p>
<pre><code class="language-html">&lt;script type=&quot;module&quot;&gt;
  alert(import.meta.url); // script url (url of the html page for an inline script)
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>export</code>and <code>import</code>multipule module.</p>
<pre><code class="language-jsx">// export.js

function sayHi(name) {
	console.log(`Hello ${name}`);
}

let days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

let user = {
	name: 'Peater Sons',
	year: 2003
}

export { sayHi, days, user }
</code></pre>
<pre><code class="language-jsx">// import.js

import { sayHi, days, user } from './export.js';

sayHi(user.name);

console.log(`This is ${days[3]}day of the month.`)
</code></pre>
</li>
<li>
<p><code>import *</code> for importing as object <strong>Note</strong>: This is preferred method to import the module.</p>
<pre><code class="language-jsx">// export.js

function sayHi(name) {
	console.log(`Hello ${name}`);
}

let days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

let user = {
	name: 'Peater Sons',
	year: 2003
}

export { sayHi, days, user }
</code></pre>
<pre><code class="language-jsx">// import.js

import * as data from './export.js';

data.sayHi(data.user.name);

console.log(`This is ${data.days[3]}day of the month.`);
</code></pre>
</li>
<li>
<p><strong>Note</strong>: To avoid that and keep the code consistent, there’s a rule that imported variables should correspond to file names.</p>
<pre><code class="language-jsx">import User from './user.js';
import LoginForm from './loginForm.js';
import func from '/path/to/func.js';
</code></pre>
</li>
<li>
<p>Change name with <code>as</code></p>
<pre><code class="language-jsx">// export.js

export class User {
	constructor(name) {
		this.name = name;
	}
}

export function sayHi(user) {
	console.log(`Hello, ${user}!`);
}
</code></pre>
<pre><code class="language-jsx">// import.js

import { User as user, sayHi as hi } from './export.js';

let id = new user('John');

hi(id.name);
</code></pre>
</li>
<li>
<p><code>import</code> anywhere in the script with Dynamic imports</p>
<pre><code class="language-jsx">// export.js

function hello() {
	console.log(`Hello`);
}

function bye() {
	console.log(`Bye`);
}

export { hello, bye };
</code></pre>
<pre><code class="language-jsx">// import .js

let { hello, bye } = await import('./export.js');

hello();
bye();
</code></pre>
</li>
</ul>
</li>
<li>
<p>Generator functions with <code>function*</code> &amp; <code>yield</code></p>
<ul>
<li>
<p>How to Generator looks?</p>
<pre><code class="language-jsx">function* generatorSequence() {
    yield 1;
    yield 2;
    return 3;
}

let generator = generatorSequence(); // Important to declare or not work

let one = generator.next();
console.log(one);
// {value: 1, done: false}

let two = generator.next();
console.log(two);
// {value: 2, done: false}

let three = generator.next();
console.log(three);
// {value: 3, done: true}
</code></pre>
</li>
<li>
<p>Generator with loop.</p>
<pre><code class="language-jsx">function* foo(index) {
    let loop = 0;
    for ( ; loop &lt; index; loop++ ) {
        yield loop;
    }
    return loop;
}

let runner = foo(3);

console.log(runner.next());
console.log(runner.next());
console.log(runner.next());
console.log(runner.next());
</code></pre>
</li>
<li>
<p>Generator with loop with <code>for...of</code></p>
<pre><code class="language-jsx">function foo(index) {

	let loop = 0;

	for ( ; loop &lt; index ; loop++ ) {
		yield loop;
	}

	return loop;
}

for ( let value of foo(5) ) {
	console.log(value);
}
/*
1
2
3
4
Don't reutrn `done: true`
*/
</code></pre>
</li>
<li>
<p>Generator with spread syntax.</p>
<pre><code class="language-jsx">function* foo(index) {

	let loop = 0;

	for ( ; loop &lt; index ; loop++ ) {
		yield loop;
	}

	return loop;
}

console.log(...foo(5));

// 0, 1, 3, 4
</code></pre>
</li>
<li>
<p>The composed generator:</p>
<pre><code class="language-jsx">function* generatePasswordCodes() {
    for ( let start = 48; start &lt;= 57; start++) yield start;
    for ( let start = 65; start &lt;= 90; start++) yield start;
    for ( let start = 97; start &lt;= 122; start++) yield start;
}

let str = ''

for ( let code of generatePasswordCodes() ) {
    str += String.fromCharCode(code);
}

console.log(str);
// 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
</code></pre>
</li>
<li>
<p>Show <code>console.log</code>first and then answer.</p>
<pre><code class="language-jsx">function* gen() {
    console.log(&quot;Slove&quot;);

    let ask1 = yield &quot;2 + 2 = ?&quot;;

    console.log(ask1);

    let ask2 = yield &quot;3 + 3 = ?&quot;;

    console.log(ask2);
}

let generator = gen();

console.log(generator.next().value);
// Slove
// 2 + 2 = ?
console.log(generator.next(4).value);
// 4
// 3 + 3 = ?
console.log(generator.next(9).done);
// 9
// true
</code></pre>
</li>
<li>
<p><code>*[Symbol.iterator]</code></p>
<pre><code class="language-jsx">let range = {
	from: 1,
	to: 5,

	*[Symbol.iterator]() {
		for( let value = this.from; value &lt;= this.to; value++ ) {
			yield value;
        }
    }
}

console.log(...range);
// 1, 2, 3, 4, 5
</code></pre>
</li>
<li>
<p><code>generator.throw</code>for Error</p>
<pre><code class="language-jsx">function* gen() {
  try {
    let result = yield &quot;2 + 2 = ?&quot;; // (1)

    alert(&quot;The execution does not reach here, because the exception is thrown above&quot;);
  } catch(e) {
    alert(e); // shows the error
  }
}

let generator = gen();

let question = generator.next().value;

generator.throw(new Error(&quot;The answer is not found in my database&quot;)); // (2)
</code></pre>
</li>
<li>
<p>Generator for random number.</p>
<pre><code class="language-jsx">function* pseudoRandom(value) {
    while(true) {
        value = value * 16807 % 2147483647;
        yield value;
    }
}

let generator = pseudoRandom(1);

alert(generator.next().value); // 16807
alert(generator.next().value); // 282475249
alert(generator.next().value); // 1622650073
</code></pre>
</li>
<li>
<p><code>async</code>Async iterable range iterable range</p>
<pre><code class="language-jsx">let range = {
	from: 1,
	to: 5,

	async *[Symbol.asyncIterator]() {
		for ( let value = this.from; value &lt;= this.to; value++ ) {
			await new Promise(reslove =&gt; setTimeout(reslove, 1000));
			yield value;
        }
	}
};

(async () =&gt; {
	for await ( let value of range ) console.log(value);
})()
/*
1
2
3
4
5
Prints ever 1s
*/
</code></pre>
</li>
</ul>
</li>
<li>
<p>#<code>await</code>&amp; <code>async</code></p>
<ul>
<li>
<p><code>async</code> a function always returns a promise.</p>
<pre><code class="language-jsx">async function f() {
    return 1;
}

f().then(message =&gt; console.log(message));
</code></pre>
</li>
<li>
<p>It can also use with <code>class</code>.</p>
<pre><code class="language-jsx">class fuc {
	async f() {
		return await Promise.resolve(1);
	}
}

new fuc()
	.f()
	.then(reslove =&gt; console.log(reslove));
</code></pre>
</li>
<li>
<p><code>await</code> makes JavaScript wait until that promise settles and returns its result.</p>
<pre><code class="language-jsx">async function f() {

    let promise = new Promise((reslove, reject) =&gt; reslove(1));

    let fun = await promise;

    return fun;
}

f().then(reslove =&gt; console.log(reslove));
// 1
</code></pre>
</li>
<li>
<p><code>await</code>can’t work without <code>async</code></p>
<pre><code class="language-jsx">function f() {
  let promise = Promise.resolve(1);
  let result = await promise; // Syntax error
}
</code></pre>
</li>
<li>
<p>Error handling</p>
<pre><code class="language-jsx">async function f() {
    let response = await fetch(&quot;https://it-is-error&quot;);
}

f().catch(console.log);
</code></pre>
</li>
<li>
<p>❓ <code>async/await</code>instad of <code>Promise</code></p>
<pre><code class="language-jsx">async function info(username, ...data_type) {

    console.log(data_type);
    let response = await fetch(`https://api.github.com/users/${username}`);
    let user = await response.json();

    if (data_type.includes(&quot;name&quot;)) console.log(`Name: ${user.name}`);
    if (data_type.includes(&quot;repo&quot;)) console.log(`Repos: ${user.public_repos}`);
    if (data_type.includes(&quot;url&quot;)) console.log(`URL: ${user.url}`);

}
</code></pre>
</li>
<li>
<p>❓ Rewrite this example code from the chapter Promises chaining using async/await instead of .then/catch.</p>
<pre><code class="language-jsx">async function loadJson(url) {
    let response = await fetch(url);
    if ( response.status == 200 ) {
        return response.json();
    } else {
        throw new Error(response.status);
    }
}

loadJson('no-such-user.json')
  .catch(alert);
</code></pre>
</li>
<li>
<p>❓ Rewrite “rethrow” with async/await</p>
<pre><code class="language-jsx">async function loadJson() {

    let name = prompt(&quot;Enter a name?&quot;);

    let response = await fetch(`https://api.github.com/users/${name}`);
    let user = await response.json()

    if (response.status == 404) {
        alert(&quot;No such user, please reenter.&quot;);
        return loadJson();
    }

    alert(`Full name: ${user.name}.`);
    return user;
}

</code></pre>
</li>
</ul>
</li>
<li>
<p><code>throw</code>catches error.</p>
<pre><code class="language-jsx">new Promise((reslove, reject) =&gt; {
	throw new SyntaxError(&quot;Nothing&quot;)
})
	.catch(error =&gt; console.log(error.name));
</code></pre>
</li>
<li>
<p>#<code>try...catch</code></p>
<ul>
<li>
<p><code>try...catch</code> that allows us to “catch” errors so the script can, instead of dying, do something more reasonable.</p>
<pre><code class="language-jsx">try {
    console.log(&quot;run&quot;);
    try {
        NotDefine();
    } catch (error) {
        console.log(&quot;Error the function is not define.&quot;);
    }
} catch (err) {
    console.log(&quot;I don't know why error is here.&quot;);
}
// run
// Error the function is not define.

</code></pre>
</li>
<li>
<p><code>try...catch</code>expression can compare with <code>instaceOf</code>.</p>
<pre><code class="language-jsx">try {
    NotDefine();
} catch(err) {
    if ( err instanceof ReferenceError ) {
        console.log(err.name);
    }
}
</code></pre>
</li>
<li>
<p>Show error message in <code>catch</code>.</p>
<pre><code class="language-jsx">try {
	NotAFunction();
} catch (e) {
	console.log(`${e} \n\t is not a function`);
}
</code></pre>
</li>
<li>
<p>#<code>try…catch…finally</code>finally will always run even there was no error.</p>
<pre><code class="language-jsx">function func() {

  try {
    if (confirm(&quot;Do you want error?&quot;)) error();
    return &quot;No Error&quot;
  } catch (err) {
    return &quot;Error&quot;;
  } finally {
    console.log(&quot;Completed and Resual is:&quot;);
  }
}

console.log( func() );

// true
/*
Completed and Resual is:
Error
*/

// false
/*
Completed and Resual is:
No Error
*/
</code></pre>
</li>
<li>
<p><code>try...finally</code>you can also run.</p>
<pre><code class="language-jsx">function func() {

  try {
    if (confirm(&quot;Do you want error?&quot;)) error();
    return &quot;No Error&quot;
  } finally {
    console.log(&quot;Completed and Resual is:&quot;);
  }
}

// true
/*
Completed and Resual is:
*/

// false
/*
Completed and Resual is:
No Error
*/
</code></pre>
</li>
<li>
<p>Error object</p>
<ul>
<li>
<p>Error <code>name</code>shows the name of the error.</p>
<pre><code class="language-jsx">try {
	NoAObject()
} catch (e) {
	console.log(e.name);
}
// ReferenceError
</code></pre>
</li>
<li>
<p>Error <code>message</code>textual message about error details.</p>
<pre><code class="language-jsx">try {
	NotAObject();
} catch (e) {
	console.log(e.message);
}
// NotAObject is not defined
</code></pre>
</li>
<li>
<p>Error <code>stack</code>: a string with information about the sequence of nested calls that led to the error. Used for debugging purposes.</p>
<pre><code class="language-jsx">try {
	NotAObject();
} catch (e) {
	console.log(e.stack);
}

/*
	ReferenceError: NotAObject is not defined
	    at &lt;anonymous&gt;:2:2
*/
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1>Web APIs</h1>
<h2>Fetch</h2>
<ul>
<li>
<p><code>fetch</code>use web api in json.</p>
<pre><code class="language-jsx">let userName = prompt(&quot;What is your username?&quot;, &quot;aav&quot;);

fetch(`https://api.github.com/users/${userName}`)
    .then(github =&gt; github.json())
    .then(github =&gt; console.log(github.public_repos));
</code></pre>
</li>
</ul>
<h2>GlobalEventHandlers</h2>
<ul>
<li>
<p>The <code>onerror</code> property of the <code>GlobalEventHandlers</code> mixin is an <code>EventHandler</code> that processes error events.</p>
<pre><code class="language-jsx">&lt;script&gt;
  window.onerror = function(message, url, line, col, error) {
    alert(`${message}\n At ${line}:${col} of ${url}`);
  };

  function readData() {
    badFunc(); // Whoops, something went wrong!
  }

  readData();
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h2>Window Or WorkerGlobalScope</h2>
<ul>
<li>
<p>❓ Write a function printNumbers(from, to) that outputs a number every second, starting from and ending with to. Using <code>setTimeout</code> &amp; <code>setInterval</code>.</p>
<ul>
<li><code>setTimeout</code></li>
</ul>
<pre><code class="language-jsx">function printNumbers(from, to) {
    setTimeout(function get() {
        console.log(from++);
        if(from &lt; to) setTimeout(get(), 1000);
    }, 5000);
}

printNumbers(1, 5);
/*
1
2
3
4
5
*/
</code></pre>
<ul>
<li><code>setInterval</code></li>
</ul>
<pre><code class="language-jsx">function printNumbers(from, to) {
    timeId = setInterval(() =&gt; {
        console.log(from++);
        if(from &gt; to) clearInterval(timeId);
    }, 1000);
}
/*
1
2
3
4
5
*/
</code></pre>
</li>
<li>
<p>❓ Display Time Every 3 Second</p>
<pre><code class="language-jsx">function showTime() {

    // return new date and time
    let dateTime= new Date();

    // returns the current local time
    let time = dateTime.toLocaleTimeString();

    console.log(time)

    // display the time after 3 seconds
     setTimeout(showTime, 3000);
}

// calling the function
showTime(); // Shows the output every 3 seconds
</code></pre>
</li>
<li>
<p>The #<code>setInterval()</code> method calls a function or evaluates an expression at specified intervals (in milliseconds).</p>
<pre><code class="language-jsx">// repeat with the interval of 2 seconds
let timerId = setInterval(() =&gt; alert('tick'), 2000);

// after 5 seconds stop
setTimeout(() =&gt; { clearInterval(timerId); alert('stop'); }, 5000);
</code></pre>
</li>
<li>
<p><code>clearInterval()</code> clear the <code>setInterval()</code> execution.</p>
<pre><code class="language-jsx">// repeat with the interval of 2 seconds
let timerId = setInterval(() =&gt; alert('tick'), 2000);

// after 5 seconds stop
setTimeout(() =&gt; { clearInterval(timerId); alert('stop'); }, 5000);
</code></pre>
</li>
<li>
<p>#<code>setTimeout</code> allows us to run a function once after the interval of time.</p>
<ul>
<li>
<p>What will setTimeout show?</p>
<pre><code class="language-jsx">let i = 0;

setTimeout(() =&gt; alert(i), 100); // ?

// assume that the time to execute this function is &gt;100ms
for(let j = 0; j &lt; 100000000; j++) {
  i++;
}
</code></pre>
<p>▶️ Answer</p>
<pre><code class="language-jsx">let i = 0;

setTimeout(() =&gt; alert(i), 100); // 100000000

// assume that the time to execute this function is &gt;100ms
for(let j = 0; j &lt; 100000000; j++) {
  i++;
}
</code></pre>
</li>
<li>
<p><code>setTimeout()</code> don’t work with <code>this</code></p>
<pre><code class="language-jsx">let user = {
  firstName: &quot;John&quot;,
  sayHi() {
    alert(`Hello, ${this.firstName}!`);
  }
};

setTimeout(user.sayHi, 1000); // Hello, undefined!
</code></pre>
<ul>
<li>Solution</li>
</ul>
<pre><code class="language-jsx">let user = {
  firstName: &quot;John&quot;,
  sayHi() {
    alert(`Hello, ${this.firstName}!`);
  }
};

setTimeout(function() {
  user.sayHi(); // Hello, John!
}, 1000);
</code></pre>
</li>
</ul>
</li>
<li>
<p><code>clearTimeout()</code> clears the <code>setTimout()</code> execution.</p>
<pre><code class="language-jsx">for (let run = 1; run &lt; 5; run++) {
    if (run &lt; 3 ) {
        const runTime = setTimeout(() =&gt; {
            console.log(`Running ${run}`);
        }, 10);
    } else {
        clearTimeout(runTime);
    }
}

// Running 1
// Running 2
</code></pre>
</li>
<li>
<p><code>setImmediate()</code> will always execute before setTimeout and setImmediate. It is same as <code>setTimeout(callback,0)</code>.</p>
<pre><code class="language-jsx">eEmitter.on(&quot;event1&quot;, (a, b) =&gt; {
  setImmediate(() =&gt; {
    console.log(`${a} ${b}`);
  });
});
eEmitter.on(&quot;event2&quot;, (a, b) =&gt; {
  console.log(`${a} ${b}`);
});

for (let x = 0; x &lt; 4; x++) {
  eEmitter.emit(&quot;event1&quot;, x, &quot;b1&quot;);
  eEmitter.emit(&quot;event2&quot;, x, &quot;b2&quot;);
}

// 0 b2
// 1 b2
// 2 b2
// 3 b2
// 0 b1
// 1 b1
// 2 b1
// 3 b1
</code></pre>
</li>
</ul>
<h2>Console</h2>
<ul>
<li>
<p>The <code>console.dir()</code> displays an interactive list of the properties of the specified JavaScript object.</p>
<pre><code class="language-jsx">console.dir(Number);
/*
ƒ Number()
	EPSILON:
	2.220446049250313
	e-16
	MAX_SAFE_INTEGER: 9007199254740991
	MAX_VALUE:
	1.7976931348623157
	e+308
	MIN_SAFE_INTEGER: -9007199254740991
	MIN_VALUE:
	5
	e-324
	NEGATIVE_INFINITY: -Infinity
	NaN: NaN
	POSITIVE_INFINITY: Infinity
	arguments: (...)
	caller: (...)
	isFinite: ƒ isFinite()
	isInteger: ƒ isInteger()
	isNaN: ƒ isNaN()
	isSafeInteger: ƒ isSafeInteger()
	length: 1
	name: &quot;Number&quot;
	parseFloat: ƒ parseFloat()
	parseInt: ƒ parseInt()
	prototype: Number {0, constructor: ƒ, toExponential: ƒ, toFixed: ƒ, toPrecision: ƒ, …}
	__proto__: ƒ ()
	[[Scopes]]: Scopes[0]
*/
</code></pre>
</li>
<li>
<p>The <code>console.log()</code>shows the output in console.</p>
<pre><code class="language-jsx">cosnole.log(&quot;Hello World&quot;);
// Hello World
</code></pre>
</li>
<li>
<p>The <code>console.log()</code> shows object in table.</p>
<pre><code class="language-jsx">console.table({
  aman: {
    age: 18,
    location: &quot;Mumbai&quot;,
    country: &quot;India&quot;,
  },
  shile: {
    age: 15,
    location: &quot;punjab&quot;,
    country: &quot;India&quot;,
    dateOfYear: 2015,
  },
});
// ┌─────────┬─────┬──────────┬─────────┬────────────┐
// │ (index) │ age │ location │ country │ dateOfYear │
// ├─────────┼─────┼──────────┼─────────┼────────────┤
// │  aman   │ 18  │ 'Mumbai' │ 'India' │            │
// │  shile  │ 15  │ 'punjab' │ 'India' │    2015    │
// └─────────┴─────┴──────────┴─────────┴────────────┘
</code></pre>
</li>
<li>
<p>The <code>console.clear()</code> clears the output in the console.</p>
<pre><code class="language-jsx">console.log(&quot;Hello World&quot;);
console.clear();
console.log(&quot;Bye World&quot;);

// Bye World
</code></pre>
</li>
</ul>]]></description>
  </item>
  <item>
    <title>Browser</title>
    <link>https://anzenkodo.github.io/notes/programming/languages/javascript/browser.html</link>
    <pubDate>2022-12-16T15:08:01.802Z</pubDate>
    <description><![CDATA[<h1>Browser: Document, Events, Interfaces</h1>
<h1>Document</h1>
<h2>document.documentElement</h2>
<h2>document.body</h2>
<ul>
<li>
<p>You can only but document.body in <body> tag.</p>
<pre><code class="language-html">&lt;html&gt;

&lt;head&gt;
  &lt;script&gt;
    alert( &quot;From HEAD: &quot; + document.body ); // null, there's no &lt;body&gt; yet
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;script&gt;
    alert( &quot;From BODY: &quot; + document.body ); // HTMLBodyElement, now it exists
  &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>document.body.style</code></p>
<pre><code class="language-jsx">// change the background color to red
document.body.style.background = &quot;red&quot;;

// change it back after 1 second
setTimeout(() =&gt; document.body.style.background = &quot;&quot;, 1000);
</code></pre>
</li>
</ul>
<h2>document.head</h2>
<h2>Searching:</h2>
<ul>
<li>
<p>Live collections of <strong>getElementsBy</strong>* &amp; <strong>querySelector</strong>*</p>
<ul>
<li>All methods “getElementsBy*” return a live collection. Such collections always reflect the current state of the document and “auto-update” when it changes.</li>
</ul>
<pre><code class="language-html">&lt;div&gt;First div&lt;/div&gt;

&lt;script&gt;
  let divs = document.getElementsByTagName('div');
  alert(divs.length); // 1
&lt;/script&gt;

&lt;div&gt;Second div&lt;/div&gt;

&lt;script&gt;
  alert(divs.length); // 2
&lt;/script&gt;
</code></pre>
<ul>
<li>In contrast, querySelectorAll returns a static collection. It’s like a fixed array of elements.</li>
</ul>
<pre><code class="language-html">&lt;div&gt;First div&lt;/div&gt;

&lt;script&gt;
  let divs = document.querySelectorAll('div');
  alert(divs.length); // 1
&lt;/script&gt;

&lt;div&gt;Second div&lt;/div&gt;

&lt;script&gt;
  alert(divs.length); // 1
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>There are 6 main methods to search for nodes in DOM:</p>
<p><a href="/notes/Browser%20Document,%20Events,%20Interfaces%205b1ea1234a324530a62e17f0aecee387/Methods%20to%20Search%20bae8734b53c44a51833cba491564ef97.csv">Methods to Search</a></p>
</li>
<li>
<p>❓ Search for elements</p>
<pre><code class="language-jsx">// 1. The table with `id=&quot;age-table&quot;`.
let table = document.getElementById('age-table')

// 2. All label elements inside that table
table.getElementsByTagName('label')
// or
document.querySelectorAll('#age-table label')

// 3. The first td in that table (with the word &quot;Age&quot;)
table.rows[0].cells[0]
// or
table.getElementsByTagName('td')[0]
// or
table.querySelector('td')

// 4. The form with the name &quot;search&quot;
// assuming there's only one element with name=&quot;search&quot; in the document
let form = document.getElementsByName('search')[0]
// or, form specifically
document.querySelector('form[name=&quot;search&quot;]')

// 5. The first input in that form.
form.getElementsByTagName('input')[0]
// or
form.querySelector('input')

// 6. The last input in that form
let inputs = form.querySelectorAll('input') // find all inputs
inputs[inputs.length-1] // take the last one
</code></pre>
</li>
</ul>
<h3>getElement*</h3>
<ul>
<li>
<p>We can get id of the element using the method <code>document.getElementById(id)</code>.</p>
<pre><code class="language-html">&lt;div id=&quot;elem&quot;&gt;
	&lt;p&gt;Hello&lt;/p&gt;
	&lt;div id=&quot;elem-content&quot;&gt;World&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
document.getElementById(&quot;elem&quot;).style.background = &quot;green&quot;;
document.getElementById(&quot;elem-content&quot;).style.color = &quot;white&quot;;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>getElementsByTagName</code> method of Document interface returns an HTMLCollection of elements with the given tag name.</p>
<pre><code class="language-html">&lt;ul id=&quot;birds&quot;&gt;
  &lt;li&gt;Orange-winged parrot&lt;/li&gt;
  &lt;li class=&quot;endangered&quot;&gt;Philippine eagle&lt;/li&gt;
  &lt;li&gt;Great white pelican&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
console.log(document.getElementsByTagName(&quot;li&quot;).length);
// 3
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>getElementsByClassName</code>for finding element with class name.</p>
<pre><code class="language-html">&lt;form name=&quot;my-form&quot;&gt;
  &lt;div class=&quot;article&quot;&gt;Article&lt;/div&gt;
  &lt;div class=&quot;long article&quot;&gt;Long article&lt;/div&gt;
&lt;/form&gt;

&lt;script&gt;
	let form = document.getElementsByName('my-form')[0];

	let articles = form.getElementsByClassName('article').length;

	console.log(articles);
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h3>querySelector*</h3>
<ul>
<li>
<p><code>document.querySelectorAll(css)</code> returns all elements inside matching the given CSS selector.</p>
<pre><code class="language-html">&lt;ul&gt;
  &lt;li&gt;The&lt;/li&gt;
  &lt;li&gt;test&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;has&lt;/li&gt;
  &lt;li&gt;passed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hello World&lt;/p&gt;
&lt;script&gt;
  let elements = document.querySelectorAll('li:last-child, p');

  for (let elem of elements) {
    console.log(elem.innerHTML); // &quot;test&quot;, &quot;passed&quot;
  }
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The call to <code>document.querySelector(css)</code> returns the first element for the given CSS selector.</p>
<pre><code class="language-html">&lt;h1&gt;Contents&lt;/h1&gt;

&lt;div class=&quot;contents&quot;&gt;
  &lt;ul class=&quot;book&quot;&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;script&gt;
  let chapter = document.querySelector('.chapter'); // LI

  alert(chapter.closest('.book')); // UL
  alert(chapter.closest('.contents')); // DIV

  alert(chapter.closest('h1')); // null (because h1 is not an ancestor)
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Make external links orange</p>
<pre><code class="language-html">&lt;a name=&quot;list&quot;&gt;the list&lt;/a&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tutorial&quot;&gt;/tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;local/path&quot;&gt;local/path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;ftp://ftp.com/my.zip&quot;&gt;ftp://ftp.com/my.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org&quot;&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://internal.com/test&quot;&gt;http://internal.com/test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let link = document.querySelectorAll('a');
		for ( let links of link ) {
			if( String(links.getAttribute('href')).includes('http')) {
			  links.style.color = 'orange';
			};
		}
&lt;/script&gt;
</code></pre>
<pre><code class="language-html">&lt;a name=&quot;list&quot;&gt;the list&lt;/a&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tutorial&quot;&gt;/tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;local/path&quot;&gt;local/path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;ftp://ftp.com/my.zip&quot;&gt;ftp://ftp.com/my.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org&quot;&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://internal.com/test&quot;&gt;http://internal.com/test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let links = document.querySelectorAll('a');

	for (let link of links) {
	  let href = link.getAttribute('href');
	  if (!href) continue; // no attribute

	  if (!href.includes('://')) continue; // no protocol

	  if (href.startsWith('http://internal.com')) continue; // internal

	  link.style.color = 'orange';
	}
&lt;/script&gt;
</code></pre>
<pre><code class="language-html">&lt;a name=&quot;list&quot;&gt;the list&lt;/a&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/tutorial&quot;&gt;/tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;local/path&quot;&gt;local/path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;ftp://ftp.com/my.zip&quot;&gt;ftp://ftp.com/my.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org&quot;&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://internal.com/test&quot;&gt;http://internal.com/test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let selector = 'a[href*=&quot;://&quot;]:not([href^=&quot;http://internal.com&quot;])';
	let links = document.querySelectorAll(selector);

	links.forEach(link =&gt; link.style.color = 'orange');
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h2>Table</h2>
<ul>
<li>
<p>The <table> element supports (in addition to the given above) these properties.</p>
<ul>
<li>
<p>An example of usage:</p>
<pre><code class="language-html">&lt;table id=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;one&lt;/td&gt;&lt;td&gt;two&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;three&lt;/td&gt;&lt;td&gt;four&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
  // get td with &quot;two&quot; (first row, second column)
  let td = table.rows[0].cells[1];
  td.style.backgroundColor = &quot;red&quot;; // highlight it
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>table.rows</code> – the collection of <tr> elements of the table.</p>
</li>
<li>
<p><code>table.caption/tHead/tFoot</code> – references to elements <caption>, <thead>, <tfoot>.</p>
</li>
<li>
<p><code>table.tBodies</code> – the collection of <tbody> elements.</p>
</li>
<li>
<p><code>tr.cells</code> – the collection of <td> and <th> cells inside the given <tr>.</p>
</li>
<li>
<p><code>tr.sectionRowIndex</code> – the position (index) of the given <tr> inside the enclosing <thead>/<tbody>/<tfoot>.</p>
</li>
<li>
<p><code>tr.rowIndex</code> – the number of the <tr> in the table as a whole (including all table rows).</p>
</li>
<li>
<p><code>td.cellIndex</code> – the number of the cell inside the enclosing <tr>.</p>
</li>
</ul>
</li>
<li>
<p>❓ Select all diagonal cells</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;style&gt;
    table {
      border-collapse: collapse;
    }

    td {
      border: 1px solid black;
      padding: 3px 5px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;1:1&lt;/td&gt;
      &lt;td&gt;2:1&lt;/td&gt;
      &lt;td&gt;3:1&lt;/td&gt;
      &lt;td&gt;4:1&lt;/td&gt;
      &lt;td&gt;5:1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:2&lt;/td&gt;
      &lt;td&gt;2:2&lt;/td&gt;
      &lt;td&gt;3:2&lt;/td&gt;
      &lt;td&gt;4:2&lt;/td&gt;
      &lt;td&gt;5:2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:3&lt;/td&gt;
      &lt;td&gt;2:3&lt;/td&gt;
      &lt;td&gt;3:3&lt;/td&gt;
      &lt;td&gt;4:3&lt;/td&gt;
      &lt;td&gt;5:3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:4&lt;/td&gt;
      &lt;td&gt;2:4&lt;/td&gt;
      &lt;td&gt;3:4&lt;/td&gt;
      &lt;td&gt;4:4&lt;/td&gt;
      &lt;td&gt;5:4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1:5&lt;/td&gt;
      &lt;td&gt;2:5&lt;/td&gt;
      &lt;td&gt;3:5&lt;/td&gt;
      &lt;td&gt;4:5&lt;/td&gt;
      &lt;td&gt;5:5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  &lt;script&gt;
    let table = document.body.firstElementChild;
    for(let i = 0; i &lt; table.rows.length; i++) {
      table.rows[i].cells[i].style.background = 'red'
    }
    // your code
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
</ul>
<h2>Methods</h2>
<ul>
<li>
<p><code>Document.createElement()</code> Creates a new element with the given tag name.</p>
<pre><code class="language-html">&lt;style&gt;
.alert {
  padding: 15px;
  border: 1px solid #d6e9c6;
  border-radius: 4px;
  color: #3c763d;
  background-color: #dff0d8;
}
&lt;/style&gt;

&lt;script&gt;
  let div = document.createElement('div');
  div.className = &quot;alert&quot;;
  div.innerHTML = &quot;&lt;strong&gt;Hi there!&lt;/strong&gt; You've read an important message.&quot;;

  document.body.append(div);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Document.createTextNode()</code> Creates a new Text node. This method can be used to escape HTML characters.</p>
<pre><code class="language-jsx">function clicked(word) {
	let printWord = document.createTextNode(word);
	document.body.append(printWord);
}

let button = document.createElement('button');
button.setAttribute('onclick', 'clicked(&quot;Yes &quot;)');
button.innerHTML = 'Click Me!'
document.body.append(button)
</code></pre>
</li>
</ul>
<h1>DocumentFragment</h1>
<ul>
<li>
<p>The <code>DocumentFragment interface</code> represents a minimal document object that has no parent.</p>
<pre><code class="language-jsx">let ul = document.createElement(&quot;ul&quot;);
document.body.append(ul);

let fargment = new DocumentFragment();

function getListContent() {

	for ( let i = 1; i &lt;= 5; i++ ) {
		let li = document.createElement(&quot;li&quot;);
		li.append(i);
		fargment.append(li);
	}

	console.log(fargment);
	return fargment;
}

ul.append(getListContent());
</code></pre>
</li>
</ul>
<h1>Node</h1>
<ul>
<li>
<p>Child nodes (or children) – elements that are direct children. In other words, they are nested exactly in the given one. For instance, <head> and <body> are children of <html> element.</p>
<ul>
<li>
<p><code>childNodes</code> read-only property returns a live NodeList of child nodes of the given element where the first child node is assigned index 0.</p>
<pre><code class="language-html">&lt;html&gt;
&lt;body&gt;
  &lt;div&gt;Begin&lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;Information&lt;/li&gt;
  &lt;/ul&gt;

  &lt;div&gt;End&lt;/div&gt;

  &lt;script&gt;
    for (let i = 0; i &lt; document.body.childNodes.length; i++) {
      alert( document.body.childNodes[i] ); // Text, DIV, Text, UL, ..., SCRIPT
    }
  &lt;/script&gt;
  ...more stuff...
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>firstChild</code> read-only property returns the node’s first child in the tree, or null if the node has no children.</p>
<pre><code class="language-html">&lt;p id=&quot;para-01&quot;&gt;
  &lt;span&gt;First span&lt;/span&gt;
&lt;/p&gt;

&lt;script&gt;
  var p01 = document.getElementById('para-01');
  alert(p01.firstChild.nodeName);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>lastChild</code> read-only property returns the last child of the node.</p>
<pre><code class="language-html">var tr = document.getElementById(&quot;row1&quot;);
var corner_td = tr.lastChild;
</code></pre>
</li>
</ul>
</li>
<li>
<p>Siblings are nodes that are children of the same parent.</p>
<ul>
<li>
<p>The next sibling is in<code>nextSibling</code>.</p>
<pre><code class="language-jsx">alert( document.body.parentNode === document.documentElement ); // true
</code></pre>
</li>
<li>
<p>the previous one in<code>previousSibling</code>.</p>
<pre><code class="language-jsx">alert( document.head.nextSibling ); // HTMLBodyElement
</code></pre>
</li>
<li>
<p>The parent is available as <code>parentNode</code>.</p>
<pre><code class="language-jsx">alert( document.body.previousSibling ); // HTMLHeadElement
</code></pre>
</li>
</ul>
</li>
<li>
<p><code>nodeName</code> to show the element name.</p>
<pre><code class="language-jsx">&lt;p id=&quot;word&quot;&gt;Hello World&lt;/p&gt;
&lt;script&gt;
	let elem = document.getElementById('word');
	console.log(elem.nodeName); // P
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Node.textContent</code> Pure text.</p>
<pre><code class="language-jsx">&lt;div id=&quot;elem1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;elem2&quot;&gt;&lt;/div&gt;

&lt;script&gt;
  let name = prompt(&quot;What's your name?&quot;, &quot;&lt;b&gt;Winnie-the-Pooh!&lt;/b&gt;&quot;);

  elem1.innerHTML = name; // Winnie-the-Pooh!
  elem2.textContent = name; // &lt;b&gt;Winnie-the-Pooh!&lt;/b&gt;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓Count descendants</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;ul&gt;
    &lt;li&gt;Animals
      &lt;ul&gt;
        &lt;li&gt;Mammals
          &lt;ul&gt;
            &lt;li&gt;Cows&lt;/li&gt;
            &lt;li&gt;Donkeys&lt;/li&gt;
            &lt;li&gt;Dogs&lt;/li&gt;
            &lt;li&gt;Tigers&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Other
          &lt;ul&gt;
            &lt;li&gt;Snakes&lt;/li&gt;
            &lt;li&gt;Birds&lt;/li&gt;
            &lt;li&gt;Lizards&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Fishes
      &lt;ul&gt;
        &lt;li&gt;Aquarium
          &lt;ul&gt;
            &lt;li&gt;Guppy&lt;/li&gt;
            &lt;li&gt;Angelfish&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Sea
          &lt;ul&gt;
            &lt;li&gt;Sea trout&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
	&lt;script&gt;
		let lists = document.getElementsByTagName('li');
		for (let list of lists) {
			console.log(list.textContent);
		}
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>node.append(...nodes or strings)</code> – append nodes or strings at the end of node.</p>
<pre><code class="language-jsx">function clicked(word) {
	let printWord = document.createTextNode(word);
	document.body.append(printWord);
}

let button = document.createElement('button');
button.setAttribute('onclick', 'clicked(&quot; Yes&quot;)');
button.innerHTML = 'Click Me!'
document.body.append(button)
</code></pre>
</li>
<li>
<p><code>node.prepend(...nodes or strings)</code> – insert nodes or strings at the beginning of node.</p>
<pre><code class="language-jsx">function clicked(word) {
	let printWord = document.createTextNode(word);
	let button = document.querySelector('button');
	button.prepend(printWord);
}

let button = document.createElement('button');
button.setAttribute('onclick', 'clicked(&quot;----&gt;&quot;)');
button.innerHTML = 'Click Me!'
document.body.append(button)
</code></pre>
</li>
<li>
<p><code>node.before()</code> &amp; <code>node.after()</code>–- insert nodes or strings before &amp; after node.</p>
<pre><code class="language-html">&lt;ol id=&quot;ol&quot;&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
&lt;/ol&gt;

&lt;script&gt;
	ol.before(&quot;&lt;p&gt;&quot;);
	ol.after(&quot;&lt;/p&gt;&quot;);
	console.log(document.body.outerHTML);
	/*
	&amp;lt;p&amp;gt;&lt;ol id=&quot;ol&quot;&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
	&lt;/ol&gt;&amp;lt;/p&amp;gt;
  */
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>node.replaceWith(...nodes or strings)</code> –- replaces node with the given nodes or strings.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;ClickMe&lt;/button&gt;

&lt;p&gt;&lt;b&gt;Hello World&lt;/b&gt;&lt;/p&gt;

&lt;script&gt;
	let b = document.querySelector('b');
	function clicked() {
		b.replaceWith(&quot;Bye World&quot;);
	}
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>ParentNode</h1>
<ul>
<li>
<p>❓Show descendants in a tree.</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;ul&gt;
    &lt;li&gt;Animals
      &lt;ul&gt;
        &lt;li&gt;Mammals
          &lt;ul&gt;
            &lt;li&gt;Cows&lt;/li&gt;
            &lt;li&gt;Donkeys&lt;/li&gt;
            &lt;li&gt;Dogs&lt;/li&gt;
            &lt;li&gt;Tigers&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Other
          &lt;ul&gt;
            &lt;li&gt;Snakes&lt;/li&gt;
            &lt;li&gt;Birds&lt;/li&gt;
            &lt;li&gt;Lizards&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Fishes
      &lt;ul&gt;
        &lt;li&gt;Aquarium
          &lt;ul&gt;
            &lt;li&gt;Guppy&lt;/li&gt;
            &lt;li&gt;Angelfish&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Sea
          &lt;ul&gt;
            &lt;li&gt;Sea trout&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;script&gt;
		let li = document.getElementsByTagName('li');

		for ( let lis of li ) {
			let lisLength = lis.getElementsByTagName('li').length;

			if(!lisLength) continue;

			lis.firstChild.data += `[${lisLength}]`;
		}
	&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p>❓ Colored clock with setInterval</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;div id=&quot;clock&quot;&gt;
  &lt;span class=&quot;hour&quot;&gt;hh&lt;/span&gt;:&lt;span class=&quot;min&quot;&gt;mm&lt;/span&gt;:&lt;span class=&quot;sec&quot;&gt;ss&lt;/span&gt;
  &lt;/div&gt;

  &lt;input type=&quot;button&quot; onclick=&quot;clockStart()&quot; value=&quot;Start&quot;&gt;
  &lt;input type=&quot;button&quot; onclick=&quot;clockStop()&quot; value=&quot;Stop&quot;&gt;

	&lt;script&gt;
		function update() {
	  let clock = document.getElementById('clock');
	  let date = new Date();
	  let hours = date.getHours();
	  let minutes = date.getMinutes();
	  let seconds = date.getSeconds();

	  clock.children[0].innerHTML = hours;
	  clock.children[1].innerHTML = minutes;
	  clock.children[2].innerHTML = seconds;
	}

	let timerId;

	function clockStart() { // run the clock
	  if (!timerId) { // only set a new interval if the clock is not running
	    timerId = setInterval(update, 1000);
	  }
	  update(); // (*)
	}

	function clockStop() {
	  clearInterval(timerId);
	  timerId = null; // (**)
	}
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p>Element-only navigation:- Navigation properties listed above refer to all nodes.</p>
<ul>
<li>
<p><code>children</code> – only those children that are element nodes.</p>
<pre><code class="language-html">&lt;html&gt;
&lt;body&gt;
  &lt;div&gt;Begin&lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;Information&lt;/li&gt;
  &lt;/ul&gt;

  &lt;div&gt;End&lt;/div&gt;

  &lt;script&gt;
    for (let elem of document.body.children) {
      alert(elem); // DIV, UL, DIV, SCRIPT
    }
  &lt;/script&gt;
  ...
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p><code>firstElementChild</code>, <code>lastElementChild</code> – first and last element children.</p>
<pre><code class="language-jsx">alert( document.documentElement.parentNode ); // document
</code></pre>
</li>
<li>
<p><code>previousElementSibling</code>, <code>nextElementSibling</code> – neighbor elements.</p>
<pre><code class="language-html">&lt;div id=&quot;div-01&quot;&gt;Here is div-01&lt;/div&gt;
&lt;div id=&quot;div-02&quot;&gt;Here is div-02&lt;/div&gt;
&lt;li&gt;This is a list item&lt;/li&gt;
&lt;li&gt;This is another list item&lt;/li&gt;
&lt;div id=&quot;div-03&quot;&gt;Here is div-03&lt;/div&gt;

&lt;script&gt;
  let el = document.getElementById('div-03').previousElementSibling;
  document.write('&lt;p&gt;Siblings of div-03&lt;/p&gt;&lt;ol&gt;');
  while (el) {
    document.write('&lt;li&gt;' + el.nodeName + '&lt;/li&gt;');
    el = el.previousElementSibling;
  }
  document.write('&lt;/ol&gt;');
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>parentElement</code> – parent element.</p>
<pre><code class="language-jsx">console.log(document.head.parentElement);
/*
&lt;html lang=&quot;en&quot; class=&quot;working-hover&quot;&gt;
&lt;head&gt;…&lt;/head&gt;
&lt;body class&gt;…&lt;/body&gt;
&lt;/html&gt;
*/
</code></pre>
</li>
</ul>
</li>
</ul>
<h2>ChildNode</h2>
<ul>
<li>
<p><code>ChildNode.remove()</code> method removes the object from the tree it belongs to.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;Destroy !!!&lt;/button&gt;

&lt;p&gt;Hello World&lt;/p&gt;

&lt;script&gt;
	let button = document.querySelector('button'),
	p = document.querySelector('p');

	button.style.background = &quot;red&quot;;
	button.style.color = &quot;white&quot;;

	function clicked() {
		p.remove();
	}
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Clear the element</p>
<pre><code class="language-html">&lt;ol id=&quot;elem&quot;&gt;
  &lt;li&gt;Hello&lt;/li&gt;
  &lt;li&gt;World&lt;/li&gt;
&lt;/ol&gt;

&lt;script&gt;
	function clear(ele) {
		while (ele.firstChild) {
			ele.childNodes[1].remove();
		}
	}

	clear(document.querySelector(&quot;ol&quot;));
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Add a closing button</p>
<p><a href="https://codepen.io/fillyagioro/pen/jOydryr">https://codepen.io/fillyagioro/pen/jOydryr</a></p>
</li>
<li>
<p>The most deeply nested element that caused the event is called a target element, accessible as <code>event.target</code>.</p>
<p><a href="https://codepen.io/fillyagioro/pen/eYgxzBR">https://codepen.io/fillyagioro/pen/eYgxzBR</a></p>
</li>
<li>
<p>Stopping bubbling</p>
<p><a href="https://codepen.io/fillyagioro/pen/eYgxzBR">https://codepen.io/fillyagioro/pen/eYgxzBR</a></p>
</li>
<li>
<p>❓ Hide messages with delegation</p>
<p><a href="https://codepen.io/fillyagioro/pen/vYgPbVe">https://codepen.io/fillyagioro/pen/vYgPbVe</a></p>
</li>
</ul>
<h1>Element</h1>
<ul>
<li>
<p>The <code>matches(css)</code> method checks to see if the Element would be selected by the provided selectorString.</p>
<pre><code class="language-html">&lt;ul id=&quot;birds&quot;&gt;
  &lt;li&gt;Orange-winged parrot&lt;/li&gt;
  &lt;li class=&quot;endangered&quot;&gt;Philippine eagle&lt;/li&gt;
  &lt;li&gt;Great white pelican&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	let list = document.getElementsByTagName('li');
  for(let elem of list) {
    if(elem.matches('.endangered')) {
      console.log(elem.innerHTML);
    }
  }
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>closest()</code> method traverses the Element and its parents  until it finds a node that matches the provided selector string.</p>
<pre><code class="language-html">&lt;h1&gt;Contents&lt;/h1&gt;

&lt;div class=&quot;contents&quot;&gt;
  &lt;ul class=&quot;book&quot;&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
    &lt;li class=&quot;chapter&quot;&gt;Chapter 1&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;script&gt;
	let chapter = document.querySelector('.chapter');
	console.log(chapter.closest('.book').innerHTML);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Element.tagName</code> to show the element name.</p>
<pre><code class="language-jsx">&lt;p id=&quot;word&quot;&gt;Hello World&lt;/p&gt;
&lt;script&gt;
	let elem = document.getElementById('word');
	console.log(elem.tagName); // P
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>innerHTML</code> property allows to get the HTML inside the element as a string.</p>
<pre><code class="language-jsx">&lt;body&gt;
  &lt;p&gt;A paragraph&lt;/p&gt;
  &lt;div&gt;A div&lt;/div&gt;

  &lt;script&gt;
    alert( document.body.innerHTML ); // read the current contents
    document.body.innerHTML = 'The new BODY!'; // replace it
  &lt;/script&gt;

&lt;/body&gt;
</code></pre>
</li>
<li>
<p>The <code>outerHTML</code> property contains the full HTML of the element. That’s like innerHTML plus the element itself.</p>
<pre><code class="language-jsx">&lt;div id=&quot;elem&quot;&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;

&lt;script&gt;
  console.log(elem.outerHTML); // &lt;div id=&quot;elem&quot;&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;
	console.log(elem.innerHTML); // Hello &lt;b&gt;World&lt;/b&gt;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>getAttribute()</code> returns the elements attribute which is called.</p>
<pre><code class="language-html">&lt;div id=&quot;elem&quot; something-data=&quot;yes&quot;&gt;&lt;/div&gt;

&lt;script&gt;
	console.log(elem.getAttribute('something-data'));
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>setAttribute()</code> sets the attribute value.</p>
<pre><code class="language-html">&lt;input&gt;

&lt;script&gt;
	let input = document.querySelector('input');
	input.setAttribute('id', 'into')
	console.log(input.outerHTML);
	console.log(input.id)
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>Get attribute and there value with <code>attribute</code>.</p>
<pre><code class="language-html">&lt;input id=&quot;hello&quot; something=&quot;yes&quot;&gt;

&lt;script&gt;
	let link = document.querySelector('input');

	for ( let links of link.attributes ) {
		console.log(links.name + ' ' + links.value);
	}
	// id hello
	// something yes
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Element.insertAdjacent*</code></p>
<ul>
<li>
<p><code>Element.insertAdjacentHTML()</code> method inserts a text as HTML, into a specified position.</p>
<pre><code class="language-jsx">let ulist = document.createElement('ul');
document.body.append(ulist);

let list = document.createElement('li');

while(true) {
	let ans = String(prompt(&quot;What you wnat inside the list?&quot;));

	if (!ans) {
		break;
	}
	list.innerHTML = ans;
	ulist.insertAdjacentHTML(&quot;afterBegin&quot;, `&lt;li&gt;${ans}&lt;/li&gt;`);
}
</code></pre>
<pre><code class="language-jsx">let li = document.createElement(&quot;li&quot;);
let ul = document.querySelector(&quot;ul&quot;)
function getListContent() {
	for (let i = 5; i &gt;= 1; i--) {
	ul.insertAdjacentHTML(&quot;afterBegin&quot;, `&lt;li&gt;${i}&lt;/li&gt;`);
	}
}

getListContent();
</code></pre>
</li>
<li>
<p><code>Element.insertAdjacentText()</code> – the same syntax, but a string of text is inserted “as text” instead of HTML.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;ClickMe&lt;/button&gt;

&lt;p&gt;Hello World&lt;/p&gt;

&lt;script&gt;
	let p = document.querySelector('p');
	function clicked() {
		p.insertAdjacentText(&quot;beforeend&quot;, &quot;Bye World&quot;);
	}
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>Element.insertAdjacentElement()</code> – the same syntax, but inserts an element.</p>
<pre><code class="language-html">&lt;button onclick=&quot;clicked()&quot;&gt;ClickMe&lt;/button&gt;

&lt;p&gt;&lt;b&gt;Hello World&lt;/b&gt;&lt;/p&gt;

&lt;script&gt;
	let p = document.querySelector('p');
	let i = document.createElement('i')
	function clicked() {
		p.insertAdjacentElement(&quot;afterEnd&quot;, i);
	}
	i.innerHTML = &quot;Bye World&quot;;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p><code>&quot;beforebegin&quot;</code> – insert <code>html</code> immediately before <code>elem</code>,</p>
</li>
<li>
<p><code>&quot;afterbegin&quot;</code> – insert <code>html</code> into <code>elem</code>, at the beginning,</p>
</li>
<li>
<p><code>&quot;beforeend&quot;</code> – insert <code>html</code> into <code>elem</code>, at the end,</p>
</li>
<li>
<p><code>&quot;afterend&quot;</code> – insert <code>html</code> immediately after <code>elem</code>.</p>
</li>
</ul>
</li>
<li>
<p>❓ Insert the HTML in the list</p>
<pre><code class="language-html">&lt;ul id=&quot;ul&quot;&gt;
  &lt;li id=&quot;one&quot;&gt;1&lt;/li&gt;
  &lt;li id=&quot;two&quot;&gt;4&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
	one.insertAdjacentHTML(&quot;afterend&quot;, &quot;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&quot;);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>className</code> property of the Element interface gets and sets the value of the class attribute of the specified element.</p>
<pre><code class="language-jsx">let div = document.createElement('div');
div.className = &quot;hello&quot;;
div.innerHTML = div.className;

document.body.append(div);
</code></pre>
</li>
<li>
<p>Window sizes</p>
<ul>
<li>
<p><code>clientWidth</code> / <code>clientHeight</code> Width/height of the window.</p>
<pre><code class="language-jsx">console.log(document.documentElement.clientWidth);
console.log(document.documentElement.clientHeight);
</code></pre>
</li>
<li>
<p><code>document.documentElement.scrollWidth/scrollHeight</code> Width/height of the document.</p>
</li>
</ul>
</li>
<li>
<p>If there are no paddings, then <code>clientWidth/Height</code> is exactly the content area, inside the borders and the scrollbar (if any).</p>
<pre><code class="language-jsx">let h1 = document.body.querySelector('h1');
h1.clientHeight;
</code></pre>
</li>
<li>
<p><code>Element.scrollIntoView()</code>scroll into the view of line.</p>
<pre><code class="language-jsx">let h1 = document.body.querySelector('h1');

h1.scrollIntoView()
</code></pre>
</li>
<li>
<p><code>Element.getBoundingClientRect()</code> returns information about left, top, right, bottom, x, y, width, and height.</p>
</li>
<li>
<p><code>onmouseover</code> change element when you hover over element &amp; <code>onmouseout</code> change element when hover out over element.</p>
<p><a href="https://codepen.io/fillyagioro/pen/RwKzzxg">https://codepen.io/fillyagioro/pen/RwKzzxg</a></p>
</li>
<li>
<p><code>onmousedown</code> change element when you click over element &amp; <code>onmouseup</code> change element when click done.</p>
<p><a href="https://codepen.io/fillyagioro/pen/JjEQgRJ">https://codepen.io/fillyagioro/pen/JjEQgRJ</a></p>
</li>
<li>
<p>❓ Catch links in the element</p>
<p><a href="https://codepen.io/fillyagioro/pen/PoWrMeg">https://codepen.io/fillyagioro/pen/PoWrMeg</a></p>
</li>
</ul>
<h1>Event</h1>
<ul>
<li>
<p>The <code>preventDefault()</code> method cancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur.</p>
<p><a href="https://codepen.io/fillyagioro/pen/GRrbVBe">https://codepen.io/fillyagioro/pen/GRrbVBe</a></p>
</li>
</ul>
<h1>EventTarget</h1>
<ul>
<li>
<p>The <code>addEventListener()</code> method attaches an event handler to the specified element.</p>
<pre><code class="language-html">&lt;table id=&quot;outside&quot;&gt;
  &lt;tr&gt;&lt;td id=&quot;t1&quot;&gt;one&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td id=&quot;t2&quot;&gt;two&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;script&gt;
	let elem = document.querySelector('table');

	function change() {
		let td = document.getElementsByTagName('td');
		if (td[1].innerHTML == &quot;two&quot;) {
			td[1].innerHTML = &quot;three&quot;;
		} else {
			td[1].innerHTML = &quot;two&quot;
		}
	}

	elem.addEventListener('click', change, false)
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>Window</h1>
<ul>
<li>
<p>The method <code>scrollBy(x,y)</code> scrolls the page relative to its current position. For instance, scrollBy(0,10) scrolls the page 10px down.</p>
<pre><code class="language-jsx">window.scrollBy(0,10)
</code></pre>
</li>
<li>
<p><code>Window.scrollTo()</code> scrolls to a particular set of coordinates in the document.</p>
<pre><code class="language-jsx">window.scrollTo()
</code></pre>
</li>
</ul>
<h1>CSSStyleDeclaration.cssText</h1>
<ul>
<li>
<p>The <code>cssText</code> property of the CSSStyleDeclaration interface returns or sets the text of the element’s inline style declaration only.</p>
<pre><code class="language-jsx">let message = document.createElement('div');

message.style.cssText = &quot;background: red; color: white&quot;;

message.innerHTML = &quot;Hello, World&quot;;

document.body.append(message);
</code></pre>
</li>
</ul>
<h1>HTMLElement</h1>
<ul>
<li>
<p>Hide the element with <code>HTMLElement.hidden</code>.</p>
<pre><code class="language-jsx">&lt;div id=&quot;elem&quot;&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;
&lt;script&gt;
	let bold = elem.getElementsByTagName('b')[0];
	setInterval(() =&gt; bold.hidden = !bold.hidden, 500);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>❓ Hide on click</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;input type=&quot;button&quot; id=&quot;hider&quot; value=&quot;Click to hide the text&quot; /&gt;

  &lt;div id=&quot;text&quot;&gt;Text&lt;/div&gt;

  &lt;script&gt;
    hider.onclick = () =&gt; {
      let text = document.getElementById('text');
      text.hidden = true;
    }
  &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
<li>
<p>The style attribute is a string, but the style property is an object.</p>
<pre><code class="language-html">&lt;div id=&quot;div&quot; style=&quot;color:red;font-size:120%,al&quot;&gt;Hello&lt;/div&gt;

&lt;script&gt;
	console.log(div.style.color);
	// red
	div.style.background = &quot;green&quot;;

	console.log(div.style);
	// empty
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>The <code>HTMLElement.offsetWidth/Height</code> read-only property returns the layout width of an element as an integer.</p>
<pre><code class="language-jsx">h1 = document.body.querySelector('h1');
// h1.offsetHeight
</code></pre>
</li>
</ul>
<h1>HTMLInputElement</h1>
<ul>
<li>
<p>DOM elements also have additional properties, in particular those that depend on the class.</p>
<pre><code class="language-jsx">&lt;input type=&quot;text&quot; id=&quot;elem&quot; value=&quot;value&quot;&gt;

&lt;script&gt;
	let elem = document.getElementById('elem');
	console.log(elem.value);
	console.log(elem.type);
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>Accessing the element: this</p>
<pre><code class="language-html">&lt;button onclick=&quot;alert(this.innerHTML)&quot;&gt;Click me&lt;/button&gt;
</code></pre>
</li>
</ul>
<h1>HTMLOrForeignElement</h1>
<ul>
<li>
<p>Non-standard attributes are used to pass custom data from HTML to JavaScript, or to “mark” HTML-elements for JavaScript.</p>
<pre><code class="language-html">&lt;!-- mark the div to show &quot;name&quot; here --&gt;
&lt;div show-info=&quot;name&quot;&gt;&lt;/div&gt;
&lt;!-- and age here --&gt;
&lt;div show-info=&quot;age&quot;&gt;&lt;/div&gt;

&lt;script&gt;
	let user = {
		name: &quot;Pete&quot;,
		age: 25
	};

	 for(let div of document.querySelectorAll('[show-info]')) {
	 	let text = div.getAttribute('show-info');
		div.innerHTML = user[text];
	}
&lt;/script&gt;

</code></pre>
</li>
<li>
<p>All attributes starting with “data-” are reserved for programmers’ use. They are available in the dataset property.</p>
<pre><code class="language-html">&lt;style&gt;
  .order[data-order-state=&quot;new&quot;] {
    color: green;
  }

  .order[data-order-state=&quot;pending&quot;] {
    color: blue;
  }

  .order[data-order-state=&quot;canceled&quot;] {
    color: red;
  }
&lt;/style&gt;

&lt;div id=&quot;order&quot; class=&quot;order&quot; data-order-state=&quot;new&quot;&gt;
  A new order.
&lt;/div&gt;

&lt;script&gt;
	order.dataset.orderState = 'padding';

	console.log(order.outerHTML);
	// &lt;div id=&quot;order&quot; class=&quot;order&quot; data-order-state=&quot;padding&quot;&gt;A new order.&lt;/div&gt;
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>GlobalEventHandlers.onclick</h1>
<ul>
<li>
<p>The <code>onclick</code> event occurs when the user clicks on an element.</p>
<pre><code class="language-html">&lt;button&gt;Click Me&lt;/button&gt;

&lt;script&gt;
  let button = document.querySelector('button');

  button.onclick = () =&gt; alert(&quot;Hello World&quot;)
&lt;/script&gt;
</code></pre>
</li>
</ul>
<h1>Location</h1>
<ul>
<li><code>location</code> interface represents the location (URL) of the object it is linked to.
<ul>
<li>
<p><code>location.href</code> shows URL.</p>
<pre><code class="language-jsx">alert(location.href); // shows current URL
if (confirm(&quot;Go to Wikipedia?&quot;)) {
  location.href = &quot;https://wikipedia.org&quot;; // redirect the browser to another URL
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h1>Web Console Helpers</h1>
<ul>
<li><code>$0</code> The currently-inspected element in the page. <code>$0.style.background = 'red'</code></li>
</ul>]]></description>
  </item>
  <item>
    <title>Sample Paper 6S</title>
    <link>https://anzenkodo.github.io/notes/programming/languages/php/sample-paper-6s.html</link>
    <pubDate>2022-12-16T15:08:01.802Z</pubDate>
    <description><![CDATA[<h1><em>22619</em> - Web Based Application development with PHP</h1>
<ul>
<li><strong>Programme Name:</strong> Computer/Information Technology Engineering</li>
<li><strong>Programmecode:</strong> CO/IF</li>
<li><strong>Semester:</strong> VI Sem</li>
<li><strong>Marks:</strong> 70</li>
</ul>
<h2>Q.1) Attempt any FIVE of the following. <em>(10 Marks)</em></h2>
<h3>a) List any four advantages of PHP?</h3>
<ol>
<li>PHP is open source and free from cost.</li>
<li>It is platform independent.</li>
<li>PHP based application can run on any OS like UNIX, Linux and Windows, etc</li>
<li>Easy to learn.</li>
<li>Has built-in database connection modules.</li>
</ol>
<h3>b) State the use of <code>str_word_count</code> along with its syntax.</h3>
<ul>
<li><code>str_word_count()</code> function counts the numbers of word in a string.</li>
<li>Syntax:<pre><code>str_word_count(string,return,char)
</code></pre>
</li>
<li>Example:<pre><code class="language-php">&lt;?php
echo set_word_count(&quot;Hello World&quot;);
?&gt;
</code></pre>
O/P<pre><code>2
</code></pre>
</li>
</ul>
<h3>c) Define serialization.</h3>
<ul>
<li>Serialization of data means converting it into a string of bytes in such a way
that you can produce the original data again from the string via a process as
unserialization.</li>
<li>After you have the ability to serialize/unserialize, you can store your
serialized string anywhere and recreate a copy of the data again when needed.</li>
<li>PHP offers two functions, serialize() and unserialize(), which take a value of
any type (except type resource) and encode the value into string form and
decode again, respectively.</li>
</ul>
<h3>d) Write the syntax for creating Cookie.</h3>
<ul>
<li>To set cookie in PHP, the <code>setcookie()</code> function is used.</li>
<li>Syntex:<pre><code class="language-php">setcookie($name, $value, $expire_time, $path, $domain)
</code></pre>
</li>
<li><code>setcookie()</code> function the parameters.
<ul>
<li><strong>name</strong> - Name of the cookie, which is used with $_COOKIE function to get
value.</li>
<li><strong>value</strong> - Value of the named variable.</li>
<li><strong>expire time</strong> - Time when cookie will expire.</li>
<li><strong>path</strong> - Directory where cookie will valied.</li>
<li><strong>domain</strong> - The default server hostname.</li>
</ul>
</li>
</ul>
<h3>e) Write syntax of Connecting PHP Webpage with MySQL.</h3>
<ul>
<li>
<p>Syntex:</p>
<pre><code>mysqli_connect(host, username, password, dbname, port, socket)
</code></pre>
</li>
<li>
<p>Parameter:</p>
<ul>
<li><strong>host</strong> - Specifies a host name or an IP address.</li>
<li><strong>username</strong> -Specifies the MySQL username</li>
<li><strong>password</strong> - Specifies the MySQL password</li>
<li><strong>dbname</strong> - Specifies the default database to be used</li>
<li><strong>port</strong>  - Specifies the port number to attempt to connect to the MySQL
server</li>
<li><strong>socket</strong> - Specifies the socket or named pipe to be used</li>
</ul>
</li>
<li>
<p>Example:</p>
<pre><code class="language-php">&lt;?php
mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;/&quot;, &quot;domain.com&quot;,
	&quot;/run/mysql/mysql.sock&quot;)
</code></pre>
</li>
</ul>
<h3>f) Define GET and POST methods.</h3>
<h4>GET</h4>
<ul>
<li>It sends the encoded user information appended to the page request (to the
URL).</li>
<li>The page and the encoded information are separated by the ? character.</li>
<li>The GET method produces a long string the appears in our server logs, in the
browser location box.</li>
<li>The GET method is restricted to send up to 1024 characters only.</li>
<li>Never use GET method if we have password or other sensitive information.</li>
<li>GET cannot be used to send binary data to the server.</li>
<li>The php provides $_GET assoiative array to a access all the sent information
using GET method.</li>
<li>Example:<pre><code class="language-php">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;GET&quot;&gt;
	Name: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;
	&lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;
&lt;?php
if ($_GET[&quot;name&quot;]) {
	echo $_GET[&quot;name&quot;];
}
?&gt;
</code></pre>
</li>
<li>Output:<pre><code>Name: Joey
Submit
Joey
</code></pre>
</li>
</ul>
<h4>POST</h4>
<ul>
<li>It transfers information via HTTP header, not throought the URL.</li>
<li>The POST method does not have any restriction on data size.</li>
<li>The POST method can be used to send ASCII as well as binary data.</li>
<li>The data sent by POST  method goes through HTTP header, so security depends on
HTTP protocol.</li>
<li>By using secure HTTP, we can make sure that our information is secure.</li>
<li>The PHP provides $_POST associative array to access all the sent information
using POST method.</li>
<li>Example:<pre><code class="language-php">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;
	Name: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;
	&lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;
&lt;?php
if ($_POST[&quot;name&quot;]) {
	echo $_POST[&quot;name&quot;];
}
?&gt;
</code></pre>
</li>
<li>Output<pre><code>Name: Joey
Submit
Joey
</code></pre>
</li>
</ul>
<h3>g) State the use of <code>$</code> sign in PHP.</h3>
<ul>
<li>The $ operator in PHP is used to declare a variable.</li>
<li>A variable starts with the $ sign followed by the name of the variable.</li>
<li>Example:<pre><code class="language-php">&lt;?php
$var_name = &quot;Hello World!&quot;;
?&gt;
</code></pre>
</li>
</ul>
<h2>Q.2) Attempt any THREE of the following. <em>(12 Marks)</em></h2>
<h3>a) Write a program using foreach loop.</h3>
<pre><code class="language-php">&lt;?php
  //declare array
  $season = array (&quot;Summer&quot;, &quot;Winter&quot;, &quot;Autumn&quot;, &quot;Rainy&quot;);
  //access array elements using foreach loop
  foreach ($season as $element) {
    echo &quot;$element&quot;;
    echo &quot;&lt;/br&gt;&quot;;
  }
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Summer
Winter
Autumn
Rainy
</code></pre>
<h3>b) Explain Indexed and Associative arrays with suitable example.</h3>
<h4>Indexed arrays</h4>
<p>Indexed array: An array having only integer keys is typically referred to as an
indexed array and index arrays can store numbers, drinks and any object but
their index will be represented by number.</p>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
  // Define an indexed array
  $colors = array(&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;);
  // Printing array structure
  print_r($colors);
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Array ( [0] =&gt; Red [1] =&gt; Green [2] =&gt; Blue )
</code></pre>
<h4>Associative arrays</h4>
<p>The associative arrays are very similar to numeric arrays in terms of
functionality but they are different in terms of their index. Associative arrays
will have their index as string so that you can establish a strong association
between key and values.</p>
<pre><code class="language-php">&lt;?php
  // Define an associative array
  $ages = array(&quot;Peter&quot;=&gt;22, &quot;Clark&quot;=&gt;32, &quot;John&quot;=&gt;28);
  // Printing array structure
  print_r($ages);
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Array ( [Peter] =&gt; 22 [Clark] =&gt; 32 [John] =&gt; 28 )
</code></pre>
<h3>c) Define Introspection and explain it with suitable example.</h3>
<p>PHP Introspection is the ability of a program to examine an object’s
characteristics such as its name, parent class (if any), properties and methods.</p>
<p>Introspection  in PHP offers a useful Ability  to examine classes’ interfaces
properties methods. With introspection we can write  code that operates on any
object or class.</p>
<p><strong>Example</strong>:</p>
<pre><code class="language-php">&lt;?php
  if (class_exists('MyClass')) {
    $myclass = new MyClass();
  }
?&gt;
</code></pre>
<h3>d) Differentiate between Session and Cookies.</h3>
<table>
<thead>
<tr>
<th>SESSION</th>
<th>COOKIES</th>
</tr>
</thead>
<tbody>
<tr>
<td>Session are stored in server side</td>
<td>Cookies are stored in client browser.</td>
</tr>
<tr>
<td>Session is server resource.</td>
<td>Cookies are client-side resource.</td>
</tr>
<tr>
<td>It stores unlimeted data.</td>
<td>It stores limited data.</td>
</tr>
<tr>
<td>It holds multiple variables.</td>
<td>It doen’t hold multiple variables.</td>
</tr>
<tr>
<td>Session values can’t accessed easily.</td>
<td>Cookies values can accessed easily.</td>
</tr>
<tr>
<td>It is more secure.</td>
<td>It is less secure.</td>
</tr>
</tbody>
</table>
<h2>Q.3) Attempt any THREE of the following. <em>(12 Marks)</em></h2>
<h3>a) Differentiate between implode and explode functions.</h3>
<table>
<thead>
<tr>
<th>No.</th>
<th>Implode</th>
<th>Explode</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>The implode() function returns a string from the elements of an array.</td>
<td>explode function breaks a string  into smaller parts and stores it  as an array.</td>
</tr>
<tr>
<td>2</td>
<td>The implode() function accepts its  parameters in either order.  However, for consistency with explode(),  you should use the documented order of  arguments.</td>
<td>The explode() function splits  these strings based on a specific  delimiter and returns an array that  contains elements which are sustained  by the splitting operation.</td>
</tr>
<tr>
<td>3</td>
<td>syntax :-string implode (pieces)</td>
<td>array explode (delimiter, string, limit)</td>
</tr>
<tr>
<td>4</td>
<td><strong>Example</strong>:  <code>php &lt;?php $arr = array(&quot;I&quot;, &quot;love&quot;, &quot;PHP.&quot;); $pole = implode(&quot; &quot;, $arr); \ echo &quot;$pole&quot;; ?&gt; </code>  Output: I love PHP.</td>
<td>Example: <?php  $string = "I love php."; $pole = explode(" ", $string); \ \ print_r($pole); ?>  Output: Array ( [0] =&gt; I [1] =&gt; love [2] =&gt; php. )</td>
</tr>
</tbody>
</table>
<h3>b) Write a program for cloning of an object.</h3>
<pre><code class="language-php">&lt;?php
class Obj {
  public $name;
}

$o = new Obj;
$c = clone $o;

$o-&gt;name = &quot;Jonney&quot;;
$c-&gt;name = &quot;Jone&quot;;

echo &quot;Origenal: &quot;.$o-&gt;name.&quot;, Clone: &quot;.$c-&gt;name;
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Origenal: Jonney, Clone: JOne
</code></pre>
<h3>c) Define session and explain how it works.</h3>
<ul>
<li>A session is a way to store information in variables to be used across
multiple pages.</li>
<li>Sessions allow us to store data on the web server that associated with a
session ID.</li>
<li>Once we create a session, PHP sends a cookie that contains the session ID to
the web browser.</li>
<li>A session is started with the session_start() function.</li>
<li>The session_start() function first checks if a session is already started and
if none is started then it starts one.</li>
<li>Example:<pre><code class="language-php">&lt;?php
session_start();
$_SESSION[&quot;color&quot;] = &quot;Red&quot;;
$_SESSION[&quot;animal&quot;] = &quot;Cat&quot;;
echo $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];
?&gt;
</code></pre>
</li>
</ul>
<h3>d) Write Update and Delete operations on table data.</h3>
<h2>Q.4) Attempt any THREE of the following. <em>(12 Marks)</em></h2>
<h3>a) State the variable function.Explain it with example.</h3>
<p>PHP supports the concept of variable function means that we can call a function
based on a value of a variable if a variable name has a round parentheses
appended to it PHP will look for a function with the same name as a whatever
variable Evaluates to and will attempt to execute it.</p>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
  function add($x, $y){
    echo $x + $y;
  }
  $var =  &quot;add&quot;;
  $var(10,20);
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>30
</code></pre>
<h3>b) Explain the concept of Serialization with example.</h3>
<p>A string representation of any object in the form of byte-stream is obtained by
serialize() function in PHP. All property variables of the object are contained
in the string and methods are not saved. This string can be stored in any file.</p>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
echo serialize(array(&quot;Red&quot;));
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>a:1:{i:0;s:3:&quot;Red&quot;;}
</code></pre>
<h3>c) Answer the following:</h3>
<h4>i) Get session variables</h4>
<ul>
<li>The session variables are not passed individually to each new page, instead
they are retrieved from the session we open at the beginning of each page.</li>
<li>All session variable values are stored in the global <code>$_SESSION</code> variable.</li>
</ul>
<h4>ii) Destroy session.</h4>
<ul>
<li>To remove all global session variables and destroy the session, we use
<code>session_unset()</code> and <code>session_destroy()</code> functions.</li>
<li>No arguments are needed in <code>session_destroy()</code> function.</li>
<li>Example:<pre><code class="language-php">&lt;?php
session_start();
$_SESSION[&quot;color&quot;] = &quot;red&quot;;
$_SESSION[&quot;animal&quot;] = &quot;Lion&quot;;
echo $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];
session_unset();
session_destroy();
?&gt;
</code></pre>
</li>
</ul>
<h2>Q.5) Attempt any TWO of the following. <em>(12 Marks)</em></h2>
<h3>a) Explain any three data types used in PHP.</h3>
<ol>
<li><strong>Integer:</strong> integer data type used to specify a numeric value  without a fractional component the range of integers.</li>
<li><strong>Strings:</strong> a string is a sequence of characters where characters are the same as a byte.</li>
<li><strong>Boolean:</strong> boolean  value can be either true or false both are  case-insensitive.</li>
</ol>
<h3>b) Write a program to connect PHP with MySQL.</h3>
<pre><code class="language-php">&lt;?php
$conn = mysqli_connect(&quot;mydb&quot;, &quot;root&quot;, &quot;root&quot;);
if ($conn) {
	echo &quot;Connection Successful&quot;;
} else {
	echo &quot;Connection Unsuccessful&quot;;
}
</code></pre>
<p>O/P</p>
<pre><code>Connction Successful
</code></pre>
<h3>c) Explain the concept of overriding in detail.</h3>
<p>In function overriding, both parent and child classes should have the same
function name with and number of arguments. It is used to replace the parent
method in child class.</p>
<pre><code class="language-php">&lt;?php
class ParentClass {
  function helloWorld() {
    echo &quot;Parent&quot;;
  }
}
class ChildClass extends ParentClass {
  function helloWorld() {
    echo &quot;Child&quot;;
  }
}
$p = new ParentClass;
$c = new ChildClass;
$p-&gt;helloWorld();
$c-&gt;helloWorld();
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Parent
Child
</code></pre>
<h2>Q.6) Attempt any TWO of the following. <em>(12 Marks)</em></h2>
<h3>a) Explain web page validation with example.</h3>
<ul>
<li>For validating a web page we use preg_match() function.</li>
<li>The preg_match() function searches string for pattern, returning true if
pattern exists, and false otherwise.</li>
<li>Example:<pre><code class="language-php">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;
	Name:&lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;
	&lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;
&lt;?php
if (!preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;])) {
	echo &quot;Only letter and whitespace is allowed&quot;;
}
?&gt;
</code></pre>
</li>
</ul>
<h3>b) Write a program to create PDF document in PHP.</h3>
<pre><code class="language-php">&lt;?php
  require('fpdf.php');
  $pdf = new FPDF();
  $pdf-&gt;AddPage();
  $pdf-&gt;SetFont('Arial','B',16);
  $pdf-&gt;Cell(40,10,'Hello World!');
  $pdf-&gt;Output();
?&gt;
</code></pre>
<h3>c) Elaborate the following:</h3>
<h4>i) __call()</h4>
<ul>
<li>The __call() method is invoked automatically when a non-existing method or
inaccessible method is called.</li>
<li>The __call() method accepts two arguments:
<ul>
<li>$name is the name of the method that is being called by the object.</li>
<li>$arguments is an array of arguments passed to the method call.</li>
</ul>
</li>
<li>Syntax:<pre><code>public __call ( string $name , array $arguments ) : mixed
</code></pre>
</li>
<li>Example:<pre><code class="language-php">&lt;?php
  class Obj {
  	function __call($method, $argument) {
  		print_r($method);
  		print_r($argument);
  	}
  }

  $o = new Obj;

  $o-&gt;hello(&quot;World&quot;);
?&gt;
</code></pre>
O/P<pre><code>hello
Array([0]=&gt;&quot;World&quot;)
</code></pre>
</li>
</ul>
<h4>ii) mysqli_connect()</h4>
<ul>
<li>This function opens a connection to a MySQL server.</li>
<li>It returns a MySQL link identifier on success, or FALSE on failure.</li>
<li>Syntax:<pre><code class="language-php">mysqli_connect($server, $username, $password)
</code></pre>
</li>
<li>Example:<pre><code class="language-php">&lt;?php
$conn = mysqli_connect(&quot;mydb&quot;, &quot;root&quot;, &quot;root&quot;, &quot;text&quot;);
?&gt;
</code></pre>
</li>
</ul>]]></description>
  </item>
  <item>
    <title>Pratical Sem6</title>
    <link>https://anzenkodo.github.io/notes/programming/languages/php/pratical-sem6.html</link>
    <pubDate>2022-12-16T15:08:01.802Z</pubDate>
    <description><![CDATA[<h2>1. Write a PHP program using expressions and operator (ternary operator, arithmetic operators and comparison operators)</h2>
<pre><code class="language-php">&lt;?php
  echo 1 &gt; 2 ? 1 : 2;
  echo &quot;&lt;br&gt;&quot;;
  echo 1 + 2;
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>2
3
</code></pre>
<h2>2. Write a PHP program to the use of decision making and control structures using:</h2>
<h3><code>if</code> statement</h3>
<pre><code class="language-php">&lt;?php
$x = 1;
if ($x &gt; 0) {
  echo &quot;The number is positive&quot;;
}
</code></pre>
<p>O/P</p>
<pre><code>The number is positive
</code></pre>
<h3><code>if else</code> statement</h3>
<pre><code class="language-php">&lt;?php
$x = &quot;August&quot;;

if ($x &gt; 0) {
  echo &quot;The number is positive&quot;;
} else {
  echo &quot;The number is negative&quot;;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Happy Independence Day!!!
</code></pre>
<h3><code>if elseif if</code> statement</h3>
<pre><code class="language-php">&lt;?php
$x = &quot;August&quot;;

if ($x &gt; 0) {
  echo &quot;The number is positive&quot;;
} elseif ( $x &lt; 0 ) {
  echo &quot;The number is negative&quot;;
} else {
  echo &quot;The value is not number&quot;;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>The number is positive
</code></pre>
<h3><code>switch case</code> statement</h3>
<pre><code class="language-php">&lt;?php
$n = &quot;Monday&quot;;

switch($n) {
  case &quot;Monday&quot;:
    echo &quot;Its Monday&quot;;
    break;
  case &quot;Tuesday&quot;:
    echo &quot;Its Tuesday&quot;;
    break;
  case &quot;Wednesday&quot;:
    echo &quot;Its Wednesday&quot;;
    break;
  case &quot;Thuesday&quot;:
    echo &quot;Its Thuesday&quot;;
    break;
  case &quot;Friday&quot;:
    echo &quot;Its Friday&quot;;
    break;
  case &quot;Saturday&quot;:
    echo &quot;Its Saturday&quot;;
    break;
  case &quot;Sunday&quot;:
    echo &quot;Its Suday&quot;;
    break;
  default:
    echo &quot;Doesn't exist&quot;;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Its Monday
</code></pre>
<h2>3. Write a PHP program to the use of looping structure using:</h2>
<h3><code>while</code> statement</h3>
<pre><code class="language-php">&lt;?php
$num = 0;

while ($num &lt;= 10) {
  echo $num;
  $num++;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>012345678910
</code></pre>
<h3><code>do while</code> statement</h3>
<pre><code class="language-php">&lt;?php
$x = 1;
do {
  echo $x;
  $x++;
} while ($x &lt;= 5);
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>12345
</code></pre>
<h3><code>for</code> statement</h3>
<pre><code class="language-php">&lt;?php
for ($i = 1; $i &lt;= 10; $i++) {
  echo $i;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>12345678910
</code></pre>
<h2>4. Write a PHP program to the use of looping structure using for statement, for each statement.</h2>
<h3><code>for</code> statement</h3>
<pre><code class="language-php">&lt;?php
for ($x = 0; $x &lt;= 5; $x++) {
  echo $x;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>012345
</code></pre>
<h3><code>foreach</code> statement</h3>
<pre><code class="language-php">&lt;?php
$a = array(&quot;Hello&quot;, &quot;World&quot;);

foreach ($a as $b) {
  echo $b.&quot; &quot;;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Hello World
</code></pre>
<h2>5. Write a PHP program for creating and manipulating , associative array and multidimensional array.</h2>
<h3>Indexed array</h3>
<pre><code class="language-php">&lt;?php
$a = array(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;);
echo &quot;My fav color is: &quot;.$a[0];
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>My fav color is: Red
</code></pre>
<h3>Associative arrays</h3>
<pre><code class="language-php">&lt;?php
$a = array(&quot;Red&quot;=&gt;1, &quot;Blue&quot;=&gt;2, &quot;Green&quot;=&gt;3);
echo $a[&quot;Red&quot;].$a[&quot;Blue&quot;],$a[&quot;Green&quot;];
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>123
</code></pre>
<h3>Multidimensional array</h3>
<pre><code class="language-php">&lt;?php
$a = array(array(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;));
echo &quot;My fav color is: &quot;.$a[0][1];
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>My fav color is: Blue
</code></pre>
<h2>6. Write a PHP program to calculate</h2>
<h3>Length of string</h3>
<pre><code class="language-php">&lt;?php
  echo strlen(&quot;Hello world!&quot;);
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>12
</code></pre>
<h3>Count the no of words in string</h3>
<pre><code class="language-php">&lt;?php
  echo str_word_count(&quot;Hello world!&quot;);
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>2
</code></pre>
<h3>Compare two string using string function.</h3>
<pre><code class="language-php">&lt;?php
  echo strcmp(&quot;Hello world!&quot;, &quot;Hello world&quot;);
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>0
</code></pre>
<h2>7. Write a PHP program using following string function:</h2>
<ul>
<li>strrev()</li>
<li>strpos()</li>
<li>strrpos()</li>
<li>str_replace()</li>
<li>ucwords()</li>
<li>strtoupper()</li>
<li>strtolower()</li>
</ul>
<pre><code class="language-php">&lt;?php
  echo strrev(&quot;Hello world!&quot;).&quot;&lt;/br&gt;&quot;;
  echo strpos(&quot;Hello world!&quot;, &quot;world&quot;).&quot;&lt;/br&gt;&quot;;
  echo strrpos(&quot;I love php, I love php too!&quot;,&quot;php&quot;).&quot;&lt;/br&gt;&quot;;
  echo str_replace(&quot;world&quot;, &quot;bvit&quot;, &quot;Hello world!&quot;).&quot;&lt;/br&gt;&quot;;
  echo ucwords(&quot;Welcome to php world&quot;).&quot;&lt;/br&gt;&quot;;
  echo strtoupper(&quot;Information Technology&quot;).&quot;&lt;/br&gt;&quot;;
  echo strtolower(&quot;INFORMATION TECHNOLOGY&quot;).&quot;&lt;/br&gt;&quot;;
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>!dlrow olleH
6
19
Hello bvit!
Welcome To Php World
INFORMATION TECHNOLOGY
information technology
</code></pre>
<h2>8. Write a PHP program to use: and anonymous function.</h2>
<h3>User define function</h3>
<pre><code class="language-php">&lt;?php
  function writeMessage() {
    echo &quot;Welcome to PHP world&quot;;
  }
  writeMessage();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Welcome to PHP world
</code></pre>
<h3>Variable function</h3>
<pre><code class="language-php">&lt;?php
  function writeMessage() {
    echo &quot;Welcome to PHP world&quot;;
  }

  $w = &quot;writeMessage&quot;;
  $w();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Welcome to PHP world
</code></pre>
<h3>Anonymous function</h3>
<pre><code class="language-php">&lt;?php
  $a=function() { echo &quot;Anonymous function&quot;; };
  $a();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Anonymous function
</code></pre>
<h2>9. Write a PHP program to create PDF document by using graphics concept.</h2>
<pre><code class="language-php">&lt;?php
  require('fpdf.php');
  $pdf = new FPDF();
  $pdf-&gt;AddPage();
  $pdf-&gt;SetFont('Arial','B',16);
  $pdf-&gt;Cell(40,10,'Hello World!');
  $pdf-&gt;Output();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Hello World
</code></pre>
<h2>10. Write a PHP program</h2>
<h3>a) To inherit member of superclass in subclass</h3>
<pre><code class="language-php">&lt;?php
class Class1 {
  function func() {
    echo &quot;Hello World&quot;;
  }
}

class Class2 extends Class1 {
  function echo() {
    echo &quot;Bye World&quot;;
  }
}

$o = new Class2;
$o-&gt;func();
$o-&gt;echo();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Hello World
Bye World
</code></pre>
<h3>b) Create constructor to initialize object of class by using object oriented concept.</h3>
<pre><code class="language-php">&lt;?php
class Obj {
  public function __construct($name, $surname) {
    $this-&gt;name=$name;
    $this-&gt;surname=$surname;
  }
  public function showName() {
    echo &quot;My name is &quot;.$this-&gt;name.&quot; &quot;.$this-&gt;surname;
  }
}

$sid=new Obj(&quot;Aman&quot;,&quot;Varma&quot;);
$sid-&gt;showName();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>My name is Aman Varma
</code></pre>
<h2>11. Write a PHP program on</h2>
<h3>Introspection</h3>
<pre><code class="language-php">&lt;?php
if (!class_exists(&quot;Obj&quot;)) {
  echo &quot;Class don't exists.&quot;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Class don't exists
</code></pre>
<h3>Serialization.</h3>
<pre><code class="language-php">&lt;?php
echo serialize(array(&quot;Red&quot;));
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>a:1:{i:0;s:3:&quot;Red&quot;;}
</code></pre>
<h2>12. Design a web page using following form controls:</h2>
<ul>
<li>a) Textbox</li>
<li>b) Radio button</li>
<li>c) Check box</li>
<li>d) Button</li>
</ul>
<pre><code class="language-php">&lt;form action=&quot;&lt;?php 1_SELF_PHP ?&gt;&quot; method=&quot;post&quot;&gt;
  Name:
  &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;
  Sex:
  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;Male&lt;/input&gt;
  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;Female&lt;/input&gt;
  Vehical:
  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;bike&quot;&gt;Bike&lt;/input&gt;
  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;car&quot;&gt;Car&lt;/input&gt;
  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;scooter&quot;&gt;Scooter&lt;/input&gt;
  &lt;button name=&quot;submit&quot;&gt;Submit&lt;/button&gt;
&lt;/form&gt;

&lt;?php
if ( isset($_POST[&quot;submit&quot;]) ) {
  echo $_POST[&quot;name&quot;].&quot; is &quot;.$_POST[&quot;sex&quot;].&quot; will travel by &quot;;
  foreach ($_POST[&quot;vehicle&quot;] as $selected) {
    echo $selected.&quot; &quot;;
  }
}
?&gt;
</code></pre>
<h2>13. Design a web page using following form controls:</h2>
<ul>
<li>a) List box</li>
<li>b) Hidden field box</li>
</ul>
<pre><code class="language-php">&lt;form action=&quot;&lt;? $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;name&quot; value=&quot;Jone&quot;&gt;
  &lt;select name=&quot;foods&quot;&gt;
    &lt;option value=&quot;Tomatoes&quot;&gt;Tomatoes&lt;/option&gt;
    &lt;option value=&quot;Cucumbers&quot;&gt;Cucumbers&lt;/option&gt;
    &lt;option value=&quot;Celery&quot;&gt;Celery&lt;/option&gt;
  &lt;/select&gt;
  &lt;br&gt;
  &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot;/&gt;
&lt;/form&gt;

&lt;?php
  if( isset($_POST[&quot;foods&quot;]) ) {
    echo $_POST[&quot;name&quot;].&quot; have chosen &quot;.$_POST[&quot;foods&quot;];
  }
?&gt;
</code></pre>
<h2>14. Develop a web page with data validation.</h2>
<pre><code class="language-php">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;
  Name:&lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;
  &lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;

&lt;?php
  if (!preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;])) {
    echo &quot;Only letter and whitespace is allowed&quot;;
  }
?&gt;
</code></pre>
<h2>15. Write a PHP program to:</h2>
<h3>Create cookies</h3>
<pre><code class="language-php">&lt;?php
setcookie(&quot;name&quot;, &quot;Jone&quot;, time() + (86400 * 30), &quot;/&quot;);
?&gt;
&lt;?php
if (isset($_COOKIE[&quot;name&quot;])) {
  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Name: Jone
</code></pre>
<ul>
<li>
<p>Modify cookies value
Set cookie agien with setcookie function.</p>
</li>
<li>
<p>Delete cookies</p>
</li>
</ul>
<pre><code class="language-php">&lt;?php
setcookie(&quot;name&quot;, &quot;&quot;, time() - 3600, &quot;/&quot;);
?&gt;
&lt;?php
if (isset($_COOKIE[&quot;name&quot;])) {
  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];
} else {
  echo &quot;Cookie is not set.&quot;;
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Cookie is not set.
</code></pre>
<h2>16. Write a PHP program to:</h2>
<ul>
<li>Start session</li>
<li>Get session variable</li>
<li>Destroy session</li>
</ul>
<pre><code class="language-php">&lt;?php
  session_start();

  $_SESSION[&quot;color&quot;] = &quot;Red&quot;;
  $_SESSION[&quot;animal&quot;] = &quot;Lion&quot;;

  echo $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];

  session_unset();
  session_destroy();
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Red Lion
</code></pre>
<h2>17. Write a PHP program for sending and receiving plain text message (sending email).</h2>
<pre><code class="language-php">&lt;?php
  $status = mail(&quot;AnzenKodo@altmail.com&quot;, &quot;Title&quot;, &quot;Hello World&quot;);
  if ($status) {
    echo &quot;Mail is sent.&quot;;
  } else {
    echo &quot;Mail can't be sent&quot;;
  }
?&gt;
</code></pre>
<h2>18. Write a PHP program to</h2>
<h3>Create database</h3>
<pre><code class="language-php">&lt;?php
// Create connection
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
// Check connection
if ($conn-&gt;connect_error) {
  die(&quot;Connection failed.&quot;);
}

// Create database
$sql = &quot;CREATE DATABASE myDB&quot;;
if (mysqli_query($conn, $sql)) {
  echo &quot;Database created successfully&quot;;
} else {
  echo &quot;Error creating database&quot;;
}

mysqli_close($conn);
?&gt;
</code></pre>
<h3>Creation of table.</h3>
<pre><code class="language-php">&lt;?php
// Create connection
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
// Check connection
if (!$conn) {
  die(&quot;Connection failed&quot;);
}

// sql to create table
$sql = &quot;CREATE TABLE MyGuests(id INT(6))&quot;;

if (mysqli_query($conn, $sql)) {
  echo &quot;Table MyGuests created successfully&quot;;
} else {
  echo &quot;Error creating table: &quot; . $conn-&gt;error;
}

$conn-&gt;close();
?&gt;
</code></pre>
<h2>19. Write a PHP program to Inserting and retrieving the query result operations and Update ,Delete operations on table data.</h2>
<pre><code class="language-php">&lt;?php
// Connecting to MySQL
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
if (!$conn) {
  die(&quot;Error: &quot;.mysqli_error($conn));
}

// Inserting data
$sql = &quot;INSERT INTO my_table(id, name) VALUES (1, 'Jone'), (2, 'Jonney)&quot;;
if (!mysqli_query($conn, $sql)) {
  die(&quot;Error&quot;);
}

// Retrieving data
$sql = &quot;SELECT * FROM my_table&quot;;
if ($result = mysqli_query($conn, $sql)) {
  if (mysqli_num_rows($result) &gt; 0) {
    while ($row = mysqli_fetch_array($result)) {
      echo &quot;ID: &quot;.$row[&quot;id&quot;].&quot;, Name: &quot;.$row[&quot;name&quot;];
    }
  } else {
    echo &quot;Rows can't be zero&quot;;
  }
} else {
  die(&quot;Error: &quot;.mysqli_error($conn));
}

// Update data
$sql = &quot;UPDATE my_table SET name='tim' WHERE id=2&quot;;
if (!mysqli_query($conn, $sql) {
  die(&quot;Error&quot;);
}

// Delete data
$sql = &quot;DELETE FROM my_table WHERE id=1&quot;;
if (!mysqli_query($conn, $sql) {
  die(&quot;Error&quot;));
}

mysqli_close();
?&gt;
</code></pre>]]></description>
  </item>
  <item>
    <title>Final</title>
    <link>https://anzenkodo.github.io/notes/programming/languages/php/final.html</link>
    <pubDate>2022-12-16T15:08:01.802Z</pubDate>
    <description><![CDATA[<h1>PHP</h1>
<h2>Attempt any FIVE :</h2>
<h3>(a) Describe advantage of PHP.</h3>
<ul>
<li><strong>Web Application Features</strong> - PHP is a programming language support most
commonly used Web application features like HTTP Cookie, Session, File
Upload, etc.</li>
<li><strong>CLI (Command Line Interface)</strong> - PHP is commonly used to write Web
applications to be integrated to Web servers using the Common Gateway
Interface (CGI).</li>
<li><strong>Built-in Modules</strong> - The standard PHP build comes with many free and open
source libraries included as built-in modules.</li>
<li><strong>Object-Oriented Programming (OOP)</strong> - PHP supports object-oriented
programming features like object.</li>
<li><strong>Pre-Compilation</strong> - PHP Web applications are usually deployed in source
code, which will be interpreted on-the-fly when Web requests arrive to the
server.</li>
<li><strong>Real Time Access Monitoring</strong> - PHP provides access logging by creating the
summary of recent accesses for the user.</li>
<li><strong>File I/O</strong> - PHP supports most commonly used file I/O features like local
file and path management, remote resource access using Internet protocols
like HTTP and FTP.</li>
</ul>
<h3>(b) What is array ? How to store data in array ?</h3>
<ul>
<li>An array is a special variable, which can hold more than one value at a time.</li>
<li>To create array we use <code>array()</code> function.</li>
</ul>
<pre><code class="language-php">&lt;?php
$array = array(&quot;Hello&quot;, &quot;World&quot;);
print_r($array);
</code></pre>
<p>O/P</p>
<pre><code>Array ( [0] =&gt; &quot;Hello&quot;, [1] =&gt; &quot;World&quot; )
</code></pre>
<h3>© List types of inheritance.</h3>
<ul>
<li>Single</li>
<li>Multiple</li>
<li>Multilevel Inheritance.</li>
</ul>
<h3>(d) How can we destroy cookies ?</h3>
<ul>
<li>To delete cookie, we can use <code>setcookie</code> function with expiration date in</li>
</ul>
<pre><code class="language-php">&lt;?php
setcookie(&quot;name&quot;, &quot;&quot;, time() - 3600, &quot;/&quot;);
?&gt;
</code></pre>
<h3>(e) List any four data types in MySQL.</h3>
<ul>
<li>int</li>
<li>float</li>
<li>char</li>
<li>json</li>
<li>boolean</li>
<li>xml</li>
</ul>
<h3>(f) Write syntax of PHP.</h3>
<pre><code class="language-php">&lt;?php
$hello = &quot;Hello World&quot;;
?&gt;
</code></pre>
<h3>(g) How to create session variable in PHP ?</h3>
<p>A session is a way to store information in variables to be used across multiple pages.</p>
<pre><code class="language-php">&lt;?php
session_start();

$_SESSION[&quot;color&quot;] = &quot;Red&quot;;
$_SESSION[&quot;animal&quot;] = &quot;Cat&quot;;
echo $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];
?&gt;
</code></pre>
<h2>2. Attempt any THREE :</h2>
<h3>(a) Write down rules for declaring PHP variable.</h3>
<ul>
<li>A variable starts with the $ sign, followed by the name of the variable.</li>
<li>A variable name must start with a letter or the underscore character.</li>
<li>A variable name cannot start with a number.</li>
</ul>
<h3>(b) Write a program to create associative array in PHP.</h3>
<p>Associative arrays are arrays that use named keys that you assign to them.</p>
<pre><code class="language-php">&lt;?php
$a = array(&quot;Red&quot;=&gt;1, &quot;Blue&quot;=&gt;2, &quot;Green&quot;=&gt;3);
echo $a[&quot;Red&quot;].$a[&quot;Blue&quot;],$a[&quot;Green&quot;];
</code></pre>
<p>O/P</p>
<pre><code>123
</code></pre>
<h3>© Define Introspection and explain it with suitable example.</h3>
<ul>
<li>PHP Introspection is the ability of a program to examine an object’s
characteristics such as its name, parent class (if any), properties and
methods.</li>
<li>Introspection in PHP offers a useful Ability to examine classes’ interfaces
properties methods. With introspection we can write code that operates on any
object or class.</li>
</ul>
<pre><code class="language-php">&lt;?php
class Obj {}

class Obj2 extends Obj {
  public $hello = &quot;world&quot;;
  function func() {}
}
$o = new Obj2;

if (class_exists('Obj2')) {
  echo &quot;Class exists&quot;;
}
if (is_object($o)) {
  echo &quot;Is object&quot;;
}

print_r(get_class($o));
print_r(get_class_methods($o));
print_r(get_class_vars('Obj'));
print_r(get_parent_class($o));
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>class exists
Is object
Obj2
Array ( [0] =&gt; func )
Array ( [hello] =&gt; world )
Obj
</code></pre>
<h3>(d) Write difference between get( ) &amp; post( ) method of form (Any four points).</h3>
<h4>GET</h4>
<ul>
<li>It sends the encoded user information appended to the page request (to the URL).</li>
<li>The page and the encoded information are separated by the ? character.</li>
<li>The GET method produces a long string the appears in our server logs, in the browser’ location box.</li>
<li>The GET method is restricted to send up to 1024 characters only.</li>
<li>Never use GET method if we have password or other sensitive information.</li>
<li>GET cannot be used to send binary data to the server.</li>
<li>The php provides $_GET assoiative array to a access all the sent information using GET method.</li>
</ul>
<h4>POST</h4>
<ul>
<li>It transfers information via HTTP header, not throought the URL.</li>
<li>The POST method does not have any restriction on data size.</li>
<li>The POST method can be used to send ASCII as well as binary data.</li>
<li>The data sent by POST  method goes through HTTP header, so security depends on HTTP protocol.</li>
<li>By using secure HTTP, we can make sure that our information is secure.</li>
<li>The PHP provides $_POST associative array to access all the sent information using POST method.</li>
</ul>
<h2>3. Attempt any THREE :</h2>
<h3>(a) Define function. How to define user defined function in PHP ? Give example.</h3>
<p>A function is a block of statements that can be used repeatedly in a program.</p>
<pre><code class="language-php">&lt;?php
function func() {
  echo &quot;Hello World&quot;;
}
</code></pre>
<p>O/P</p>
<pre><code>Hello World
</code></pre>
<h3>(b) Explain method overloading with example.</h3>
<p>If the derived class is having the same method name as the base class then the method in the derived class takes precedence over or overrides the base class method.</p>
<pre><code class="language-php">&lt;?php
class First {
  function func() {
    echo &quot;Hello World&quot;;
  }
}

class Second extends First {
  function func() {
    echo &quot;Bye World&quot;;
  }
}

$o = new Second;
$o-&gt;func();
</code></pre>
<h3>© Define session &amp; cookie. Explain use of session start.</h3>
<h4>What is cookie?</h4>
<ul>
<li>Cookie save the data in browser, so next time refresh the browser it will not
delete from browser.</li>
<li>Cookie is used to identify the user.</li>
<li>A cookie is a small file that server embeds to user’s computer.</li>
<li>Each time the same computer requests a page with a browser, it will send the
cookie too.</li>
</ul>
<h4>How to create it?</h4>
<ul>
<li>Use <code>setcookie</code> function to create cookie.</li>
<li>Syntex:<pre><code>setcookie($cookie_name, $cookie_value, $time, $location)
</code></pre>
</li>
</ul>
<h4>Example</h4>
<pre><code class="language-php">&lt;?php
setcookie(&quot;name&quot;, &quot;Jonney&quot;, time() + (86400 * 30), &quot;/&quot;);
if (isset($_COOKIE[&quot;name&quot;])) {
  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];
}
</code></pre>
<p>O/P</p>
<pre><code>Name: Jonney
</code></pre>
<h4>Session</h4>
<ul>
<li>A session is a way to store information in variables to be used across
multiple pages.</li>
<li>Sessions allow us to store data on the web server that associated with a
session ID.</li>
<li>Once we create a session, PHP sends a cookie that contains the session ID to
the web browser.</li>
<li>A session is started with the session_start() function.</li>
<li>The session_start() function first checks if a session is already started and
if none is started then it starts one.</li>
</ul>
<pre><code class="language-php">&lt;?php
session_start()
?&gt;
&lt;?php
$_SESSION[&quot;name&quot;] = &quot;Jonney&quot;;
echo &quot;Name: &quot;.$_SESSION[&quot;name&quot;];
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Name: Jonney
</code></pre>
<h3>(d) Explain delete operation of PHP on table data.</h3>
<ul>
<li>We can create a MySQL database by using MySQL Command Line Client.</li>
<li>Open the MySQL console and write down password, if we set one while
installation.</li>
<li>We will get the following:
<ul>
<li>To create the data base enter <code>CREATE DATABASE database_name</code></li>
<li>To check the database is crated enter <code>SHOW DATABASES</code></li>
</ul>
</li>
<li>Creating database through php:<pre><code class="language-php">&lt;?php
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);

if (!$conn) {
  die(&quot;Can't connect to MySQL &quot;);
}

$sql = &quot;CRATE DATABASE emp&quot;;

if (!mysqli_query($conn, $sql)) {
  die(&quot;Can't create database &quot;.mysqli_error($conn);
}

echo &quot;Created database &lt;br/&gt;&quot;;
?&gt;
</code></pre>
O/P<pre><code>Created database
</code></pre>
</li>
</ul>
<h2>4. Attempt any THREE :</h2>
<h3>(a) Write PHP script to sort any five numbers using array function.</h3>
<pre><code class="language-php">&lt;?php
$cars = array(&quot;Volvo&quot;, &quot;BMW&quot;, &quot;Toyota&quot;);
sort($cars);
?&gt;
</code></pre>
<p>Output:</p>
<pre><code>BMW
Toyota
Volvo
</code></pre>
<h3>(b) Write PHP program for cloning of an object.</h3>
<pre><code class="language-php">&lt;?php
class Obj {
  public $name;
}

$o = new Obj;
$c = clone $o;

$o-&gt;name = &quot;Jonney&quot;;
$c-&gt;name = &quot;Jone&quot;;

echo &quot;Origenal: &quot;.$o-&gt;name.&quot;, Clone: &quot;.$c-&gt;name;
?&gt;
</code></pre>
<p>Output:</p>
<pre><code>Origenal: Jonney, Clone: JOne
</code></pre>
<h3>© Create customer form like customer name, address, mobile no, date of birth using different form of input elements &amp; display user inserted values in new PHP form.</h3>
<pre><code class="language-php">&lt;form action=&quot;&lt;?php 1_SELF_PHP ?&gt;&quot; method=&quot;post&quot;&gt;
  Name:
  &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;
  Sex:
  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;Male&lt;/input&gt;
  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;Female&lt;/input&gt;
  Vehical:
  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;bike&quot;&gt;Bike&lt;/input&gt;
  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;car&quot;&gt;Car&lt;/input&gt;
  &lt;input type=&quot;checkbox&quot; name=&quot;vehicle[]&quot; value=&quot;scooter&quot;&gt;Scooter&lt;/input&gt;
  &lt;button name=&quot;submit&quot;&gt;Submit&lt;/button&gt;
&lt;/form&gt;

&lt;?php
if ( isset($_POST[&quot;submit&quot;]) ) {
  echo $_POST[&quot;name&quot;].&quot; is &quot;.$_POST[&quot;sex&quot;].&quot; will travel by &quot;;
  foreach ($_POST[&quot;vehicle&quot;] as $selected) {
    echo $selected.&quot; &quot;;
  }
}
?&gt;
</code></pre>
<h3>(d) Inserting and retrieving the query result operations.</h3>
<pre><code class="language-php">&lt;?php
$server= &quot;localhost&quot;;
$user = &quot;root&quot;;
$password = &quot;&quot;;
$db = &quot;feedback&quot;;
// Create connection
$conn = new mysqli($server, $user, $password, $db);
// Check connection
if ($conn-&gt;connect_error)
{
die(&quot;Connection failed: &quot; . $conn-&gt;connect_error);
}
$sql = INSERT INTO data VALUES('ashok','you are awesome bro');
[if](if) ($conn-&gt;query($sql) === TRUE)
{
echo &quot;feedback sucessfully submitted&quot;;
}
else
{
echo &quot;Error: &quot; . $sql . &quot;&lt;br&gt;&quot; . $conn-&gt;error;
}
$conn-&gt;close();
?&gt;
</code></pre>
<h3>(e) How do you validate user inputs in PHP ?</h3>
<pre><code class="language-php">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;
  Name:&lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;
  &lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;

&lt;?php
  if (!preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;])) {
    echo &quot;Only letter and whitespace is allowed&quot;;
  }
?&gt;
</code></pre>
<h2>5. Attempt any TWO :</h2>
<h3>(a) Explain different loops in PHP with example.</h3>
<h4><code>while</code> statement</h4>
<pre><code class="language-php">&lt;?php
$num = 0;

while ($num &lt;= 10) {
  echo $num;
  $num++;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>012345678910
</code></pre>
<h4><code>do while</code> statement</h4>
<pre><code class="language-php">&lt;?php
$x = 1;

do {
  echo &quot;The number is: $x &lt;br&gt;&quot;;
  $x++;
} while ($x &lt;= 5);
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>The number is: 1
The number is: 2
The number is: 3
The number is: 4
The number is: 5
</code></pre>
<h4><code>for</code> loop</h4>
<pre><code class="language-php">&lt;?php
for ($i = 1; $i &lt;= 10; $i++) {
  echo $i.&quot; &quot;;
}
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>1 2 3 4 5 6 7 8 9 10
</code></pre>
<h3>(b) How do you connect MySQL database with PHP.</h3>
<pre><code class="language-php">&lt;?php
  // Creating connection
  $conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);

  // Checking connection
  if (!$conn) {
      die(&quot;Connection failed.&quot;);
  }
  echo &quot;Connected successfully&quot;;
?&gt;
</code></pre>
<h3>© Create a class as “Percentage” with two properties length &amp; width. Calculate area of rectangle for two objects.</h3>
<pre><code class="language-php">&lt;?php
class Rectangle {
  public $width = 0;
  public $height = 0;

  function setSize($w = 0, $h = 0) {
    $this-&gt;width = $w;
    $this-&gt;height = $h;
  }

  function getArea() {
    return ($this-&gt;width * $this-&gt;height);
  }

  function getPerimeter() {
    return ( ($this-&gt;width + $this-&gt;height) * 2 );
  }

  function isSquare() {
    if ($this-&gt;width == $this-&gt;height) {
       return true;
     } else {
        return false;
     }
  }

}
</code></pre>
<h2>6. Attempt any TWO :</h2>
<h3>(a) Write a PHP program to demonstrate use of cookies.</h3>
<ul>
<li>Cookie save the data in browser, so next time refresh the browser it will not
delete from browser.</li>
<li>Cookie is used to identify the user.</li>
<li>A cookie is a small file that server embeds to user’s computer.</li>
<li>Each time the same computer requests a page with a browser, it will send the
cookie too.</li>
</ul>
<h4>How to create it?</h4>
<ul>
<li>Use <code>setcookie</code> function to create cookie.</li>
<li>Syntex:<pre><code>setcookie($cookie_name, $cookie_value, $time, $location)
</code></pre>
</li>
</ul>
<h4>Example</h4>
<pre><code class="language-php">&lt;?php
setcookie(&quot;name&quot;, &quot;Jonney&quot;, time() + (86400 * 30), &quot;/&quot;);
if (isset($_COOKIE[&quot;name&quot;])) {
  echo &quot;Name: &quot;.$_COOKIE[&quot;name&quot;];
}
</code></pre>
<p>O/P</p>
<pre><code>Name: Jonney
</code></pre>
<h3>(b) Explain any four string functions in PHP with example.</h3>
<ul>
<li><strong>strrev()</strong> - Reverses a string.</li>
<li><strong>strpos()</strong> - Returns the position of the first occurrence of a string.</li>
<li><strong>strrpos()</strong> - Finds the position of the last occurrence of a string.</li>
<li><strong>str_replace()</strong> - Replaces some characters in a string.</li>
</ul>
<h3>© What is inheritance?</h3>
<ul>
<li>The old class is the base class, also called as parent class or super class,
and the new class is the derived class also called as child class or sub
class.</li>
<li>The derived class has its own variables and methods plus variables and
methods from the base class.</li>
<li>The <code>extends</code> keyword is used for the inheritance.</li>
</ul>
<pre><code class="language-php">&lt;?php
class Class1 {
  function func() {
    echo &quot;Hello World&quot;;
  }
}

class Class2 extends Class1 {
  function echo() {
    echo &quot;Bye World&quot;;
  }
}

$o = new Class2;
$o-&gt;func();
$o-&gt;echo();
</code></pre>
<p>O/P</p>
<pre><code>Hello World
Bye World
</code></pre>
<h3>(ii) Write update operation on table data.</h3>
<pre><code class="language-php">&lt;?php
// Connect MySQL
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
if (!$conn) {
  echo &quot;Error: &quot;.mysqli_error($conn);
}

// Create table
$table = &quot;CREATE TABLE employee(id INT(4), name VARCHAR(22), salary INT(4))&quot;;
if (!mysqli_query($conn, $table)) {
  echo &quot;Can't create table.&quot;;
}
echo &quot;Created table&lt;br/&gt;&quot;;

// Insert data
$insert = &quot;INSERT INTO employee(id, name, salary) VALUES (1, 'Sam', 3200), (2, 'Jonney', 4500), (3, 'Jone', 2000)&quot;;
if (!mysqli_query($conn, $insert)) {
  echo &quot;Can't insert data.&quot;;
}

// Dalete data
$delete = &quot;DELETE FROM employee WHERE id=2&quot;;
if (!mysqli_query($conn, $delete)) {
  echo &quot;Can't delete data.&quot;;
}

// Retrive data
$retrive = &quot;SELECT * FROM employee&quot;;
$result = mysqli_query($conn, $retrive);

if (mysqli_num_rows($result)) {
  while ($row = mysqli_fetch_assoc($result)) {
    echo &quot;Name: &quot;.$row['name'].&quot;, Salary: &quot;.$row['salary'].&quot;, ID: &quot;.$row['id'].&quot;&lt;/br&gt;&quot;;
  }
}
?&gt;
</code></pre>]]></description>
  </item>
  <item>
    <title>UT2 6S</title>
    <link>https://anzenkodo.github.io/notes/programming/languages/php/ut2-6s.html</link>
    <pubDate>2022-12-16T15:08:01.802Z</pubDate>
    <description><![CDATA[<h1>PHP Unit 2 AB</h1>
<h3>1. Write the syntax for creating Cookie.</h3>
<ul>
<li>To set cookie in PHP, the <code>setcookie()</code> function is used.</li>
<li>Syntex:<pre><code class="language-php">setcookie($name, $value, $expire_time, $path, $domain)
</code></pre>
</li>
<li><code>setcookie()</code> function the parameters.
<ul>
<li><strong>name</strong> - Name of the cookie, which is used with $_COOKIE function to get
value.</li>
<li><strong>value</strong> - Value of the named variable.</li>
<li><strong>expire time</strong> - Time when cookie will expire.</li>
<li><strong>path</strong> - Directory where cookie will valied.</li>
<li><strong>domain</strong> - The default server hostname.</li>
</ul>
</li>
</ul>
<h3>2. WAP to connect PHP with MySQL.</h3>
<pre><code class="language-php">&lt;?php
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
if ($conn) {
	echo &quot;MySQL connected&quot;;
} else {
	echo &quot;MySQL can't connect&quot;;
}
</code></pre>
<p>O/P</p>
<pre><code>MySQL connected
</code></pre>
<h3>3. Differentiate between Session and Cookies.</h3>
<table>
<thead>
<tr>
<th>SESSION</th>
<th>COOKIES</th>
</tr>
</thead>
<tbody>
<tr>
<td>Session are stored in server side</td>
<td>Cookies are stored in client browser.</td>
</tr>
<tr>
<td>Session is server resource.</td>
<td>Cookies are client-side resource.</td>
</tr>
<tr>
<td>It stores unlimeted data.</td>
<td>It stores limited data.</td>
</tr>
<tr>
<td>It holds multiple variables.</td>
<td>It doen’t hold multiple variables.</td>
</tr>
<tr>
<td>Session values can’t accessed easily.</td>
<td>Cookies values can accessed easily.</td>
</tr>
<tr>
<td>It is more secure.</td>
<td>It is less secure.</td>
</tr>
</tbody>
</table>
<h3>4. Define session and explain how it works.</h3>
<ul>
<li>A session is a way to store information in variables to be used across
multiple pages.</li>
<li>Sessions allow us to store data on the web server that associated with a
session ID.</li>
<li>Once we create a session, PHP sends a cookie that contains the session ID to
the web browser.</li>
<li>A session is started with the session_start() function.</li>
<li>The session_start() function first checks if a session is already started and
if none is started then it starts one.</li>
<li>Example:<pre><code class="language-php">&lt;?php
session_start();

$_SESSION[&quot;color&quot;] = &quot;Red&quot;;
$_SESSION[&quot;animal&quot;] = &quot;Cat&quot;;
echo $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];
?&gt;
</code></pre>
</li>
</ul>
<h3>5. Write update and delete operations on table.</h3>
<pre><code class="language-php">UPDATE:
&lt;?php
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
if (!$conn) {
	echo &quot;Can't connect to MySQL&quot;;
}

$sql = &quot;UPDATE my_table SET name='Jonney' WHERE id=2&quot;;
if (!mysqli_query($conn, $sql)) {
	die(&quot;Can't Update Table&quot;);
}
echo &quot;Update data&lt;/br&gt;&quot;;
?&gt;
DELETE:
&lt;?php
$sql = &quot;DELETE my_table WHERE id=1&quot;;
if (!mysqli_query($conn, $sql)) {
	die(&quot;Can't Delete data&quot;);
}
echo &quot;Deleted data&lt;/br&gt;&quot;;

mysqli_close($conn);
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>UPDATE:Update data
DELETE:Deleted data
</code></pre>
<h3>6. Answer the following</h3>
<h4>i) Get session variables</h4>
<ul>
<li>The session variables are not passed individually to each new page, instead
they are retrieved from the session we open at the beginning of each page.</li>
<li>All session variable values are stored in the global <code>$_SESSION</code> variable.</li>
</ul>
<h4>ii) Destroy session.</h4>
<ul>
<li>To remove all global session variables and destroy the session, we use
<code>session_unset()</code> and <code>session_destroy()</code> functions.</li>
<li>No arguments are needed in <code>session_destroy()</code> function.</li>
<li>Example:<pre><code class="language-php">&lt;?php
session_start();

$_SESSION[&quot;color&quot;] = &quot;red&quot;;
$_SESSION[&quot;animal&quot;] = &quot;Lion&quot;;
echo $_SESSION[&quot;color&quot;].&quot; &quot;.$_SESSION[&quot;animal&quot;];
session_unset();
session_destroy();
?&gt;
</code></pre>
</li>
</ul>
<h3>7. Explain inserting and retrieving the query result operations.</h3>
<ul>
<li>For inserting a data into the table we use the INSERT query.</li>
<li>For retrieving the data, we use the SELECT query.</li>
</ul>
<pre><code class="language-php">&lt;?php
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
if (!$conn) {
	echo &quot;Can't connect to MySQL&quot;;
}

// Insert the data
$sql = &quot;INSERT INTO my_table(id, name) VALUES (1, 'Jonney'), (2, 'Jone')&quot;;
if (!mysqli_query($conn, $sql)) {
	echo &quot;Can't Insert the data&quot;;
}

// Retriving
$sql = &quot;SELECT * FROM my_table&quot;;
$result = mysqli_connect($conn, $sql);

if ($mysqli_num_rows($result) &gt; 0) {
	while ($row = mysqli_fetch_array($result)) {
		echo &quot;Name: &quot;.$row['name'].&quot;, ID: &quot;.$row['id'].&quot;&lt;br/&gt;&quot;;
	}
} else {
	echo &quot;Rows can't be zero.&quot;;
}
</code></pre>
<h3>8. Explain web page validation with example.</h3>
<ul>
<li>For validating a web page we use preg_match() function.</li>
<li>The preg_match() function searches string for pattern, returning true if
pattern exists, and false otherwise.</li>
<li>Example:<pre><code class="language-php">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;
	Name:&lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;
	&lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;

&lt;?php
if (!preg_match(&quot;/^[a-zA-Z_ ]*$/&quot;, $_POST[&quot;name&quot;])) {
	echo &quot;Only letter and whitespace is allowed&quot;;
}
?&gt;
</code></pre>
</li>
</ul>
<h3>9.  Elaborate the following:</h3>
<h4>i) <code>mysqli_query()</code></h4>
<p>This function in php is used to pass a sql query to mysql database.
This function returns the query handle for SELECT queries, TRUE/FALSE for other
queries, or FALSE on failure.</p>
<ul>
<li>Syntex:<pre><code class="language-php">mysqli_query(string, query, resource link_identifier])
</code></pre>
</li>
</ul>
<h4>ii) <code>mysqli_connect()</code></h4>
<ul>
<li>This function opens a connection to a MySQL server.</li>
<li>It returns a MySQL link identifier on success, or FALSE on failure.</li>
<li>Syntax:<pre><code class="language-php">mysqli_connect($server, $username, $password)
</code></pre>
</li>
<li>Example:<pre><code class="language-php">$conn = mysqli_connect(&quot;mydb&quot;, &quot;root&quot;, &quot;root&quot;);
</code></pre>
</li>
</ul>
<h3>10. Explain the use of mail() function in php.</h3>
<ul>
<li><code>mail()</code> function is useful to sending the mail.</li>
<li>Syntex:<pre><code class="language-php">mail($to, $subject, $message, $header, $parametes);
</code></pre>
</li>
<li><code>mail()</code> function parametes:
<ul>
<li><strong>to</strong> - represents the address of receiver.</li>
<li><strong>subject</strong> - it specifies the subject of mail.</li>
<li><strong>message</strong> - it defines the message which is to be sent.</li>
<li><strong>headers</strong> - it is optional and specifies the additional headers like Cc, Bcc.</li>
<li><strong>parameters</strong> - it is optional and specifies the additional parameters.</li>
</ul>
</li>
</ul>
<pre><code class="language-php">&lt;?php
$sent = mail(&quot;AnzenKodo@altmail.com&quot;, &quot;Title&quot;, &quot;Message&quot;);

if (!$sent) {
  echo &quot;Message is not sent.&quot;;
} else {
  echo &quot;Message is sent.&quot;;
}
</code></pre>
<p>O/P</p>
<pre><code>Message is sent.
</code></pre>
<h3>11. How to use radio button in form? Give suitable example.</h3>
<ul>
<li>The radio buttons are for single choice from multiple options.</li>
<li>All radio buttons in the group have the same name attribute.</li>
<li>Only one button can be selected per group.</li>
<li>The value attribute is mandatory for checkboxes and radio buttons.</li>
<li>Example:<pre><code class="language-php">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;
	Color:
	&lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;White&quot;&gt;White&lt;/input&gt;
	&lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;Blue&quot;&gt;Blue&lt;/input&gt;
	&lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;Red&quot;&gt;Red&lt;/input&gt;
	&lt;input type=&quot;Submit&quot;&gt;
&lt;/form&gt;

&lt;?php
if (isset($_POST[&quot;color&quot;])) {
	echo $_POST[&quot;color&quot;];
}
?&gt;
</code></pre>
</li>
</ul>
<h3>12. WAP in php to counting no. of rows in table.</h3>
<pre><code class="language-php">&lt;?php
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
if (!$conn) {
	die(&quot;Can't connect to MySQL&quot;);
}

$sql = &quot;SELECT * FROM my_table&quot;;
if ($result = mysqli_query($conn, $sql)) {
	echo &quot;No of rows: &quot;.mysqli_num_rows($result);
} else {
	echo &quot;Can't connect&quot;;
}

mysqli_close($conn);
?&gt;
</code></pre>
<h3>13. WAP in php to counting no. of fields in table.</h3>
<pre><code class="language-php">&lt;?php
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;test&quot;);
if (!$conn) {
	die(&quot;Can't connect to MySQL&quot;);
}

$sql = &quot;SELECT * FROM my_table&quot;
if ($result = mysqli_query($conn, $sql)) {
	echo &quot;No of fields: &quot;.mysqli_num_fields($result);
}
mysqli_close();
?&gt;
</code></pre>
<h3>14. WAP in php to create database and creation of table.</h3>
<pre><code class="language-php">Creating database:
&lt;?php
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;);
if (!$conn) {
	die(&quot;Can't connect to MySQL&quot;);
}

$sql = &quot;CREATE DATABASE db&quot;;
if (!mysqli_query($conn, $sql) {
	die(&quot;Can't create Database&quot;);
}
echo &quot;Created database&lt;/br&gt;&quot;;

mysqli_close($conn);
?&gt;

Creating Table:
&lt;?php
$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;db&quot;);
if (!$conn) {
	die(&quot;Can't create Table&quot;);
}

$sql = &quot;CREATE TABLE my_table(name VARCHAR(22), id INT(4))&quot;;
if(!mysqli_query($conn, $sql) {
	die(&quot;Error: &quot;.mysqli_error($conn));
}
echo &quot;Created table&lt;br/&gt;&quot;;

mysqli_close($conn);
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Created database
Created table
</code></pre>
<h3>15. How to used list and button in form? Give suitable example.</h3>
<ul>
<li>List
<ul>
<li>The list represents a windows control to display a list of items to a user.</li>
<li>A user can select an item from the list.</li>
<li>User can either select one option from a list or multiple options, depending
on the type of list.</li>
</ul>
</li>
<li>Button
<ul>
<li>A button is a control, which is an interactive component that enables users
to communicate with an application which we click and release to perform
some actions.</li>
<li>A button can be clicked by using the mouse, ENTER key, or SPACEBAR if the
button has focus.</li>
</ul>
</li>
<li>Example:<pre><code class="language-php">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;
	&lt;select name=&quot;language&quot;&gt;
		&lt;option name=&quot;C&quot;&gt;C&lt;/option&gt;
		&lt;option name=&quot;C++&quot;&gt;C++&lt;/option&gt;
		&lt;option name=&quot;PHP&quot;&gt;PHP&lt;/option&gt;
	&lt;/select&gt;
	&lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;

&lt;?php
if (isset($_POST[&quot;language&quot;])) {
	echo &quot;Selected: &quot;.$_POST[&quot;language&quot;];
}
?&gt;
</code></pre>
</li>
</ul>
<h3>16. Answer the following</h3>
<h4>i) Use of cookies</h4>
<ul>
<li>Cookie save the data in browser, so next time refresh the browser it will not
delete from browser.</li>
<li>Cookie is used to identify the user.</li>
<li>A cookie is a small file that server embeds to user’s computer.</li>
<li>Each time the same computer requests a page with a browser, it will send the
cookie too.</li>
</ul>
<h4>ii) How to set the cookie?</h4>
<ul>
<li>Use <code>setcookie</code> function to create cookie.</li>
<li>Syntex:<pre><code>setcookie($cookie_name, $cookie_value, $time, $location)
</code></pre>
</li>
</ul>
<h4>iii) How to modify?</h4>
<ul>
<li>Set cookie agien with <code>setcookie</code> function.</li>
</ul>
<h4>iv) How to delete the cookies?</h4>
<ul>
<li>To delete cookie, we can use <code>setcookie</code> function with expiration date in
past.</li>
<li>Example:<pre><code>setcookie($cookie_name, &quot;&quot;, time() - 3600);
</code></pre>
</li>
<li>We can also put <code>null</code> in time section to delete cookie.</li>
<li>Example<pre><code>setcookie($cookie_name, &quot;&quot;, null);
</code></pre>
</li>
</ul>
<h3>17. Define GET and POST methods.</h3>
<h4>GET</h4>
<ul>
<li>It sends the encoded user information appended to the page request (to the
URL).</li>
<li>The page and the encoded information are separated by the ? character.</li>
<li>The GET method produces a long string the appears in our server logs, in the
browser’ location box.</li>
<li>The GET method is restricted to send up to 1024 characters only.</li>
<li>Never use GET method if we have password or other sensitive information.</li>
<li>GET cannot be used to send binary data to the server.</li>
<li>The php provides $_GET assoiative array to a access all the sent information
using GET method.</li>
<li>Example:<pre><code class="language-php">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;GET&quot;&gt;
	Name: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;
	&lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;

&lt;?php
if ($_GET[&quot;name&quot;]) {
	echo $_GET[&quot;name&quot;];
}
?&gt;
</code></pre>
</li>
<li>Output:<pre><code>Name: Joey
Submit

Joey
</code></pre>
</li>
</ul>
<h4>POST</h4>
<ul>
<li>It transfers information via HTTP header, not throought the URL.</li>
<li>The POST method does not have any restriction on data size.</li>
<li>The POST method can be used to send ASCII as well as binary data.</li>
<li>The data sent by POST  method goes through HTTP header, so security depends on
HTTP protocol.</li>
<li>By using secure HTTP, we can make sure that our information is secure.</li>
<li>The PHP provides $_POST associative array to access all the sent information
using POST method.</li>
<li>Example:<pre><code class="language-php">&lt;form action=&quot;&lt;?php $_PHP_SELF ?&gt;&quot; method=&quot;post&quot;&gt;
	Name: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;
	&lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;

&lt;?php
if ($_POST[&quot;name&quot;]) {
	echo $_POST[&quot;name&quot;];
}
?&gt;
</code></pre>
</li>
<li>Output<pre><code>Name: Joey
Submit

Joey
</code></pre>
</li>
</ul>]]></description>
  </item>
  <item>
    <title>UT1 6S</title>
    <link>https://anzenkodo.github.io/notes/programming/languages/php/ut1-6s.html</link>
    <pubDate>2022-12-16T15:08:01.802Z</pubDate>
    <description><![CDATA[<h2>Write a php program to find the largest number among three numbers.</h2>
<pre><code class="language-php">&lt;?php
  function largest($x, $y, $z) {
    if ($x &gt;= $y) {
      if($x &gt;= $z) {
        echo $x;
      } else {
        echo $z;
      }
    }
    else {
      if($y &gt;= $z) {
        echo $y;
      } else {
        echo $z;
      }
    }
  }

  largest(100, 50, 25);
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>100
</code></pre>
<h2>Write a php code for creating a basic image.</h2>
<pre><code class="language-php">&lt;?php
$image = imagecreatetruecolor(500, 300);
imagefilledrectangle($image, 20, 20, 480, 280);
header(&quot;Content-type: image/png&quot;);
imagepng($image);
?&gt;
</code></pre>
<h2>Explain inheritance with examples.</h2>
<p>In Inheritance  the new class can inherit the properties and methods from the
old class.</p>
<p>The old class is the base class also called a parent class and then the new
class is a derived  class also called a subclass.</p>
<p><strong>Example</strong>:</p>
<pre><code class="language-php">&lt;?php
  class Person {
    var $name, $age;
  }
  class Employee extends Person {
    var $salary, $designation;
  }
?&gt;
</code></pre>
<h2>Explain the concept of introspection in php with an example.</h2>
<p>PHP Introspection is the ability of a program to examine an object’s
characteristics such as its name, parent class (if any), properties and methods.</p>
<p>Introspection  in PHP offers a useful Ability  to examine classes’ interfaces
properties methods. With introspection we can write  code that operates on any
object or class.</p>
<p><strong>Example</strong>:</p>
<pre><code class="language-php">&lt;?php
  if (class_exists('MyClass')) {
    $myclass = new MyClass();
  }
?&gt;
</code></pre>
<h2>How to use overloading and overriding functions in php?</h2>
<h2>Overloading</h2>
<p>Method overloading is the ability to create a multiple function
of the same name with a different implementation  depending upon the types of
arguments.</p>
<p>How to use overloading in PHP?</p>
<pre><code class="language-php">&lt;?php
class First {
  function func() {
    echo &quot;Hello World&quot;;
  }
}

class Second extends First {
  function func() {
    echo &quot;Bye World&quot;;
  }
}

$o = new Second;
$o-&gt;func();
</code></pre>
<p>O/P</p>
<pre><code>Bye World
</code></pre>
<h2>Overriding</h2>
<p>In function overriding, both parent and child classes should have the same
function name with and number of arguments. It is used to replace the parent
method in child class.</p>
<pre><code class="language-php">&lt;?php
&lt;?php
class First {
  function func() {
    echo &quot;Hello World&quot;;
  }
}

class Second extends First {
  function func() {
    echo &quot;Bye World&quot;;
  }
}

$f = new First;
$s = new Second;
$f-&gt;func();
$s-&gt;func();
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Hello World
Bye World
</code></pre>
<h2>How to use the flip function in php.</h2>
<p>The array_flip function flips/All keys with their associated values in array.</p>
<p>This function is very useful when we have a big/ large array.and we want to
know if a given value  is in the array.</p>
<p><strong>Syntax</strong>:</p>
<pre><code>array_flip(array_name)
</code></pre>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
  $a = array(&quot;a&quot;);
  print_r(array_flip($a));  //flip function is used
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Array( [0]=&gt; a )
</code></pre>
<h2>How to define properties and methods of a class? Explain with suitable examples.</h2>
<ol>
<li>Objects have access to special variables called. properties.</li>
<li>A property Can be valued as an array and even another object.</li>
<li>All properties go inside the curly braces.</li>
<li>The characteristics of a class are known as its properties.</li>
</ol>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
  class Student {
    var $roll_no;
    var $name;
    function display() {
      echo &quot;Roll No: &quot; . $this-&gt;roll_no. &quot;&lt;br&gt;&quot;;
      echo &quot;Name: &quot; $this-&gt;name;
    }
  }

  $s1 = new Student;
  $s1-&gt;roll_no = 10;
  $s1-&gt;name = &quot;Amar&quot;;
  $si-&gt;display();
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Roll No: 10
Name: Amar
</code></pre>
<p>A class method is exactly similar to PHP functions.</p>
<ol>
<li>Method is a function defined within the class.</li>
<li>Methods on the other hand are functions that operate on the data.</li>
<li>Method is also written within the braces {}.</li>
</ol>
<p>The method can be accessed from outside the class.</p>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
class Person {
	public $age = 25;

	public function printAge() {
		echo &quot;The age is: $this-&gt;age&quot;;
	}
}

$person = new Person;
$person-&gt;age = 20;
$person-&gt;printAge();
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>The age is: 20
</code></pre>
<h2>Explain the arithmetic operators that can be used in php with examples.</h2>
<p>The PHP arithmetic operators are used with numeric values to perform common
arithmetical operations, such as addition, subtraction, multiplication etc.</p>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
  $a = 42;
  $b = 20;

  $c = $a + $b;
  echo &quot;Addition is: $c &lt;br/&gt;&quot;;
  $c = $a - $b;
  echo &quot;Subtraction is: $c &lt;br/&gt;&quot;;
  $c = $a * $b;
  echo &quot;Multiplication is: $c &lt;br/&gt;&quot;;
  $c = $a / $b;
  echo &quot;Division is: $c &lt;br/&gt;&quot;;
  $c = $a % $b;
  echo &quot;Modulus is: $c &lt;br/&gt;&quot;;
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Addition is: 62
Subtraction is: 22
Multiplication is: 840
Division is: 2.1
Modulus is: 2
</code></pre>
<h2>What is the use of anonymous functions in php? Explain with examples.</h2>
<p>Anonymous functions, also known as closures, allow the creation of functions
which have no specified name. They are most useful as the value of callable
parameters, but they have many other uses.</p>
<pre><code class="language-php">&lt;?php
$func = function () { echo &quot;Hello World&quot;; };
$func();
</code></pre>
<p>O/P</p>
<pre><code>Hello World
</code></pre>
<h2>Explain cloning objects with examples.</h2>
<p>Object cloning is the process in PHP to create a copy of an object. An object
copy is created by using the clone keyword when the object is cloned PHP will
perform Shallow copy  of all the object properties and properties that are
referenced to their variables will remain references.</p>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
class Obj {
  public $name;
}

$o = new Obj;
$c = clone $o;

$o-&gt;name = &quot;Jonney&quot;;
$c-&gt;name = &quot;Jone&quot;;

echo &quot;Origenal: &quot;.$o-&gt;name.&quot;, Clone: &quot;.$c-&gt;name;
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Origenal: Jonney, Clone: Jone
</code></pre>
<h2>Explain indexed and associative arrays with examples.</h2>
<p>Indexed array: An array having only integer keys is typically referred to as an
indexed array and index arrays can store numbers, drinks and any object but
their index will be represented by number.</p>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
  $colors = array(&quot;Red&quot;);
  print_r($colors);
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Array ( [0] =&gt; Red )
</code></pre>
<p>The associative arrays are very similar to numeric arrays in terms of
functionality but they are different in terms of their index. Associative arrays
will have their index as string so that you can establish a strong association
between key and values.</p>
<pre><code class="language-php">&lt;?php
  $ages = array( &quot;Peter&quot;=&gt;22 );
  print_r($ages);
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Array ( [Peter] =&gt; 22 )
</code></pre>
<h2>How to define constructor and destructor in php with an example?</h2>
<ul>
<li><strong>constructor</strong> - When we create a new object it is useful to initialize its
properties.</li>
<li><strong>destructor</strong> - The destructor method will be called as soon as there are no
other references to a particular object.</li>
</ul>
<pre><code class="language-php">&lt;?php
class Obj {
  function __construct() {
    echo &quot;Class created&quot;;
  }

  function __destruct() {
    echo &quot;Class destroyed&quot;;
  }
}

$o = new Obj;
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>Class Created
Class Destroyed
</code></pre>
<h2>Explain the following string function with an example.</h2>
<ol>
<li>strpos()</li>
<li>strlen()</li>
<li>strcmp()</li>
<li>str_word_count()</li>
<li>strpos()</li>
</ol>
<ul>
<li><strong>strpos()</strong> - Returns the position of the first occurrence of a string.</li>
<li><strong>strlen()</strong> - Returns the length of a string.</li>
<li><strong>strcmp()</strong> - Compares two strings.</li>
<li><strong>str_word_count()</strong> - Count the number of words in a string.</li>
<li><strong>strrpos()</strong> - Finds the position of the last occurrence of a string.</li>
</ul>
<pre><code class="language-php">&lt;?php
echo strpos(&quot;Hello World&quot;, &quot;Hello&quot;);
echo strlen(&quot;Hello World&quot;);
echo strcmp(&quot;Hello World&quot;, &quot;Hello World&quot;);
echo str_word_count(&quot;Hello World&quot;);
echo strrpos(&quot;Hello World&quot;, &quot;Hello&quot;);
</code></pre>
<p>O/P</p>
<pre><code>0
11
0
2
0
</code></pre>
<h2>Write a program using a foreach loop.</h2>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
$a = array(1, 2, 3, 4, 5);
foreach ($a as $n) {
  echo $n;
}
</code></pre>
<p>O/P</p>
<pre><code>12345
</code></pre>
<h2>Explain serialization with suitable examples.</h2>
<p>A string representation of any object in the form of byte-stream is obtained by
serialize() function in PHP. All property variables of the object are contained
in the string and methods are not saved. This string can be stored in any file.</p>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
echo serialize(array(&quot;Red&quot;));
?&gt;
</code></pre>
<p>O/P</p>
<pre><code>a:1:{i:0;s:3:&quot;Red&quot;;}
</code></pre>
<h2>Define <code>imagecolorallocate()</code> function along with suitable examples.</h2>
<p><code>imagecolorallocate()</code> function is another inbuilt PHP function mainly used to
implement a new color to an image. It returns the color of an image in an RGB
format (RED GREEN BLUE).</p>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
  $im = imagecreate(100, 100);
  // sets background to red
  $background = imagecolorallocate($im, 255, 0, 0);
  // sets some colors
  $white = imagecolorallocate($im, 255, 255, 255);
  $black = imagecolorallocate($im, 0, 0, 0);
  // hexadecimal way
  $white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);
  $black = imagecolorallocate($im, 0x00, 0x00, 0x00);
?&gt;
</code></pre>
<h2>Write a program to create a filled rectangle.</h2>
<pre><code class="language-php">&lt;?php
$image = imagecreatetruecolor(500, 300);
imagefilledrectangle($image, 20, 20, 480, 280);
header(&quot;Content-type: image/png&quot;);
imagepng($image);
?&gt;
</code></pre>
<h2>Explain any three data types used in php.</h2>
<ol>
<li><strong>Integer:</strong> integer data type used to specify a numeric value  without a fractional component the range of integers.</li>
<li><strong>Strings:</strong> a string is a sequence of characters where characters are the same as a byte.</li>
<li><strong>Boolean:</strong>   boolean  value can be either true or false both are  case-insensitive.</li>
</ol>
<h2>Differentiate between implode and explode function.</h2>
<table>
<thead>
<tr>
<th>No.</th>
<th>Implode</th>
<th>Explode</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>The implode() function returns a string from the elements of an array.</td>
<td>explode function breaks a string  into smaller parts and stores it  as an array.</td>
</tr>
<tr>
<td>2</td>
<td>The implode() function accepts its  parameters in either order.  However, for consistency with explode(),  you should use the documented order of  arguments.</td>
<td>The explode() function splits  these strings based on a specific  delimiter and returns an array that  contains elements which are sustained  by the splitting operation.</td>
</tr>
<tr>
<td>3</td>
<td>syntax :-string implode (pieces)</td>
<td>array explode (delimiter, string, limit)</td>
</tr>
<tr>
<td>4</td>
<td><strong>Example</strong>:  <code>php &lt;?php $arr = array(&quot;I&quot;, &quot;love&quot;, &quot;PHP.&quot;); $pole = implode(&quot; &quot;, $arr); \ echo &quot;$pole&quot;; ?&gt; </code>  Output: I love PHP.</td>
<td>Example: <?php  $string = "I love php."; $pole = explode(" ", $string); \ \ print_r($pole); ?>  Output: Array ( [0] =&gt; I [1] =&gt; love [2] =&gt; php. )</td>
</tr>
</tbody>
</table>
<h2>State the variable function. Explain it with an example.</h2>
<p>PHP supports the concept of variable function means that we can call a function
based on a value of a variable if a variable name has a round parentheses
appended to it PHP will look for a function with the same name as a whatever
variable Evaluates to and will attempt to execute it.</p>
<p><strong>Example:</strong></p>
<pre><code class="language-php">&lt;?php
  function add($x, $y){
    echo $x + $y;
  }
  $var =  &quot;add&quot;;
  $var(10,20);
?&gt;
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>30
</code></pre>]]></description>
  </item>
  </channel>
</rss>
